{"version":3,"sources":["webpack:///./src/store/actions/actions.js","webpack:///./src/store/actions/index.js"],"names":["composeFailed","error","type","types","COMPOSE_FAILED","payload","composeAdded","compose","COMPOSE_ADDED","composeStart","composeRequest","dispatch","a","request","api","composeImage","then","response","Object","assign","image_status","status","err","composeUpdated","COMPOSE_UPDATED","setRelease","arch","distro","SET_RELEASE","setUploadDestinations","aws","azure","google","SET_UPLOAD_DESTINATIONS","setUploadAWS","shareWithAccounts","SET_UPLOAD_AWS","setUploadAzure","tenantId","subscriptionId","resourceGroup","SET_UPLOAD_AZURE","setUploadGoogle","accountType","SET_UPLOAD_GOOGLE","setSelectedPackages","selectedPackages","SET_SELECTED_PACKAGES","setSubscription","activationKey","insights","organization","SET_SUBSCRIPTION","setSubscribeNow","subscribeNow","SET_SUBSCRIBE_NOW"],"mappings":"kJAUO,IAAMA,EAAgB,SAACC,GAAD,MAAY,CACrCC,KAAMC,IAAMC,eACZC,QAAS,CAAEJ,WAGFK,EAAe,SAACC,GAAD,MAAc,CACtCL,KAAMC,IAAMK,cACZH,QAAS,CAAEE,aAgGA,OACXE,aA9FwB,SAACC,GAAD,sCAAoB,WAAMC,GAAN,eAAAC,EAAA,6DAEtCC,EAAUC,IAAIC,aAAaL,GAFW,kBAGrCG,EAAQG,MAAK,SAAAC,GAGhB,IAAMV,EAAUW,OAAOC,OAAO,GAAIT,EAAgBO,EAAU,CAAEG,aAAc,CAAEC,OAAQ,aACtFV,EAASL,EAAaC,OAJnB,OAKE,SAAAe,GACuB,MAAxBA,EAAIL,SAASI,OACbV,EAASX,EAAc,2CAEvBW,EAASX,EAAc,qDAZa,2CAApB,uDA+FxBuB,eAhHJ,SAAwBhB,GACpB,MAAO,CACHL,KAAMC,IAAMqB,gBACZnB,QAAS,CAAEE,aA8GfkB,WA/EJ,YAAsC,IAAhBC,EAAgB,EAAhBA,KAAMC,EAAU,EAAVA,OACxB,MAAO,CACHzB,KAAMC,IAAMyB,YACZvB,QAAS,CACLqB,OACAC,YA2ERE,sBAtEJ,YAAuD,IAAtBC,EAAsB,EAAtBA,IAAKC,EAAiB,EAAjBA,MAAOC,EAAU,EAAVA,OACzC,MAAO,CACH9B,KAAMC,IAAM8B,wBACZ5B,QAAS,CACLyB,MACAC,QACAC,YAiERE,aA5DJ,YAA6C,IAArBC,EAAqB,EAArBA,kBACpB,MAAO,CACHjC,KAAMC,IAAMiC,eACZ/B,QAAS,CACL8B,uBAyDRE,eApDJ,YAAqE,IAA3CC,EAA2C,EAA3CA,SAAUC,EAAiC,EAAjCA,eAAgBC,EAAiB,EAAjBA,cAChD,MAAO,CACHtC,KAAMC,IAAMsC,iBACZpC,QAAS,CACLiC,WACAC,iBACAC,mBA+CRE,gBA1CJ,YAA6D,IAAlCC,EAAkC,EAAlCA,YAAaR,EAAqB,EAArBA,kBACpC,MAAO,CACHjC,KAAMC,IAAMyC,kBACZvC,QAAS,CACLsC,cACAR,uBAsCRU,oBAjCJ,SAA6BC,GACzB,MAAO,CACH5C,KAAMC,IAAM4C,sBACZ1C,QAASyC,IA+BbE,gBA3BJ,YAAoE,IAAzCC,EAAyC,EAAzCA,cAAeC,EAA0B,EAA1BA,SAAUC,EAAgB,EAAhBA,aAChD,MAAO,CACHjD,KAAMC,IAAMiD,iBACZ/C,QAAS,CACL4C,gBACAC,WACAC,kBAsBRE,gBAjBJ,SAAyBC,GACrB,MAAO,CACHpD,KAAMC,IAAMoD,kBACZlD,QAASiD,KC7GjB","file":"js/0.265e16bd2b79dbc8d111.js","sourcesContent":["import api from '../../api';\nimport types from '../types';\n\nfunction composeUpdated(compose) {\n    return {\n        type: types.COMPOSE_UPDATED,\n        payload: { compose },\n    };\n}\n\nexport const composeFailed = (error) => ({\n    type: types.COMPOSE_FAILED,\n    payload: { error }\n});\n\nexport const composeAdded = (compose) => ({\n    type: types.COMPOSE_ADDED,\n    payload: { compose },\n});\n\nexport const composeStart = (composeRequest) => async dispatch => {\n    // response will be of the format {id: ''}\n    const request = api.composeImage(composeRequest);\n    return request.then(response => {\n        // add the compose id to the composeRequest object to provide access to the\n        // id if iterating through composes and add an image status of 'pending'.\n        const compose = Object.assign({}, composeRequest, response, { image_status: { status: 'pending' }});\n        dispatch(composeAdded(compose));\n    }).catch(err => {\n        if (err.response.status === 500) {\n            dispatch(composeFailed('Error: Something went wrong serverside'));\n        } else {\n            dispatch(composeFailed('Error: Something went wrong with the compose'));\n        }\n    });\n};\n\nfunction setRelease({ arch, distro }) {\n    return {\n        type: types.SET_RELEASE,\n        payload: {\n            arch,\n            distro,\n        }\n    };\n}\n\nfunction setUploadDestinations({ aws, azure, google }) {\n    return {\n        type: types.SET_UPLOAD_DESTINATIONS,\n        payload: {\n            aws,\n            azure,\n            google,\n        }\n    };\n}\n\nfunction setUploadAWS({ shareWithAccounts }) {\n    return {\n        type: types.SET_UPLOAD_AWS,\n        payload: {\n            shareWithAccounts,\n        }\n    };\n}\n\nfunction setUploadAzure({ tenantId, subscriptionId, resourceGroup }) {\n    return {\n        type: types.SET_UPLOAD_AZURE,\n        payload: {\n            tenantId,\n            subscriptionId,\n            resourceGroup,\n        }\n    };\n}\n\nfunction setUploadGoogle({ accountType, shareWithAccounts }) {\n    return {\n        type: types.SET_UPLOAD_GOOGLE,\n        payload: {\n            accountType,\n            shareWithAccounts,\n        }\n    };\n}\n\nfunction setSelectedPackages(selectedPackages) {\n    return {\n        type: types.SET_SELECTED_PACKAGES,\n        payload: selectedPackages\n    };\n}\n\nfunction setSubscription({ activationKey, insights, organization }) {\n    return {\n        type: types.SET_SUBSCRIPTION,\n        payload: {\n            activationKey,\n            insights,\n            organization,\n        }\n    };\n}\n\nfunction setSubscribeNow(subscribeNow) {\n    return {\n        type: types.SET_SUBSCRIBE_NOW,\n        payload: subscribeNow\n    };\n}\n\nexport default {\n    composeStart,\n    composeUpdated,\n    setRelease,\n    setUploadDestinations,\n    setUploadAWS,\n    setUploadAzure,\n    setUploadGoogle,\n    setSelectedPackages,\n    setSubscription,\n    setSubscribeNow,\n};\n","export { default as actions } from './actions';\n"],"sourceRoot":""}