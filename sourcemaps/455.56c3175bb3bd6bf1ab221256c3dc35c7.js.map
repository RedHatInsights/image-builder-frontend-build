{"version":3,"file":"js/455.1671010426328.0be02617fcaf38d2d9f7.js","mappings":"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","sources":["webpack:///./src/Components/ShareImageModal/RegionsSelect.js","webpack:///./src/Components/ShareImageModal/ShareImageModal.js","webpack:///./src/Router.js","webpack:///./src/App.js","webpack:///./src/Utilities/path.js","webpack:///./src/repos.js","webpack:///./src/api.js","webpack:///./src/constants.js","webpack:///./src/store/clonesSlice.js","webpack:///./src/store/composesSlice.js","webpack:///./src/store/index.js"],"sourcesContent":["import React, { useState } from 'react';\n\nimport {\n  ActionGroup,\n  Button,\n  Form,\n  FormGroup,\n  Popover,\n  Select,\n  SelectOption,\n  SelectVariant,\n} from '@patternfly/react-core';\nimport { ExclamationCircleIcon, HelpIcon } from '@patternfly/react-icons';\nimport { addNotification } from '@redhat-cloud-services/frontend-components-notifications/redux';\nimport { createSelector } from '@reduxjs/toolkit';\nimport PropTypes from 'prop-types';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useNavigate } from 'react-router-dom';\n\nimport api from '../../api';\nimport { AWS_REGIONS } from '../../constants';\nimport { cloneAdded } from '../../store/clonesSlice';\nimport { selectClonesById, selectComposeById } from '../../store/composesSlice';\nimport { resolveRelPath } from '../../Utilities/path';\n\nexport const selectRegionsToDisable = createSelector(\n  [selectComposeById, selectClonesById],\n  (compose, clones) => {\n    let regions = new Set();\n    regions.add(compose.region);\n    clones.map((clone) => {\n      clone.region &&\n        clone.share_with_accounts[0] === compose.share_with_accounts[0] &&\n        clone.status !== 'failure' &&\n        regions.add(clone.region);\n    });\n\n    return regions;\n  }\n);\n\nconst prepareRegions = (regionsToDisable) => {\n  const regions = AWS_REGIONS.map((region) => ({\n    ...region,\n    disabled: regionsToDisable.has(region.value),\n  }));\n\n  return regions;\n};\n\nconst RegionsSelect = ({\n  composeId,\n  handleClose,\n  handleToggle,\n  isOpen,\n  setIsOpen,\n}) => {\n  const dispatch = useDispatch();\n  const navigate = useNavigate();\n  const [isSaving, setIsSaving] = useState(false);\n  const [selected, setSelected] = useState([]);\n  const titleId = 'Clone this image';\n  const [validated, setValidated] = useState('default');\n  const [helperTextInvalid] = useState(\n    'Select at least one region to share to.'\n  );\n\n  const compose = useSelector((state) => selectComposeById(state, composeId));\n\n  const regionsToDisable = useSelector((state) =>\n    selectRegionsToDisable(state, composeId)\n  );\n  const [options] = useState(prepareRegions(regionsToDisable));\n\n  const handleSelect = (event, selection) => {\n    let nextSelected;\n    if (selected.includes(selection)) {\n      nextSelected = selected.filter((region) => region !== selection);\n      setSelected(nextSelected);\n    } else {\n      nextSelected = [...selected, selection];\n      setSelected(nextSelected);\n    }\n    nextSelected.length === 0 ? setValidated('error') : setValidated('default');\n  };\n\n  const handleClear = () => {\n    setSelected([]);\n    setIsOpen(false);\n    setValidated('error');\n  };\n\n  const generateRequests = () => {\n    const requests = selected.map((region) => {\n      return {\n        region: region,\n        share_with_accounts: [compose.share_with_accounts[0]],\n      };\n    });\n    return requests;\n  };\n\n  const handleSubmit = () => {\n    setIsSaving(true);\n    const requests = generateRequests();\n    Promise.all(\n      requests.map((request) =>\n        api.cloneImage(composeId, request).then((response) => {\n          dispatch(\n            cloneAdded({\n              clone: {\n                ...response,\n                request,\n                image_status: { status: 'pending' },\n              },\n              parent: composeId,\n            })\n          );\n        })\n      )\n    )\n      .then(() => {\n        navigate(resolveRelPath(''));\n        dispatch(\n          addNotification({\n            variant: 'success',\n            title: 'Your image is being shared',\n          })\n        );\n\n        setIsSaving(false);\n      })\n      .catch((err) => {\n        navigate(resolveRelPath(''));\n        dispatch(\n          addNotification({\n            variant: 'danger',\n            title: 'Your image could not be created',\n            description: `Status code ${err.response.status}: ${err.response.statusText}`,\n          })\n        );\n      });\n  };\n\n  return (\n    <Form>\n      <span id={titleId} hidden>\n        Select a region\n      </span>\n      <FormGroup\n        label=\"Select region\"\n        isRequired\n        validated={validated}\n        helperTextInvalid={helperTextInvalid}\n        helperTextInvalidIcon={<ExclamationCircleIcon />}\n        labelIcon={\n          <Popover\n            headerContent={<div>Sharing images to other regions</div>}\n            bodyContent={\n              <div>\n                Your image will be built, uploaded to AWS, and shared to the\n                regions you select. The shared image will expire within 14 days.\n                To permanently access the image, copy the image, which will be\n                shared to your account by Red Hat, to your own AWS account.\n              </div>\n            }\n          >\n            <button\n              type=\"button\"\n              aria-label=\"More info for name field\"\n              onClick={(e) => e.preventDefault()}\n              aria-describedby=\"simple-form-name-01\"\n              className=\"pf-c-form__group-label-help\"\n            >\n              <HelpIcon noVerticalAlign />\n            </button>\n          </Popover>\n        }\n      >\n        <Select\n          variant={SelectVariant.typeaheadMulti}\n          typeAheadAriaLabel=\"Select a region\"\n          onToggle={handleToggle}\n          onSelect={handleSelect}\n          onClear={handleClear}\n          selections={selected}\n          isOpen={isOpen}\n          aria-labelledby={titleId}\n          placeholderText=\"Select a region\"\n          menuAppendTo=\"parent\"\n          validated={validated}\n          maxHeight=\"25rem\"\n        >\n          {options.map((option, index) => (\n            <SelectOption\n              isDisabled={option.disabled}\n              key={index}\n              value={option.value}\n              {...(option.description && { description: option.description })}\n            />\n          ))}\n        </Select>\n      </FormGroup>\n      <ActionGroup>\n        <Button\n          onClick={handleSubmit}\n          variant=\"primary\"\n          key=\"share\"\n          isDisabled={selected.length === 0 || isSaving}\n          isLoading={isSaving}\n        >\n          Share\n        </Button>\n        <Button variant=\"link\" onClick={handleClose} key=\"cancel\">\n          Cancel\n        </Button>\n      </ActionGroup>\n    </Form>\n  );\n};\n\nRegionsSelect.propTypes = {\n  composeId: PropTypes.string,\n  handleClose: PropTypes.func,\n  handleToggle: PropTypes.func,\n  isOpen: PropTypes.bool,\n  setIsOpen: PropTypes.func,\n};\n\nexport default RegionsSelect;\n","import React, { useState } from 'react';\n\nimport { Modal } from '@patternfly/react-core';\nimport { useLocation, useNavigate } from 'react-router-dom';\n\nimport RegionsSelect from './RegionsSelect';\n\nimport { resolveRelPath } from '../../Utilities/path';\n\nconst ShareToRegionsModal = () => {\n  const navigate = useNavigate();\n  const location = useLocation();\n  const handleClose = () => navigate(resolveRelPath(''));\n  const [isOpen, setIsOpen] = useState(false);\n\n  const composeId = location?.state?.composeId;\n\n  const handleToggle = (isOpen) => setIsOpen(isOpen);\n\n  const handleEscapePress = () => {\n    if (isOpen) {\n      handleToggle(isOpen);\n    } else {\n      handleClose();\n    }\n  };\n\n  return (\n    <Modal\n      isOpen={true}\n      variant=\"small\"\n      aria-label=\"Share to new region\"\n      onClose={handleClose}\n      title=\"Share to new region\"\n      description=\"Configure new regions for this image that will run on your AWS. All the\n        regions will launch with the same configuration.\"\n      onEscapePress={handleEscapePress}\n    >\n      <RegionsSelect\n        composeId={composeId}\n        handleClose={handleClose}\n        handleToggle={handleToggle}\n        isOpen={isOpen}\n        setIsOpen={setIsOpen}\n      />\n    </Modal>\n  );\n};\n\nexport default ShareToRegionsModal;\n","import React, { lazy } from 'react';\n\nimport { Route, Routes } from 'react-router-dom';\n\nimport ShareImageModal from './Components/ShareImageModal/ShareImageModal';\nimport { resolveRelPath } from './Utilities/path';\n\nconst LandingPage = lazy(() => import('./Components/LandingPage/LandingPage'));\nconst CreateImageWizard = lazy(() =>\n  import('./Components/CreateImageWizard/CreateImageWizard')\n);\n\nexport const Router = () => {\n  return (\n    <Routes>\n      <Route\n        path={resolveRelPath('imagewizard/*')}\n        element={<CreateImageWizard />}\n      />\n      <Route path={resolveRelPath('*')} element={<LandingPage />} />\n      <Route path={resolveRelPath('share/*')} element={<ShareImageModal />} />\n    </Routes>\n  );\n};\n","import React, { useEffect } from 'react';\n\nimport NotificationsPortal from '@redhat-cloud-services/frontend-components-notifications/NotificationPortal';\nimport { useStore } from 'react-redux';\nimport { useNavigate } from 'react-router-dom';\nimport '@patternfly/patternfly/patternfly-addons.css';\n\nimport { Router } from './Router';\nimport { resolveRelPath } from './Utilities/path';\n\nconst App = (props) => {\n  const navigate = useNavigate();\n  const store = useStore();\n\n  useEffect(() => {\n    document.title = 'Image Builder | Red Hat Insights';\n    insights.chrome.init();\n    insights.chrome.identifyApp('image-builder');\n    const unregister = insights.chrome.on('APP_NAVIGATION', () =>\n      navigate(resolveRelPath(''))\n    );\n    return () => {\n      unregister();\n    };\n  }, []);\n\n  return (\n    <React.Fragment>\n      <NotificationsPortal store={store} />\n      <Router childProps={props} />\n    </React.Fragment>\n  );\n};\n\nexport default App;\n","function getBaseName(pathname) {\n  let release = '/';\n  const pathName = pathname.split('/');\n\n  pathName.shift();\n\n  if (pathName[0] === 'beta') {\n    pathName.shift();\n    release = `/beta/`;\n  }\n\n  return `${release}`;\n}\n\nfunction resolveRelPath(path) {\n  return `/insights/image-builder/${path}`;\n}\n\nexport { getBaseName, resolveRelPath };\n","import { RHEL_8, RHEL_9 } from './constants';\n\nexport const repos = {\n  [RHEL_8]: [\n    {\n      name: 'baseos',\n      distribution_arch: 'x86_64',\n      url: 'https://cdn.redhat.com/content/dist/rhel8/8.7/x86_64/baseos/os',\n    },\n    {\n      distribution_arch: 'x86_64',\n      name: 'appstream',\n      url: 'https://cdn.redhat.com/content/dist/rhel8/8.7/x86_64/appstream/os',\n    },\n    {\n      distribution_arch: 'x86_64',\n      name: 'google-compute-engine',\n      url: 'https://packages.cloud.google.com/yum/repos/google-compute-engine-el8-x86_64-stable',\n    },\n    {\n      distribution_arch: 'x86_64',\n      name: 'rhel-86-google-cloud-sdk',\n      url: 'https://packages.cloud.google.com/yum/repos/cloud-sdk-el8-x86_64',\n    },\n  ],\n  [RHEL_9]: [\n    {\n      name: 'baseos',\n      distribution_arch: 'x86_64',\n      url: 'https://cdn.redhat.com/content/dist/rhel9/9.1/x86_64/baseos/os',\n    },\n    {\n      distribution_arch: 'x86_64',\n      name: 'appstream',\n      url: 'https://cdn.redhat.com/content/dist/rhel9/9.1/x86_64/appstream/os',\n    },\n    {\n      distribution_arch: 'x86_64',\n      name: 'google-compute-engine',\n      url: 'https://packages.cloud.google.com/yum/repos/google-compute-engine-el9-x86_64-stable',\n    },\n    {\n      distribution_arch: 'x86_64',\n      name: 'google-cloud-sdk',\n      url: 'https://packages.cloud.google.com/yum/repos/cloud-sdk-el9-x86_64',\n    },\n  ],\n  'centos-8': [\n    {\n      name: 'baseos',\n      distribution_arch: 'x86_64',\n      url: 'http://mirror.centos.org/centos/8-stream/BaseOS/x86_64/os/',\n    },\n    {\n      name: 'appstream',\n      distribution_arch: 'x86_64',\n      url: 'http://mirror.centos.org/centos/8-stream/AppStream/x86_64/os/',\n    },\n    {\n      name: 'extras',\n      distribution_arch: 'x86_64',\n      url: 'http://mirror.centos.org/centos/8-stream/extras/x86_64/os/',\n    },\n    {\n      name: 'google-compute-engine',\n      distribution_arch: 'x86_64',\n      url: 'https://packages.cloud.google.com/yum/repos/google-compute-engine-el8-x86_64-stable',\n    },\n    {\n      name: 'google-cloud-sdk',\n      distribution_arch: 'x86_64',\n      url: 'https://packages.cloud.google.com/yum/repos/cloud-sdk-el8-x86_64',\n    },\n  ],\n  'centos-9': [\n    {\n      name: 'baseos',\n      distribution_arch: 'x86_64',\n      url: 'http://mirror.centos.org/centos/9-stream/BaseOS/x86_64/os/',\n    },\n    {\n      name: 'appstream',\n      distribution_arch: 'x86_64',\n      url: 'http://mirror.centos.org/centos/9-stream/AppStream/x86_64/os/',\n    },\n    {\n      name: 'extras',\n      distribution_arch: 'x86_64',\n      url: 'http://mirror.centos.org/centos/9-stream/extras/x86_64/os/',\n    },\n    {\n      name: 'google-compute-engine',\n      distribution_arch: 'x86_64',\n      url: 'https://packages.cloud.google.com/yum/repos/google-compute-engine-el9-x86_64-stable',\n    },\n    {\n      name: 'google-cloud-sdk',\n      distribution_arch: 'x86_64',\n      url: 'https://packages.cloud.google.com/yum/repos/cloud-sdk-el9-x86_64',\n    },\n  ],\n};\n","import axios from 'axios';\n\nimport { CONTENT_SOURCES, IMAGE_BUILDER_API, RHSM_API } from './constants';\nimport { repos } from './repos';\n\nconst postHeaders = { headers: { 'Content-Type': 'application/json' } };\n\nasync function composeImage(body) {\n  let path = '/compose';\n  const request = await axios.post(\n    IMAGE_BUILDER_API.concat(path),\n    body,\n    postHeaders\n  );\n  return request.data;\n}\n\nasync function getComposes(limit, offset) {\n  const params = new URLSearchParams({\n    limit,\n    offset,\n  });\n  let path = '/composes?' + params.toString();\n  const request = await axios.get(IMAGE_BUILDER_API.concat(path));\n  return request.data;\n}\n\nasync function getComposeStatus(id) {\n  let path = '/composes/' + id;\n  const request = await axios.get(IMAGE_BUILDER_API.concat(path));\n  return request.data;\n}\n\nasync function getPackages(distribution, architecture, search, limit) {\n  const params = new URLSearchParams({\n    distribution,\n    architecture,\n    search,\n  });\n  limit && params.append('limit', limit);\n  let path = '/packages?' + params.toString();\n  const request = await axios.get(IMAGE_BUILDER_API.concat(path));\n  return request.data;\n}\n\nasync function getPackagesContentSources(distribution, search) {\n  // content-sources expects an array of urls but we store the whole repo object\n  // so map the urls into an array to send to the content-sources api\n  const repoUrls = repos[distribution].map((repo) => repo.url);\n  const body = {\n    urls: repoUrls,\n    search,\n  };\n  const path = '/rpms/names';\n  const request = await axios.post(\n    CONTENT_SOURCES.concat(path),\n    body,\n    postHeaders\n  );\n  // map `package_name` key to just `name` since that's what we use across the UI\n  const packages = request.data.map(({ package_name: name, ...rest }) => ({\n    name,\n    ...rest,\n  }));\n  return packages;\n}\n\nasync function getVersion() {\n  let path = '/version';\n  const request = await axios.get(IMAGE_BUILDER_API.concat(path));\n  return request.data;\n}\n\nasync function getActivationKeys() {\n  const path = '/activation_keys';\n  const request = await axios.get(RHSM_API.concat(path));\n  return request.data.body;\n}\n\nasync function getActivationKey(name) {\n  const path = `/activation_keys/${name}`;\n  const request = await axios.get(RHSM_API.concat(path));\n  return request.data.body;\n}\n\n// get clones of a compose\nasync function getClones(id, limit, offset) {\n  const params = new URLSearchParams({\n    limit,\n    offset,\n  });\n  const path = `/composes/${id}/clones?${params}`;\n  const request = await axios.get(IMAGE_BUILDER_API.concat(path));\n  return request.data;\n}\n\nasync function getCloneStatus(id) {\n  const path = `/clones/${id}`;\n  const request = await axios.get(IMAGE_BUILDER_API.concat(path));\n  return request.data;\n}\n\nasync function cloneImage(composeId, body) {\n  const path = `/composes/${composeId}/clone`;\n  const request = await axios.post(\n    IMAGE_BUILDER_API.concat(path),\n    body,\n    postHeaders\n  );\n  return request.data;\n}\n\nexport default {\n  cloneImage,\n  composeImage,\n  getClones,\n  getCloneStatus,\n  getComposes,\n  getComposeStatus,\n  getPackages,\n  getPackagesContentSources,\n  getVersion,\n  getActivationKeys,\n  getActivationKey,\n};\n","export const IMAGE_BUILDER_API = '/api/image-builder/v1';\nexport const RHSM_API = '/api/rhsm/v2';\nexport const CONTENT_SOURCES = '/api/content-sources/v1';\nexport const RHEL_8 = 'rhel-87';\nexport const RHEL_9 = 'rhel-91';\n\nexport const UNIT_KIB = 1024 ** 1;\nexport const UNIT_MIB = 1024 ** 2;\nexport const UNIT_GIB = 1024 ** 3;\n\nexport const RELEASES = {\n  [RHEL_8]: 'Red Hat Enterprise Linux (RHEL) 8',\n  [RHEL_9]: 'Red Hat Enterprise Linux (RHEL) 9',\n  'centos-8': 'CentOS Stream 8',\n  'centos-9': 'CentOS Stream 9',\n};\n\nexport const DEFAULT_AWS_REGION = 'us-east-1';\n\n// https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/using-regions-availability-zones.html\nexport const AWS_REGIONS = [\n  { description: 'US East (Ohio)', value: 'us-east-2' },\n  { description: 'US East (N. Virginia)', value: 'us-east-1' },\n  { description: 'US West (N. California)', value: 'us-west-1' },\n  { description: 'US West (Oregon)', value: 'us-west-2' },\n  { description: 'Africa (Cape Town)', value: 'af-south-1' },\n  { description: 'Asia Pacific (Hong Kong)', value: 'ap-east-1' },\n  { description: 'Asia Pacific (Jakarta)', value: 'ap-southeast-3' },\n  { description: 'Asia Pacific (Mumbai)', value: 'ap-south-1' },\n  { description: 'Asia Pacific (Osaka)', value: 'ap-northeast-3' },\n  { description: 'Asia Pacific (Seoul)', value: 'ap-northeast-2' },\n  { description: 'Asia Pacific (Singapore)', value: 'ap-southeast-1' },\n  { description: 'Asia Pacific (Sydney)', value: 'ap-southeast-2' },\n  { description: 'Asia Pacific (Tokyo)', value: 'ap-northeast-1' },\n  { description: 'Canada (Central)', value: 'ca-central-1' },\n  { description: 'Europe (Frankfurt)', value: 'eu-central-1' },\n  { description: 'Europe (Ireland)', value: 'eu-west-1' },\n  { description: 'Europe (London)', value: 'eu-west-2' },\n  { description: 'Europe (Milan)', value: 'eu-south-1' },\n  { description: 'Europe (Paris)', value: 'eu-west-3' },\n  { description: 'Europe (Stockholm)', value: 'eu-north-1' },\n  { description: 'Middle East (Bahrain)', value: 'me-south-1' },\n  { description: 'Middle East (UAE)', value: 'me-central-1' },\n  { description: 'South America (S\\u00e3o Paolo)', value: 'sa-east-1' },\n];\n\nexport const AWS_S3_EXPIRATION_TIME_IN_HOURS = 6;\n","import { createSlice } from '@reduxjs/toolkit';\n\nconst initialState = {\n  allIds: [],\n  byId: {},\n  error: null,\n};\n\nexport const clonesSlice = createSlice({\n  name: 'clones',\n  initialState,\n  reducers: {\n    cloneAdded: (state, action) => {\n      if (!state.allIds.includes(action.payload.clone.id)) {\n        state.allIds.push(action.payload.clone.id);\n      }\n      state.byId[action.payload.clone.id] = { ...action.payload.clone };\n      state.byId[action.payload.clone.id].parent = action.payload.parent;\n      state.error = null;\n    },\n    cloneUpdatedStatus: (state, action) => {\n      const image_status = {\n        status: action.payload.status.status,\n        upload_status: action.payload.status,\n      };\n      state.byId[action.payload.id].image_status = image_status;\n    },\n  },\n});\n\nexport const selectCloneById = (state, cloneId) => {\n  const clone = state.clones.byId[cloneId];\n\n  if (clone !== undefined) {\n    return {\n      created_at: clone.created_at,\n      id: clone.id,\n      region: clone.request.region,\n      ami: clone.image_status?.upload_status?.options?.ami,\n      share_with_accounts: clone.request.share_with_accounts,\n      status: clone.image_status?.status,\n      uploadStatus: clone.image_status?.upload_status,\n      parent: clone.parent,\n      imageType: 'aws',\n      isClone: true,\n    };\n  } else {\n    return null;\n  }\n};\n\nexport const { cloneAdded, cloneUpdatedStatus } = clonesSlice.actions;\nexport default clonesSlice.reducer;\n","import { createSelector, createSlice } from '@reduxjs/toolkit';\n\nimport { selectCloneById } from './clonesSlice';\n\nconst initialState = {\n  count: 0,\n  allIds: [],\n  byId: {},\n  error: null,\n};\n\nconst composesSlice = createSlice({\n  name: 'composes',\n  initialState,\n  reducers: {\n    composeAdded: (state, action) => {\n      // only add to array if compose does not exist\n      if (!state.allIds.includes(action.payload.compose.id)) {\n        if (action.payload.insert) {\n          state.allIds.unshift(action.payload.compose.id);\n        } else {\n          state.allIds.push(action.payload.compose.id);\n        }\n      }\n      state.byId[action.payload.compose.id] = action.payload.compose;\n\n      // initialize empty clones array\n      if (!state.byId[action.payload.compose.id].clones) {\n        state.byId[action.payload.compose.id].clones = [];\n      }\n\n      state.error = null;\n    },\n    composesUpdatedCount: (state, action) => {\n      state.count = action.payload.count;\n    },\n    composeUpdatedStatus: (state, action) => {\n      state.byId[action.payload.id].image_status = action.payload.status;\n    },\n  },\n  extraReducers: (builder) => {\n    builder.addCase('clones/cloneAdded', (state, action) => {\n      state.byId[action.payload.parent].clones.push(action.payload.clone.id);\n    });\n  },\n});\n\nexport const selectComposeById = (state, composeId) => {\n  const compose = state.composes.byId[composeId];\n\n  if (compose !== undefined) {\n    return {\n      created_at: compose.created_at,\n      id: compose.id,\n      imageName: compose.image_name || compose.id,\n      region: compose.image_status?.upload_status?.options?.region,\n      ami: compose.image_status?.upload_status?.options?.ami,\n      share_with_accounts:\n        compose.request.image_requests[0].upload_request?.options\n          .share_with_accounts,\n      status: compose.image_status?.status,\n      clones: [...compose.clones],\n      imageType: compose.request.image_requests[0].image_type,\n      uploadType: compose.request.image_requests[0].upload_request.type,\n      uploadOptions: compose.request.image_requests[0].upload_request.options,\n      uploadStatus: compose.image_status?.upload_status,\n      request: compose.request,\n      architecture: compose.request.image_requests[0].architecture,\n      isClone: false,\n    };\n  } else {\n    return null;\n  }\n};\n\nexport const selectClonesById = (state, composeId) => {\n  const compose = state.composes.byId[composeId];\n\n  if (compose.clones.length !== 0) {\n    const clones = compose.clones.map((cloneId) => {\n      const clone = state.clones.byId[cloneId];\n      return {\n        created_at: clone.created_at,\n        id: clone.id,\n        region: clone.request.region,\n        ami: clone.image_status?.upload_status?.options?.ami,\n        share_with_accounts: clone.request.share_with_accounts,\n        status: clone.image_status?.status,\n      };\n    });\n    return clones;\n  }\n\n  return [];\n};\n\nexport const selectImageById = (state, imageId) => {\n  const image = state.composes.allIds.includes(imageId)\n    ? selectComposeById(state, imageId)\n    : selectCloneById(state, imageId);\n\n  return image;\n};\n\nexport const selectImagesById = createSelector(\n  [selectComposeById, selectClonesById],\n  (compose, clones) => [compose, ...clones]\n);\n\nexport const selectImageStatusesById = createSelector(\n  [selectImagesById],\n  (images) => {\n    return images.map((image) => image.status);\n  }\n);\n\nexport const { composeAdded, composesUpdatedCount, composeUpdatedStatus } =\n  composesSlice.actions;\nexport default composesSlice.reducer;\n","import { notificationsReducer } from '@redhat-cloud-services/frontend-components-notifications/redux';\nimport { configureStore } from '@reduxjs/toolkit';\nimport promiseMiddleware from 'redux-promise-middleware';\n\nimport clonesSlice from './clonesSlice';\nimport composesSlice from './composesSlice';\n\nexport const reducer = {\n  clones: clonesSlice,\n  composes: composesSlice,\n  notifications: notificationsReducer,\n};\n\nexport const middleware = (getDefaultMiddleware) =>\n  getDefaultMiddleware().concat(promiseMiddleware);\n\nexport const store = configureStore({ reducer, middleware });\n"],"names":["selectRegionsToDisable","createSelector","selectComposeById","selectClonesById","compose","clones","regions","Set","add","region","map","clone","share_with_accounts","status","RegionsSelect","composeId","handleClose","handleToggle","isOpen","setIsOpen","dispatch","useDispatch","navigate","useNavigate","useState","isSaving","setIsSaving","selected","setSelected","titleId","validated","setValidated","helperTextInvalid","useSelector","state","regionsToDisable","AWS_REGIONS","disabled","has","value","prepareRegions","options","Form","id","hidden","FormGroup","label","isRequired","helperTextInvalidIcon","labelIcon","Popover","headerContent","bodyContent","type","onClick","e","preventDefault","className","noVerticalAlign","Select","variant","SelectVariant","typeAheadAriaLabel","onToggle","onSelect","event","selection","nextSelected","includes","filter","length","onClear","selections","placeholderText","menuAppendTo","maxHeight","option","index","SelectOption","isDisabled","key","description","ActionGroup","Button","requests","Promise","all","request","api","then","response","cloneAdded","image_status","parent","resolveRelPath","addNotification","title","err","statusText","isLoading","propTypes","PropTypes","location","useLocation","Modal","onClose","onEscapePress","LandingPage","lazy","CreateImageWizard","Router","Routes","Route","path","element","ShareImageModal","props","store","useStore","useEffect","document","insights","chrome","init","identifyApp","unregister","on","childProps","getBaseName","pathname","release","pathName","split","shift","repos","RHEL_8","name","distribution_arch","url","RHEL_9","postHeaders","headers","body","axios","IMAGE_BUILDER_API","data","limit","offset","params","URLSearchParams","toString","distribution","architecture","search","append","repoUrls","repo","urls","CONTENT_SOURCES","packages","package_name","RHSM_API","cloneImage","composeImage","getClones","getCloneStatus","getComposes","getComposeStatus","getPackages","getPackagesContentSources","getVersion","getActivationKeys","getActivationKey","UNIT_KIB","UNIT_MIB","UNIT_GIB","RELEASES","DEFAULT_AWS_REGION","AWS_S3_EXPIRATION_TIME_IN_HOURS","clonesSlice","createSlice","initialState","allIds","byId","error","reducers","action","payload","push","cloneUpdatedStatus","upload_status","selectCloneById","cloneId","undefined","created_at","ami","uploadStatus","imageType","isClone","actions","composesSlice","count","composeAdded","insert","unshift","composesUpdatedCount","composeUpdatedStatus","extraReducers","builder","addCase","composes","imageName","image_name","image_requests","upload_request","image_type","uploadType","uploadOptions","selectImageById","imageId","selectImagesById","selectImageStatusesById","images","image","reducer","notifications","notificationsReducer","configureStore","middleware","getDefaultMiddleware","concat","promiseMiddleware"],"sourceRoot":""}