{"version":3,"file":"js/455.d5d4fe79a80a78423868.js","mappings":"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","sources":["webpack:///./src/Components/ShareImageModal/RegionsSelect.js","webpack:///./src/Components/ShareImageModal/ShareImageModal.js","webpack:///./src/Router.js","webpack:///./src/App.js","webpack:///./src/Utilities/path.js","webpack:///./src/api.js","webpack:///./src/constants.js","webpack:///./src/store/apiSlice.js","webpack:///./src/store/clonesSlice.js","webpack:///./src/store/composesSlice.js","webpack:///./src/store/index.js","webpack:///./src/store/repositoriesSlice.js"],"sourcesContent":["import React, { useState } from 'react';\n\nimport {\n  ActionGroup,\n  Button,\n  Form,\n  FormGroup,\n  Popover,\n  Select,\n  SelectOption,\n  SelectVariant,\n} from '@patternfly/react-core';\nimport { ExclamationCircleIcon, HelpIcon } from '@patternfly/react-icons';\nimport { addNotification } from '@redhat-cloud-services/frontend-components-notifications/redux';\nimport { createSelector } from '@reduxjs/toolkit';\nimport PropTypes from 'prop-types';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useNavigate } from 'react-router-dom';\n\nimport api from '../../api';\nimport { AWS_REGIONS } from '../../constants';\nimport { cloneAdded } from '../../store/clonesSlice';\nimport { selectClonesById, selectComposeById } from '../../store/composesSlice';\nimport { resolveRelPath } from '../../Utilities/path';\n\nexport const selectRegionsToDisable = createSelector(\n  [selectComposeById, selectClonesById],\n  (compose, clones) => {\n    const regions = new Set();\n    regions.add(compose.region);\n    clones.map((clone) => {\n      clone.region &&\n        clone.share_with_accounts?.[0] === compose.share_with_accounts?.[0] &&\n        clone.share_with_sources?.[0] === compose.share_with_sources?.[0] &&\n        clone.status !== 'failure' &&\n        regions.add(clone.region);\n    });\n\n    return regions;\n  }\n);\n\nconst prepareRegions = (regionsToDisable) => {\n  const regions = AWS_REGIONS.map((region) => ({\n    ...region,\n    disabled: regionsToDisable.has(region.value),\n  }));\n\n  return regions;\n};\n\nconst RegionsSelect = ({\n  composeId,\n  handleClose,\n  handleToggle,\n  isOpen,\n  setIsOpen,\n}) => {\n  const dispatch = useDispatch();\n  const navigate = useNavigate();\n  const [isSaving, setIsSaving] = useState(false);\n  const [selected, setSelected] = useState([]);\n  const titleId = 'Clone this image';\n  const [validated, setValidated] = useState('default');\n  const [helperTextInvalid] = useState(\n    'Select at least one region to share to.'\n  );\n\n  const compose = useSelector((state) => selectComposeById(state, composeId));\n\n  const regionsToDisable = useSelector((state) =>\n    selectRegionsToDisable(state, composeId)\n  );\n  const [options] = useState(prepareRegions(regionsToDisable));\n\n  const handleSelect = (event, selection) => {\n    let nextSelected;\n    if (selected.includes(selection)) {\n      nextSelected = selected.filter((region) => region !== selection);\n      setSelected(nextSelected);\n    } else {\n      nextSelected = [...selected, selection];\n      setSelected(nextSelected);\n    }\n    nextSelected.length === 0 ? setValidated('error') : setValidated('default');\n  };\n\n  const handleClear = () => {\n    setSelected([]);\n    setIsOpen(false);\n    setValidated('error');\n  };\n\n  const generateRequests = () => {\n    const requests = selected.map((region) => {\n      const request = { region: region };\n      if (compose.share_with_sources?.[0]) {\n        request.share_with_sources = [compose.share_with_sources[0]];\n      } else {\n        request.share_with_accounts = [compose.share_with_accounts[0]];\n      }\n      return request;\n    });\n    return requests;\n  };\n\n  const handleSubmit = () => {\n    setIsSaving(true);\n    const requests = generateRequests();\n    Promise.all(\n      requests.map((request) =>\n        api.cloneImage(composeId, request).then((response) => {\n          dispatch(\n            cloneAdded({\n              clone: {\n                ...response,\n                request,\n                image_status: { status: 'pending' },\n              },\n              parent: composeId,\n            })\n          );\n        })\n      )\n    )\n      .then(() => {\n        navigate(resolveRelPath(''));\n        dispatch(\n          addNotification({\n            variant: 'success',\n            title: 'Your image is being shared',\n          })\n        );\n\n        setIsSaving(false);\n      })\n      .catch((err) => {\n        navigate(resolveRelPath(''));\n        dispatch(\n          addNotification({\n            variant: 'danger',\n            title: 'Your image could not be created',\n            description: `Status code ${err.response.status}: ${err.response.statusText}`,\n          })\n        );\n      });\n  };\n\n  return (\n    <Form>\n      <span id={titleId} hidden>\n        Select a region\n      </span>\n      <FormGroup\n        label=\"Select region\"\n        isRequired\n        validated={validated}\n        helperTextInvalid={helperTextInvalid}\n        helperTextInvalidIcon={<ExclamationCircleIcon />}\n        labelIcon={\n          <Popover\n            headerContent={<div>Sharing images to other regions</div>}\n            bodyContent={\n              <div>\n                Your image will be built, uploaded to AWS, and shared to the\n                regions you select. The shared image will expire within 14 days.\n                To permanently access the image, copy the image, which will be\n                shared to your account by Red Hat, to your own AWS account.\n              </div>\n            }\n          >\n            <button\n              type=\"button\"\n              aria-label=\"More info for name field\"\n              onClick={(e) => e.preventDefault()}\n              aria-describedby=\"simple-form-name-01\"\n              className=\"pf-c-form__group-label-help\"\n            >\n              <HelpIcon noVerticalAlign />\n            </button>\n          </Popover>\n        }\n      >\n        <Select\n          variant={SelectVariant.typeaheadMulti}\n          typeAheadAriaLabel=\"Select a region\"\n          onToggle={handleToggle}\n          onSelect={handleSelect}\n          onClear={handleClear}\n          selections={selected}\n          isOpen={isOpen}\n          aria-labelledby={titleId}\n          placeholderText=\"Select a region\"\n          menuAppendTo=\"parent\"\n          validated={validated}\n          maxHeight=\"25rem\"\n        >\n          {options.map((option, index) => (\n            <SelectOption\n              isDisabled={option.disabled}\n              key={index}\n              value={option.value}\n              {...(option.description && { description: option.description })}\n            />\n          ))}\n        </Select>\n      </FormGroup>\n      <ActionGroup>\n        <Button\n          onClick={handleSubmit}\n          variant=\"primary\"\n          key=\"share\"\n          isDisabled={selected.length === 0 || isSaving}\n          isLoading={isSaving}\n        >\n          Share\n        </Button>\n        <Button variant=\"link\" onClick={handleClose} key=\"cancel\">\n          Cancel\n        </Button>\n      </ActionGroup>\n    </Form>\n  );\n};\n\nRegionsSelect.propTypes = {\n  composeId: PropTypes.string,\n  handleClose: PropTypes.func,\n  handleToggle: PropTypes.func,\n  isOpen: PropTypes.bool,\n  setIsOpen: PropTypes.func,\n};\n\nexport default RegionsSelect;\n","import React, { useState } from 'react';\n\nimport { Modal } from '@patternfly/react-core';\nimport { useLocation, useNavigate } from 'react-router-dom';\n\nimport RegionsSelect from './RegionsSelect';\n\nimport { resolveRelPath } from '../../Utilities/path';\n\nconst ShareToRegionsModal = () => {\n  const navigate = useNavigate();\n  const location = useLocation();\n  const handleClose = () => navigate(resolveRelPath(''));\n  const [isOpen, setIsOpen] = useState(false);\n\n  const composeId = location?.state?.composeId;\n\n  const handleToggle = (isOpen) => setIsOpen(isOpen);\n\n  const handleEscapePress = () => {\n    if (isOpen) {\n      handleToggle(isOpen);\n    } else {\n      handleClose();\n    }\n  };\n\n  return (\n    <Modal\n      isOpen={true}\n      variant=\"small\"\n      aria-label=\"Share to new region\"\n      onClose={handleClose}\n      title=\"Share to new region\"\n      description=\"Configure new regions for this image that will run on your AWS. All the\n        regions will launch with the same configuration.\"\n      onEscapePress={handleEscapePress}\n    >\n      <RegionsSelect\n        composeId={composeId}\n        handleClose={handleClose}\n        handleToggle={handleToggle}\n        isOpen={isOpen}\n        setIsOpen={setIsOpen}\n      />\n    </Modal>\n  );\n};\n\nexport default ShareToRegionsModal;\n","import React, { lazy } from 'react';\n\nimport { Route, Routes } from 'react-router-dom';\n\nimport ShareImageModal from './Components/ShareImageModal/ShareImageModal';\n\nconst LandingPage = lazy(() => import('./Components/LandingPage/LandingPage'));\nconst CreateImageWizard = lazy(() =>\n  import('./Components/CreateImageWizard/CreateImageWizard')\n);\n\nexport const Router = () => {\n  return (\n    <Routes>\n      <Route path=\"*\" element={<LandingPage />}>\n        <Route path=\"imagewizard/*\" element={<CreateImageWizard />} />\n        <Route path=\"share/*\" element={<ShareImageModal />} />\n      </Route>\n    </Routes>\n  );\n};\n","import React, { useEffect } from 'react';\n\nimport NotificationsPortal from '@redhat-cloud-services/frontend-components-notifications/NotificationPortal';\nimport { useStore } from 'react-redux';\nimport { useNavigate } from 'react-router-dom';\nimport '@patternfly/patternfly/patternfly-addons.css';\n\nimport { Router } from './Router';\nimport { resolveRelPath } from './Utilities/path';\n\nconst App = (props) => {\n  const navigate = useNavigate();\n  const store = useStore();\n\n  useEffect(() => {\n    document.title = 'Image Builder | Red Hat Insights';\n    insights.chrome.init();\n    insights.chrome.identifyApp('image-builder');\n    insights.chrome.hideGlobalFilter();\n    const unregister = insights.chrome.on('APP_NAVIGATION', () =>\n      navigate(resolveRelPath(''))\n    );\n    return () => {\n      unregister();\n    };\n  }, []);\n\n  return (\n    <React.Fragment>\n      <NotificationsPortal store={store} />\n      <Router childProps={props} />\n    </React.Fragment>\n  );\n};\n\nexport default App;\n","function getBaseName(pathname) {\n  let release = '/';\n  const pathName = pathname.split('/');\n\n  pathName.shift();\n\n  if (pathName[0] === 'beta') {\n    pathName.shift();\n    release = `/beta/`;\n  }\n\n  return `${release}`;\n}\n\nfunction resolveRelPath(path = '') {\n  return `/insights/image-builder${path.length > 0 ? `/${path}` : ''}`;\n}\n\nexport { getBaseName, resolveRelPath };\n","import axios from 'axios';\n\nimport { CONTENT_SOURCES, IMAGE_BUILDER_API } from './constants';\n\nconst postHeaders = { headers: { 'Content-Type': 'application/json' } };\n\nasync function composeImage(body) {\n  const path = '/compose';\n  const request = await axios.post(\n    IMAGE_BUILDER_API.concat(path),\n    body,\n    postHeaders\n  );\n  return request.data;\n}\n\nasync function getComposes(limit, offset) {\n  const params = new URLSearchParams({\n    limit,\n    offset,\n  });\n  const path = '/composes?' + params.toString();\n  const request = await axios.get(IMAGE_BUILDER_API.concat(path));\n  return request.data;\n}\n\nasync function getComposeStatus(id) {\n  const path = '/composes/' + id;\n  const request = await axios.get(IMAGE_BUILDER_API.concat(path));\n  return request.data;\n}\n\nasync function getPackages(distribution, architecture, search, limit) {\n  const params = new URLSearchParams({\n    distribution,\n    architecture,\n    search,\n  });\n  limit && params.append('limit', limit);\n  const path = '/packages?' + params.toString();\n  const request = await axios.get(IMAGE_BUILDER_API.concat(path));\n  return request.data;\n}\n\nasync function getRepositories(limit) {\n  const params = new URLSearchParams();\n  limit && params.append('limit', limit);\n  const path = '/repositories/' + params.toString();\n  const request = await axios.get(CONTENT_SOURCES.concat(path));\n  return request.data;\n}\n\nasync function getPackagesContentSources(repoUrls, search) {\n  // content-sources expects an array of urls but we store the whole repo object\n  // so map the urls into an array to send to the content-sources api\n  const body = {\n    urls: repoUrls,\n    search,\n  };\n  const path = '/rpms/names';\n  const request = await axios.post(\n    CONTENT_SOURCES.concat(path),\n    body,\n    postHeaders\n  );\n  // map `package_name` key to just `name` since that's what we use across the UI\n  const packages = request.data.map(({ package_name: name, ...rest }) => ({\n    name,\n    ...rest,\n  }));\n  return packages;\n}\n\nasync function getVersion() {\n  const path = '/version';\n  const request = await axios.get(IMAGE_BUILDER_API.concat(path));\n  return request.data;\n}\n\n// get clones of a compose\nasync function getClones(id, limit, offset) {\n  const params = new URLSearchParams({\n    limit,\n    offset,\n  });\n  const path = `/composes/${id}/clones?${params}`;\n  const request = await axios.get(IMAGE_BUILDER_API.concat(path));\n  return request.data;\n}\n\nasync function getCloneStatus(id) {\n  const path = `/clones/${id}`;\n  const request = await axios.get(IMAGE_BUILDER_API.concat(path));\n  return request.data;\n}\n\nasync function cloneImage(composeId, body) {\n  const path = `/composes/${composeId}/clone`;\n  const request = await axios.post(\n    IMAGE_BUILDER_API.concat(path),\n    body,\n    postHeaders\n  );\n  return request.data;\n}\n\nexport default {\n  cloneImage,\n  composeImage,\n  getClones,\n  getCloneStatus,\n  getComposes,\n  getComposeStatus,\n  getPackages,\n  getPackagesContentSources,\n  getRepositories,\n  getVersion,\n};\n","export const IMAGE_BUILDER_API = '/api/image-builder/v1';\nexport const RHSM_API = '/api/rhsm/v2';\nexport const CONTENT_SOURCES = '/api/content-sources/v1';\nexport const PROVISIONING_SOURCES_ENDPOINT = '/api/provisioning/v1/sources';\nexport const RHEL_8 = 'rhel-87';\nexport const RHEL_9 = 'rhel-91';\n\nexport const UNIT_KIB = 1024 ** 1;\nexport const UNIT_MIB = 1024 ** 2;\nexport const UNIT_GIB = 1024 ** 3;\n\nexport const RELEASES = new Map([\n  [RHEL_9, 'Red Hat Enterprise Linux (RHEL) 9'],\n  [RHEL_8, 'Red Hat Enterprise Linux (RHEL) 8'],\n  ['centos-9', 'CentOS Stream 9'],\n  ['centos-8', 'CentOS Stream 8'],\n]);\n\nexport const DEFAULT_AWS_REGION = 'us-east-1';\n\n// https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/using-regions-availability-zones.html\nexport const AWS_REGIONS = [\n  { description: 'US East (Ohio)', value: 'us-east-2' },\n  { description: 'US East (N. Virginia)', value: 'us-east-1' },\n  { description: 'US West (N. California)', value: 'us-west-1' },\n  { description: 'US West (Oregon)', value: 'us-west-2' },\n  { description: 'Africa (Cape Town)', value: 'af-south-1' },\n  { description: 'Asia Pacific (Hong Kong)', value: 'ap-east-1' },\n  { description: 'Asia Pacific (Jakarta)', value: 'ap-southeast-3' },\n  { description: 'Asia Pacific (Mumbai)', value: 'ap-south-1' },\n  { description: 'Asia Pacific (Osaka)', value: 'ap-northeast-3' },\n  { description: 'Asia Pacific (Seoul)', value: 'ap-northeast-2' },\n  { description: 'Asia Pacific (Singapore)', value: 'ap-southeast-1' },\n  { description: 'Asia Pacific (Sydney)', value: 'ap-southeast-2' },\n  { description: 'Asia Pacific (Tokyo)', value: 'ap-northeast-1' },\n  { description: 'Canada (Central)', value: 'ca-central-1' },\n  { description: 'Europe (Frankfurt)', value: 'eu-central-1' },\n  { description: 'Europe (Ireland)', value: 'eu-west-1' },\n  { description: 'Europe (London)', value: 'eu-west-2' },\n  { description: 'Europe (Milan)', value: 'eu-south-1' },\n  { description: 'Europe (Paris)', value: 'eu-west-3' },\n  { description: 'Europe (Stockholm)', value: 'eu-north-1' },\n  { description: 'Middle East (Bahrain)', value: 'me-south-1' },\n  { description: 'Middle East (UAE)', value: 'me-central-1' },\n  { description: 'South America (S\\u00e3o Paolo)', value: 'sa-east-1' },\n];\n\nexport const AWS_S3_EXPIRATION_TIME_IN_HOURS = 6;\n","import { createApi, fetchBaseQuery } from '@reduxjs/toolkit/query/react';\n\nimport {\n  IMAGE_BUILDER_API,\n  PROVISIONING_SOURCES_ENDPOINT,\n  RHSM_API,\n} from '../constants';\n\nexport const apiSlice = createApi({\n  reducerPath: 'api',\n  baseQuery: fetchBaseQuery({ baseUrl: '' }),\n  endpoints: (builder) => ({\n    getAWSSources: builder.query({\n      async queryFn(_arg, _queryApi, _extraOptions, fetchWithBQ) {\n        // The provisioning sources endpoint response does not include the account ids\n        // associated with the sources. For each source, another API request must be\n        // made to get the account id. This custom queryFn combines all of these API\n        // requests so that the React components can call simply call a single hook,\n        // useGetAWSSourcesQuery().\n\n        const awsSources = await fetchWithBQ(\n          `${PROVISIONING_SOURCES_ENDPOINT}?provider=aws`\n        );\n\n        if (awsSources.error) return { error: awsSources.error };\n\n        const awsAccountIds = await Promise.allSettled(\n          awsSources.data.map((source) =>\n            fetchWithBQ(\n              `${PROVISIONING_SOURCES_ENDPOINT}/${source.id}/account_identity`\n            )\n          )\n        );\n\n        // Merge the account ids into awsSources\n        for (let i = 0; i < awsSources.data.length; i++) {\n          if (awsAccountIds[i].value.error) {\n            awsSources.data[i].account_id = '';\n          } else {\n            awsSources.data[i].account_id =\n              awsAccountIds[i].value.data.aws.account_id;\n          }\n        }\n\n        return awsSources;\n      },\n    }),\n    getAzureSources: builder.query({\n      query: () => `${PROVISIONING_SOURCES_ENDPOINT}?provider=azure`,\n    }),\n    getAzureSourceDetail: builder.query({\n      query: (sourceId) =>\n        `${PROVISIONING_SOURCES_ENDPOINT}/${sourceId}/upload_info`,\n      transformResponse: (response) => response.azure,\n    }),\n    getArchitecturesByDistribution: builder.query({\n      query: (distribution) =>\n        `${IMAGE_BUILDER_API}/architectures/${distribution}`,\n    }),\n    getActivationKeys: builder.query({\n      query: () => `${RHSM_API}/activation_keys`,\n    }),\n    getActivationKeyInformation: builder.query({\n      query: (activationKey) => `${RHSM_API}/activation_keys/${activationKey}`,\n    }),\n  }),\n});\n\nexport const {\n  useGetAWSSourcesQuery,\n  useGetArchitecturesByDistributionQuery,\n  useGetAzureSourcesQuery,\n  useGetAzureSourceDetailQuery,\n  useGetActivationKeysQuery,\n  useGetActivationKeyInformationQuery,\n  usePrefetch,\n} = apiSlice;\n","import { createSlice } from '@reduxjs/toolkit';\n\nconst initialState = {\n  allIds: [],\n  byId: {},\n  error: null,\n};\n\nexport const clonesSlice = createSlice({\n  name: 'clones',\n  initialState,\n  reducers: {\n    cloneAdded: (state, action) => {\n      if (!state.allIds.includes(action.payload.clone.id)) {\n        state.allIds.push(action.payload.clone.id);\n      }\n      state.byId[action.payload.clone.id] = { ...action.payload.clone };\n      state.byId[action.payload.clone.id].parent = action.payload.parent;\n      state.error = null;\n    },\n    cloneUpdatedStatus: (state, action) => {\n      const image_status = {\n        status: action.payload.status.status,\n        upload_status: action.payload.status,\n      };\n      state.byId[action.payload.id].image_status = image_status;\n    },\n  },\n});\n\nexport const selectCloneById = (state, cloneId) => {\n  const clone = state.clones.byId[cloneId];\n\n  if (clone !== undefined) {\n    return {\n      created_at: clone.created_at,\n      id: clone.id,\n      region: clone.request.region,\n      ami: clone.image_status?.upload_status?.options?.ami,\n      share_with_accounts: clone.request.share_with_accounts,\n      share_with_sources: clone.request.share_with_sources,\n      status: clone.image_status?.status,\n      uploadStatus: clone.image_status?.upload_status,\n      parent: clone.parent,\n      imageType: 'aws',\n      isClone: true,\n    };\n  } else {\n    return null;\n  }\n};\n\nexport const { cloneAdded, cloneUpdatedStatus } = clonesSlice.actions;\nexport default clonesSlice.reducer;\n","import { createSelector, createSlice } from '@reduxjs/toolkit';\n\nimport { selectCloneById } from './clonesSlice';\n\nconst initialState = {\n  count: 0,\n  allIds: [],\n  byId: {},\n  error: null,\n};\n\nconst composesSlice = createSlice({\n  name: 'composes',\n  initialState,\n  reducers: {\n    composeAdded: (state, action) => {\n      // only add to array if compose does not exist\n      if (!state.allIds.includes(action.payload.compose.id)) {\n        if (action.payload.insert) {\n          state.allIds.unshift(action.payload.compose.id);\n        } else {\n          state.allIds.push(action.payload.compose.id);\n        }\n      }\n      state.byId[action.payload.compose.id] = action.payload.compose;\n\n      // initialize empty clones array\n      if (!state.byId[action.payload.compose.id].clones) {\n        state.byId[action.payload.compose.id].clones = [];\n      }\n\n      state.error = null;\n    },\n    composesUpdatedCount: (state, action) => {\n      state.count = action.payload.count;\n    },\n    composeUpdatedStatus: (state, action) => {\n      state.byId[action.payload.id].image_status = action.payload.status;\n    },\n  },\n  extraReducers: (builder) => {\n    builder.addCase('clones/cloneAdded', (state, action) => {\n      state.byId[action.payload.parent].clones.push(action.payload.clone.id);\n    });\n  },\n});\n\nexport const selectComposeById = (state, composeId) => {\n  const compose = state.composes.byId[composeId];\n\n  if (compose !== undefined) {\n    return {\n      created_at: compose.created_at,\n      id: compose.id,\n      imageName: compose.image_name || compose.id,\n      region: compose.image_status?.upload_status?.options?.region,\n      ami: compose.image_status?.upload_status?.options?.ami,\n      share_with_accounts:\n        compose.request.image_requests[0].upload_request?.options\n          .share_with_accounts,\n      share_with_sources:\n        compose.request.image_requests[0].upload_request?.options\n          .share_with_sources,\n      status: compose.image_status?.status,\n      clones: [...compose.clones],\n      imageType: compose.request.image_requests[0].image_type,\n      uploadType: compose.request.image_requests[0].upload_request.type,\n      uploadOptions: compose.request.image_requests[0].upload_request.options,\n      uploadStatus: compose.image_status?.upload_status,\n      request: compose.request,\n      architecture: compose.request.image_requests[0].architecture,\n      isClone: false,\n    };\n  } else {\n    return null;\n  }\n};\n\nexport const selectClonesById = (state, composeId) => {\n  const compose = state.composes.byId[composeId];\n\n  if (compose.clones.length !== 0) {\n    const clones = compose.clones.map((cloneId) => {\n      const clone = state.clones.byId[cloneId];\n      return {\n        created_at: clone.created_at,\n        id: clone.id,\n        region: clone.request.region,\n        ami: clone.image_status?.upload_status?.options?.ami,\n        share_with_accounts: clone.request.share_with_accounts,\n        share_with_sources: clone.request.share_with_sources,\n        status: clone.image_status?.status,\n      };\n    });\n    return clones;\n  }\n\n  return [];\n};\n\nexport const selectImageById = (state, imageId) => {\n  const image = state.composes.allIds.includes(imageId)\n    ? selectComposeById(state, imageId)\n    : selectCloneById(state, imageId);\n\n  return image;\n};\n\nexport const selectImagesById = createSelector(\n  [selectComposeById, selectClonesById],\n  (compose, clones) => [compose, ...clones]\n);\n\nexport const selectImageStatusesById = createSelector(\n  [selectImagesById],\n  (images) => {\n    return images.map((image) => image.status);\n  }\n);\n\nexport const { composeAdded, composesUpdatedCount, composeUpdatedStatus } =\n  composesSlice.actions;\nexport default composesSlice.reducer;\n","import { notificationsReducer } from '@redhat-cloud-services/frontend-components-notifications/redux';\nimport { configureStore } from '@reduxjs/toolkit';\nimport promiseMiddleware from 'redux-promise-middleware';\n\nimport { apiSlice } from './apiSlice';\nimport clonesSlice from './clonesSlice';\nimport composesSlice from './composesSlice';\nimport repositoriesSlice from './repositoriesSlice';\n\nexport const reducer = {\n  [apiSlice.reducerPath]: apiSlice.reducer,\n  clones: clonesSlice,\n  composes: composesSlice,\n  notifications: notificationsReducer,\n  repositories: repositoriesSlice,\n};\n\nexport const middleware = (getDefaultMiddleware) =>\n  getDefaultMiddleware().concat(promiseMiddleware).concat(apiSlice.middleware);\n\nexport const store = configureStore({ reducer, middleware });\n","import { createSlice } from '@reduxjs/toolkit';\n\nimport api from '../api';\n\nconst initialState = {\n  count: 0,\n  allIds: [],\n  byId: {},\n  error: null,\n};\n\nexport const fetchRepositories = () => async (dispatch) => {\n  const response = await api.getRepositories();\n  let { data } = response;\n  const { meta } = response;\n  if (data.length < meta.count) {\n    ({ data } = await api.getRepositories(meta.count));\n  }\n  dispatch(repositoriesAdded({ repositories: data }));\n  dispatch(repositoriesUpdatedCount({ count: data.length }));\n};\n\nexport const repositoriesSlice = createSlice({\n  name: 'repositories',\n  initialState,\n  reducers: {\n    repositoriesAdded: (state, action) => {\n      action.payload.repositories.map((repo) => {\n        // The repo url is used as the id\n        if (!state.allIds.includes(repo.url)) {\n          state.allIds.push(repo.url);\n        }\n        state.byId[repo.url] = repo;\n      });\n    },\n    repositoriesUpdatedCount: (state, action) => {\n      state.count = action.payload.count;\n    },\n  },\n});\n\nexport const selectRepositoryById = (state, repoId) =>\n  state.repositories.byId[repoId];\n\nexport const selectValidRepositoryIds = (state) => {\n  const validRepositoryIds = [];\n  for (const repoId of state.repositories.allIds) {\n    if (state.repositories.byId[repoId].status === 'Valid') {\n      validRepositoryIds.push(repoId);\n    }\n  }\n  return validRepositoryIds;\n};\n\nexport const selectValidRepositories = (state) => {\n  const validRepositories = {};\n  for (const repoId of state.repositories.allIds) {\n    if (state.repositories.byId[repoId].status === 'Valid') {\n      validRepositories[repoId] = state.repositories.byId[repoId];\n    }\n  }\n  return validRepositories;\n};\n\nexport const { repositoriesAdded, repositoriesUpdatedCount } =\n  repositoriesSlice.actions;\nexport default repositoriesSlice.reducer;\n"],"names":["selectRegionsToDisable","createSelector","selectComposeById","selectClonesById","compose","clones","regions","Set","add","region","map","clone","_clone$share_with_acc","_compose$share_with_a","_clone$share_with_sou","_compose$share_with_s","share_with_accounts","share_with_sources","status","RegionsSelect","_ref","composeId","handleClose","handleToggle","isOpen","setIsOpen","dispatch","useDispatch","navigate","useNavigate","_useState","useState","_useState2","_slicedToArray","isSaving","setIsSaving","_useState3","_useState4","selected","setSelected","titleId","_useState5","_useState6","validated","setValidated","_useState7","helperTextInvalid","useSelector","state","regionsToDisable","_useState9","AWS_REGIONS","_objectSpread","disabled","has","value","prepareRegions","options","React","Form","id","hidden","FormGroup","label","isRequired","helperTextInvalidIcon","ExclamationCircleIcon","labelIcon","Popover","headerContent","bodyContent","type","onClick","e","preventDefault","className","HelpIcon","noVerticalAlign","Select","variant","SelectVariant","typeAheadAriaLabel","onToggle","onSelect","event","selection","nextSelected","includes","filter","concat","_toConsumableArray","length","onClear","selections","placeholderText","menuAppendTo","maxHeight","option","index","SelectOption","_extends","isDisabled","key","description","ActionGroup","Button","requests","_compose$share_with_s2","request","Promise","all","api","then","response","cloneAdded","image_status","parent","resolveRelPath","addNotification","title","err","statusText","isLoading","propTypes","PropTypes","_location$state","location","useLocation","Modal","onClose","onEscapePress","LandingPage","lazy","CreateImageWizard","Router","Routes","Route","path","element","ShareImageModal","props","store","useStore","useEffect","document","insights","chrome","init","identifyApp","hideGlobalFilter","unregister","on","NotificationsPortal","childProps","arguments","undefined","postHeaders","headers","_composeImage","_asyncToGenerator","_regeneratorRuntime","_callee","body","_context","prev","next","axios","IMAGE_BUILDER_API","sent","abrupt","data","stop","apply","_getComposes","_callee2","limit","offset","params","_context2","URLSearchParams","toString","_getComposeStatus","_callee3","_context3","_getPackages","_callee4","distribution","architecture","search","_context4","append","_getRepositories","_callee5","_context5","CONTENT_SOURCES","_getPackagesContentSources","_callee6","repoUrls","packages","_context6","urls","name","package_name","_objectWithoutProperties","_excluded","_getVersion","_callee7","_context7","_getClones","_callee8","_context8","_getCloneStatus","_callee9","_context9","_cloneImage","_callee10","_context10","cloneImage","_x16","_x17","composeImage","_x","getClones","_x12","_x13","_x14","getCloneStatus","_x15","getComposes","_x2","_x3","getComposeStatus","_x4","getPackages","_x5","_x6","_x7","_x8","getPackagesContentSources","_x10","_x11","getRepositories","_x9","getVersion","RHSM_API","PROVISIONING_SOURCES_ENDPOINT","RHEL_8","RHEL_9","UNIT_KIB","Math","pow","UNIT_MIB","UNIT_GIB","RELEASES","Map","DEFAULT_AWS_REGION","AWS_S3_EXPIRATION_TIME_IN_HOURS","apiSlice","createApi","reducerPath","baseQuery","fetchBaseQuery","baseUrl","endpoints","builder","getAWSSources","query","queryFn","_arg","_queryApi","_extraOptions","fetchWithBQ","awsSources","awsAccountIds","i","error","allSettled","source","account_id","aws","getAzureSources","getAzureSourceDetail","sourceId","transformResponse","azure","getArchitecturesByDistribution","getActivationKeys","getActivationKeyInformation","activationKey","useGetAWSSourcesQuery","useGetArchitecturesByDistributionQuery","useGetAzureSourcesQuery","useGetAzureSourceDetailQuery","useGetActivationKeysQuery","useGetActivationKeyInformationQuery","usePrefetch","clonesSlice","createSlice","initialState","allIds","byId","reducers","action","payload","push","cloneUpdatedStatus","upload_status","selectCloneById","cloneId","_clone$image_status","_clone$image_status$u","_clone$image_status$u2","_clone$image_status2","_clone$image_status3","created_at","ami","uploadStatus","imageType","isClone","_clonesSlice$actions","actions","composesSlice","count","composeAdded","insert","unshift","composesUpdatedCount","composeUpdatedStatus","extraReducers","addCase","_compose$image_status","_compose$image_status2","_compose$image_status3","_compose$image_status4","_compose$image_status5","_compose$image_status6","_compose$request$imag","_compose$request$imag2","_compose$image_status7","_compose$image_status8","composes","imageName","image_name","image_requests","upload_request","image_type","uploadType","uploadOptions","selectImageById","imageId","selectImagesById","selectImageStatusesById","images","image","_composesSlice$action","reducer","_reducer","_defineProperty","notificationsReducer","repositoriesSlice","configureStore","middleware","getDefaultMiddleware","promiseMiddleware","fetchRepositories","meta","_yield$api$getReposit","repositoriesAdded","repositories","repositoriesUpdatedCount","repo","url","selectValidRepositories","_step2","validRepositories","_iterator2","_createForOfIteratorHelper","s","n","done","repoId","f","_repositoriesSlice$ac"],"sourceRoot":""}