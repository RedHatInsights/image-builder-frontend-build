{"version":3,"sources":["webpack:///./src/SmartComponents/CreateImageWizard/CreateImageWizard.js"],"names":["ReleaseComponent","props","isHorizontal","label","fieldId","value","onChange","setRelease","aria-label","id","data-testid","map","option","key","propTypes","PropTypes","func","string","AmazonUploadComponent","isRequired","helperTextInvalid","errors","validated","upload","options","access_key_id","type","setUploadOptions","Object","assign","secret_access_key","service","region","bucket","object","UploadComponent","setUpload","SubscriptionComponent","name","isChecked","subscribeNow","setSubscribeNow","isDisabled","subscription","organization","setSubscription","bool","ReviewComponent","keys","uploadErrors","length","subscriptionErrors","variant","isInline","title","flex","default","release","entries","error","className","CreateImageWizard","bind","onStep","onSave","onClose","validate","validateUploadAmazon","validateSubscription","state","insights","chrome","auth","getUser","user","this","setState","Number","identity","internal","org_id","step","uploadOptions","oldState","request","distribution","image_requests","architecture","image_type","upload_requests","s3","ec2","customizations","updateCompose","api","composeImage","then","response","compose","status","history","push","steps","component","nextButtonText","onNext","onGoToStep","isInPage","Component","connect","dispatch","actions","withRouter"],"mappings":"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","file":"js/4.js","sourcesContent":["import PropTypes from 'prop-types';\nimport React, { Component } from 'react';\nimport { withRouter } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport { actions } from '../redux';\nimport { PageHeader, PageHeaderTitle } from '@redhat-cloud-services/frontend-components';\n\nimport {\n    Alert,\n    Flex,\n    FlexItem,\n    Form,\n    FormGroup,\n    FormSelect,\n    FormSelectOption,\n    Radio,\n    TextContent,\n    TextInput,\n    Wizard,\n} from '@patternfly/react-core';\n\nimport { ExclamationCircleIcon } from '@patternfly/react-icons';\n\nimport api from './../../api.js';\n\nconst ReleaseComponent = (props) => {\n    const options = [\n        { value: 'rhel-8', label: 'Red Hat Enterprise Linux (RHEL) 8.2' },\n    ];\n    return (\n        <Form isHorizontal>\n            <FormGroup label=\"Release\" fieldId=\"release-select\">\n                <FormSelect value={ props.value } onChange={ value => props.setRelease(value) }\n                    aria-label=\"Select release input\" id=\"release-select\" data-testid=\"release-select\">\n                    { options.map(option => <FormSelectOption key={ option.value } value={ option.value } label={ option.label } />) }\n                </FormSelect>\n            </FormGroup>\n        </Form>\n    );\n};\n\nReleaseComponent.propTypes = {\n    setRelease: PropTypes.func,\n    value: PropTypes.string,\n};\n\nconst AmazonUploadComponent = (props) => {\n    const serviceOptions = [\n        { value: 'ec2', label: 'Amazon Elastic Compute Cloud (ec2)' },\n        { value: 's3', label: 'Amazon Simple Storage Service (s3)' },\n    ];\n\n    return (\n        <>\n            <FormGroup isRequired label=\"Access key ID\" fieldId=\"amazon-access-id\"\n                helperTextInvalid={ (props.errors['amazon-access-id'] && props.errors['amazon-access-id'].value) || '' }\n                validated={ (props.errors['amazon-access-id'] && 'error') || 'default' }>\n                <TextInput value={ props.upload.options.access_key_id || '' }\n                    type=\"text\" aria-label=\"amazon access key ID\" id=\"amazon-access-id\"\n                    data-testid=\"aws-access-key\" isRequired\n                    onChange={ value => props.setUploadOptions(Object.assign(props.upload.options, { access_key_id: value })) } />\n            </FormGroup>\n            <FormGroup isRequired label=\"Secret access key\" fieldId=\"amazon-access-secret\"\n                helperTextInvalid={ (props.errors['amazon-access-secret'] && props.errors['amazon-access-secret'].value)  || '' }\n                validated={ (props.errors['amazon-access-secret'] && 'error') || 'default' }>\n                <TextInput value={ props.upload.options.secret_access_key || '' }\n                    data-testid=\"aws-secret-access-key\" isRequired\n                    type=\"password\" aria-label=\"amazon secret access key\" id=\"amazon-access-secret\"\n                    onChange={ value => props.setUploadOptions(Object.assign(props.upload.options, { secret_access_key: value })) } />\n            </FormGroup>\n            <FormGroup isRequired label=\"Service\" fieldId=\"amazon-service\">\n                <FormSelect value={ props.upload.options.service } aria-label=\"Select amazon service\" id=\"amazon-service\"\n                    data-testid=\"aws-service-select\"\n                    onChange={ value => props.setUploadOptions(Object.assign(props.upload.options, { service: value })) }>\n                    { serviceOptions.map(option => <FormSelectOption key={ option.value } value={ option.value } label={ option.label } />) }\n                </FormSelect>\n            </FormGroup>\n            <FormGroup isRequired label=\"Region\" fieldId=\"amazon-region\"\n                helperTextInvalid={ (props.errors['amazon-region'] && props.errors['amazon-region'].value) || '' }\n                validated={ (props.errors['amazon-region'] && 'error') || 'default' }>\n                <TextInput value={ props.upload.options.region } type=\"text\" aria-label=\"amazon region\" id=\"amazon-region\"\n                    data-testid=\"aws-region\" isRequired\n                    onChange={ value => props.setUploadOptions(Object.assign(props.upload.options, { region: value })) } />\n            </FormGroup>\n            { props.upload.options.service === 's3' &&\n              <FormGroup isRequired label=\"Bucket\" fieldId=\"amazon-bucket\"\n                  helperTextInvalid={ (props.errors['amazon-bucket'] && props.errors['amazon-bucket'].value) || '' }\n                  validated={ (props.errors['amazon-bucket'] && 'error') || 'default' }>\n                  <TextInput value={ props.upload.options.bucket || '' } type=\"text\" aria-label=\"amazon bucket\" id=\"amazon-bucket\"\n                      data-testid=\"aws-bucket\" isRequired\n                      onChange={ value => props.setUploadOptions(Object.assign(props.upload.options, { bucket: value })) } />\n              </FormGroup> }\n        </>\n    );\n};\n\nAmazonUploadComponent.propTypes = {\n    setUploadOptions: PropTypes.func,\n    upload: PropTypes.object,\n    errors: PropTypes.object,\n};\n\nconst UploadComponent = (props) => {\n    const uploadTypes = [\n        { value: 'aws', label: 'Amazon Machine Image (.raw)' },\n    ];\n\n    return (\n        <>\n            <Form isHorizontal>\n                <FormGroup isRequired label=\"Destination\" fieldId=\"upload-destination\">\n                    <FormSelect value={ props.upload.type || '' } id=\"upload-destination\"\n                        data-testid=\"upload-destination\" isRequired\n                        onChange={ value => props.setUpload({ type: value, options: props.upload.options }) } aria-label=\"Select upload destination\">\n                        { uploadTypes.map(type => <FormSelectOption key={ type.value } value={ type.value } label={ type.label } />) }\n                    </FormSelect>\n                </FormGroup>\n                { props.upload.type === 'aws' &&\n                  <AmazonUploadComponent upload={ props.upload } setUploadOptions={ props.setUploadOptions } errors={ props.errors } /> }\n            </Form>\n        </>\n    );\n};\n\nUploadComponent.propTypes = {\n    setUpload: PropTypes.func,\n    setUploadOptions: PropTypes.func,\n    upload: PropTypes.object,\n    errors: PropTypes.object,\n};\n\nconst SubscriptionComponent = (props) => {\n    return (\n        <Form>\n            <FormGroup isRequired label=\"Register the system\" fieldId=\"subscribe-radio\">\n                <Radio name=\"subscribe-radio\" isChecked={ props.subscribeNow } id=\"subscribe-radio\"\n                    label=\"Embed an activation key and register systems on first boot\"\n                    onChange={ () => props.setSubscribeNow(true) }\n                    data-testid=\"register-now-radio-button\" />\n                <Radio name=\"subscribe-radio\" isChecked={ !props.subscribeNow }\n                    label=\"Register the system later\" id=\"subscribe-radio\"\n                    onChange={ () => props.setSubscribeNow(false) }\n                    data-testid=\"register-later-radio-button\" />\n            </FormGroup>\n            { props.subscribeNow &&\n              <>\n                  <FormGroup label=\"Organization ID\" fieldId=\"subscription-organization\">\n                      <TextInput isDisabled value={ props.subscription.organization || '' } type=\"text\"\n                          id=\"subscription-organization\" aria-label=\"Subscription organization ID\"\n                          data-testid=\"organization-id\" />\n                  </FormGroup>\n                  <FormGroup isRequired label=\"Activation key\" fieldId=\"subscription-activation\"\n                      helperTextInvalid={ (props.errors['subscription-activation'] && props.errors['subscription-activation'].value) || '' }\n                      validated={ (props.errors['subscription-activation'] && 'error') || 'default' }>\n                      <TextInput value={ props.subscription['activation-key'] || '' } type=\"password\"\n                          data-testid=\"subscription-activation\" isRequired\n                          id=\"subscription-activation\" aria-label=\"Subscription activation key\"\n                          onChange={ value => props.setSubscription(Object.assign(props.subscription, { 'activation-key': value })) } />\n                  </FormGroup>\n              </> }\n        </Form>\n    );\n};\n\nSubscriptionComponent.propTypes = {\n    setSubscription: PropTypes.func,\n    setSubscribeNow: PropTypes.func,\n    subscription: PropTypes.object,\n    subscribeNow: PropTypes.bool,\n    errors: PropTypes.object,\n};\n\nconst ReviewComponent = (props) => {\n    return (\n        <>\n            { (Object.keys(props.uploadErrors).length > 0 ||\n               Object.keys(props.subscriptionErrors).length > 0) &&\n              <Alert variant=\"danger\" isInline title=\"Required information is missing\" /> }\n            <TextContent>\n                <h2>Create image</h2>\n                <small>\n                    Review the information and click Create image\n                    to create the image using the following criteria.\n                </small>\n                <h3>Release</h3>\n                <Flex>\n                    <FlexItem flex={ { default: 'flex_1' } }>\n                        Release\n                    </FlexItem>\n                    <FlexItem flex={ { default: 'flex_2' } }>\n                        { props.release }\n                    </FlexItem>\n                </Flex>\n                <h3>Image output</h3>\n                <Flex>\n                    <FlexItem flex={ { default: 'flex_1' } }>\n                        Destination\n                    </FlexItem>\n                    <FlexItem flex={ { default: 'flex_2' } }>\n                        { props.upload && <>{ props.upload.type }</> }\n                    </FlexItem>\n                </Flex>\n                { Object.entries(props.uploadErrors).map(([ key, error ]) => {\n                    return (<Flex key={ key }>\n                        <FlexItem flex={ { default: 'flex_1' } }>\n                            { error.label }\n                        </FlexItem>\n                        <FlexItem flex={ { default: 'flex_2' } }>\n                            <ExclamationCircleIcon className=\"error\" /> { error.value }\n                        </FlexItem>\n                    </Flex>);\n                })}\n                <h3>Registration</h3>\n                <Flex>\n                    <FlexItem flex={ { default: 'flex_1' } }>\n                        Subscription\n                    </FlexItem>\n                    { !props.subscribeNow &&\n                      <FlexItem flex={ { default: 'flex_2' } }>\n                          Register the system later\n                      </FlexItem> }\n                    { props.subscribeNow &&\n                      <FlexItem flex={ { default: 'flex_2' } }>\n                          Register the system on first boot\n                      </FlexItem> }\n                </Flex>\n                { Object.entries(props.subscriptionErrors).map(([ key, error ]) => {\n                    return (<Flex key={ key }>\n                        <FlexItem flex={ { default: 'flex_1' } }>\n                            { error.label }\n                        </FlexItem>\n                        <FlexItem flex={ { default: 'flex_2' } }>\n                            <ExclamationCircleIcon className=\"error\" /> { error.value }\n                        </FlexItem>\n                    </Flex>);\n                })}\n            </TextContent>\n        </>\n    );\n};\n\nReviewComponent.propTypes = {\n    release: PropTypes.string,\n    upload: PropTypes.object,\n    subscription: PropTypes.object,\n    subscribeNow: PropTypes.bool,\n    uploadErrors: PropTypes.object,\n    subscriptionErrors: PropTypes.object,\n};\n\nclass CreateImageWizard extends Component {\n    constructor(props) {\n        super(props);\n\n        this.setRelease = this.setRelease.bind(this);\n        this.setUpload = this.setUpload.bind(this);\n        this.setUploadOptions = this.setUploadOptions.bind(this);\n        this.setSubscription = this.setSubscription.bind(this);\n        this.setSubscribeNow = this.setSubscribeNow.bind(this);\n        this.onStep = this.onStep.bind(this);\n        this.onSave = this.onSave.bind(this);\n        this.onClose = this.onClose.bind(this);\n        this.validate = this.validate.bind(this);\n        this.validateUploadAmazon = this.validateUploadAmazon.bind(this);\n        this.validateSubscription = this.validateSubscription.bind(this);\n\n        this.state = {\n            release: 'rhel-8',\n            upload: {\n                type: 'aws',\n                options: {\n                    service: 'ec2',\n                    region: 'eu-west-2',\n                    access_key_id: null,\n                    secret_access_key: null,\n                    bucket: null,\n                }\n            },\n            subscription: {\n                organization: null,\n                'activation-key': null,\n                'server-url': 'subscription.rhsm.redhat.com',\n                'base-url': 'https://cdn.redhat.com/',\n                insights: true\n            },\n            subscribeNow: false,\n            /* errors take form of $fieldId: error */\n            uploadErrors: {},\n            subscriptionErrors: {},\n        };\n    }\n\n    async componentDidMount() {\n        let user = await insights.chrome.auth.getUser();\n        this.setState({\n            subscription: {\n                organization: Number(user.identity.internal.org_id)\n            }\n        });\n    }\n\n    onStep(step) {\n        if (step.name === 'Review') {\n            this.validate();\n        }\n    }\n\n    validate() {\n        /* upload */\n        if (this.state.upload.type === 'aws') {\n            this.validateUploadAmazon();\n        } else {\n            this.setState({ uploadErrors: {}});\n        }\n\n        /* subscription */\n        if (this.state.subscribeNow) {\n            this.validateSubscription();\n        } else {\n            this.setState({ subscriptionErrors: {}});\n        }\n    }\n\n    validateUploadAmazon() {\n        let uploadErrors = {};\n        if (!this.state.upload.options.access_key_id) {\n            uploadErrors['amazon-access-id'] =\n                { label: 'Access key ID', value: 'A value is required' };\n        }\n\n        if (!this.state.upload.options.secret_access_key) {\n            uploadErrors['amazon-access-secret'] =\n                { label: 'Secret access key', value: 'A value is required' };\n        }\n\n        if (!this.state.upload.options.region) {\n            uploadErrors['amazon-region'] =\n                { label: 'Region', value: 'A value is required' };\n        }\n\n        if (this.state.upload.options.service === 's3' &&\n            !this.state.upload.options.bucket) {\n            uploadErrors['amazon-bucket'] =\n                { label: 'Bucket', value: 'A value is required' };\n        }\n\n        this.setState({ uploadErrors });\n    }\n\n    validateSubscription() {\n        let subscriptionErrors = {};\n        if (!this.state.subscription['activation-key']) {\n            subscriptionErrors['subscription-activation'] =\n                { label: 'Activation key', value: 'A value is required' };\n        }\n\n        this.setState({ subscriptionErrors });\n    }\n\n    setRelease(release) {\n        this.setState({ release });\n    }\n\n    setUpload(upload) {\n        this.setState({ upload });\n    }\n\n    setUploadOptions(uploadOptions) {\n        this.setState(oldState => {\n            return {\n                upload: {\n                    type: oldState.upload.type,\n                    options: uploadOptions\n                }\n            };\n        });\n    }\n\n    setSubscribeNow(subscribeNow) {\n        this.setState({ subscribeNow });\n    }\n\n    setSubscription(subscription) {\n        this.setState({ subscription }, this.validate);\n    }\n\n    onSave () {\n        let request = {\n            distribution: this.state.release,\n            image_requests: [\n                {\n                    architecture: 'x86_64',\n                    image_type: 'qcow2',\n                    upload_requests: [{\n                        type: 'aws',\n                        options: {\n                            region: this.state.upload.options.region,\n                            s3: {\n                                access_key_id: this.state.upload.options.access_key_id,\n                                secret_access_key: this.state.upload.options.secret_access_key,\n                                bucket: this.state.upload.options.bucket,\n                            },\n                            ec2: {\n                                access_key_id: this.state.upload.options.access_key_id,\n                                secret_access_key: this.state.upload.options.secret_access_key,\n                            },\n                        },\n                    }],\n                }],\n            customizations: {\n                subscription: this.state.subscription,\n            },\n        };\n\n        let { updateCompose } = this.props;\n        api.composeImage(request).then(response => {\n            let compose = {};\n            compose[response.id] = {\n                status: 'request sent',\n                distribution: request.distribution,\n                architecture: request.image_requests[0].architecture,\n                image_type: request.image_requests[0].image_type,\n            };\n            updateCompose(compose);\n            this.props.history.push('/landing');\n        });\n    }\n\n    onClose () {\n        this.props.history.push('/landing');\n    }\n\n    render() {\n        const steps = [\n            {\n                name: 'Release',\n                component: <ReleaseComponent\n                    value={ this.state.release }\n                    setRelease={ this.setRelease } /> },\n            {\n                name: 'Target environment',\n                component: <UploadComponent\n                    upload={ this.state.upload }\n                    setUpload={ this.setUpload }\n                    setUploadOptions={ this.setUploadOptions }\n                    errors={ this.state.uploadErrors } /> },\n            {\n                name: 'Registration',\n                component: <SubscriptionComponent\n                    subscription={ this.state.subscription }\n                    subscribeNow={ this.state.subscribeNow }\n                    setSubscription={ this.setSubscription }\n                    setSubscribeNow={ this.setSubscribeNow }\n                    errors={ this.state.subscriptionErrors } /> },\n            {\n                name: 'Review',\n                component: <ReviewComponent\n                    release={ this.state.release }\n                    upload={ this.state.upload }\n                    subscription={ this.state.subscription }\n                    subscribeNow={ this.state.subscribeNow }\n                    uploadErrors={ this.state.uploadErrors }\n                    subscriptionErrors={ this.state.subscriptionErrors } />,\n                nextButtonText: 'Create',\n            }\n        ];\n\n        return (\n            <>\n                <PageHeader>\n                    <PageHeaderTitle title='Create a new image' />\n                </PageHeader>\n                <Wizard\n                    onNext={ this.onStep }\n                    onGoToStep={ this.onStep }\n                    isInPage\n                    steps={ steps }\n                    onClose={ this.onClose }\n                    onSave={ this.onSave } />\n            </>\n        );\n    }\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        updateCompose: (compose) => dispatch(actions.updateCompose(compose)),\n    };\n}\n\nCreateImageWizard.propTypes = {\n    updateCompose: PropTypes.func,\n    history: PropTypes.object,\n};\n\nexport default connect(null, mapDispatchToProps)(withRouter(CreateImageWizard));\n"],"sourceRoot":""}