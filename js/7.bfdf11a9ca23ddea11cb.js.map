{"version":3,"sources":["webpack:///./src/PresentationalComponents/CreateImageWizard/WizardStepImageOutput.scss","webpack:///./src/PresentationalComponents/CreateImageWizard/WizardStepReview.scss","webpack:///./src/SmartComponents/CreateImageWizard/CreateImageWizard.scss","webpack:///./src/PresentationalComponents/CreateImageWizard/WizardStepImageOutput.scss?1601","webpack:///./src/PresentationalComponents/CreateImageWizard/WizardStepReview.scss?a1e2","webpack:///./src/SmartComponents/CreateImageWizard/CreateImageWizard.scss?837f","webpack:///./src/PresentationalComponents/CreateImageWizard/WizardStepImageOutput.js","webpack:///./src/PresentationalComponents/CreateImageWizard/WizardStepUploadAWS.js","webpack:///./src/PresentationalComponents/CreateImageWizard/WizardStepPackages.js","webpack:///./src/PresentationalComponents/CreateImageWizard/WizardStepUploadGoogle.js","webpack:///./src/PresentationalComponents/CreateImageWizard/WizardStepRegistration.js","webpack:///./src/PresentationalComponents/CreateImageWizard/WizardStepReview.js","webpack:///./src/SmartComponents/CreateImageWizard/CreateImageWizard.js"],"names":["exports","___CSS_LOADER_API_IMPORT___","push","module","i","content","options","transform","undefined","update","locals","hot","accept","newContent","a","b","key","idx","Error","dispose","WizardStepImageOutput","props","Form","Title","headingLevel","size","FormGroup","isRequired","label","fieldId","FormSelect","value","onChange","setRelease","aria-label","id","data-testid","map","option","FormSelectOption","className","Tile","title","icon","src","onClick","toggleUploadDestination","isSelected","uploadDestinations","aws","isStacked","isDisplayLarge","azure","isDisabled","google","propTypes","toggleUploadAWS","PropTypes","func","object","string","WizardStepUploadAWS","helperTextInvalid","errors","validated","TextInput","uploadAWS","share_with_accounts","type","setUploadOptions","Object","assign","WizardStepPackages","availableOptionsActions","Button","handlePackagesSearch","TextContent","Text","release","DualListSelector","isSearchable","availableOptions","packagesAvailableComponents","chosenOptions","packagesFilteredComponents","addSelected","packageListChange","removeSelected","addAll","removeAll","onAvailableOptionsSearchInputChanged","setPackagesSearchName","onChosenOptionsSearchInputChanged","handlePackagesFilter","filterOption","arrayOf","WizardStepUploadGoogle","accountTypePopover","Popover","hasAutoWidth","maxWidth","headerContent","bodyContent","TextList","TextListItem","aria-describedby","labelIcon","Radio","setGoogleAccountType","isChecked","uploadGoogle","accountType","test-id","user","serviceAccount","group","domain","WizardStepRegistration","name","subscribeNow","setSubscribeNow","subscription","organization","setSubscription","bool","WizardStepReview","awsReview","component","TextListVariants","dl","TextListItemVariants","dt","uploadAWSErrors","dd","googleReview","subscriptionReview","subscriptionErrors","repeat","length","keys","Alert","variant","isInline","TextVariants","small","h3","CreateImageWizard","bind","mapPackagesToComponent","onStep","onSave","onClose","validate","validateUploadAmazon","validateSubscription","state","arch","imageType","uploadAzure","temp","insights","uploadAzureErrors","uploadGoogleErrors","packagesSelectedComponents","packagesSelectedNames","packagesSearchName","chrome","auth","getUser","this","setState","Number","identity","internal","org_id","step","share","isNaN","provider","prevState","uploadOptions","_","event","target","packages","pack","summary","children","api","getPackages","then","response","packageComponents","data","filter","filteredPackages","mapComponentToPackageName","includes","newAvailablePackages","newChosenPackages","chosenNames","requests","request","distribution","image_requests","architecture","image_type","upload_requests","customizations","composeRequests","forEach","composeRequest","composeImage","compose","image_status","status","updateCompose","Promise","all","history","StepImageOutput","StepUploadAWS","StepUploadGoogle","uploadDestinationSteps","StepTargetEnv","steps","nextButtonText","Fragment","Wizard","onNext","onGoToStep","isOpen","Component","connect","dispatch","actions","withRouter"],"mappings":"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","file":"js/7.bfdf11a9ca23ddea11cb.js","sourcesContent":["// Imports\nvar ___CSS_LOADER_API_IMPORT___ = require(\"../../../node_modules/css-loader/dist/runtime/api.js\");\nexports = ___CSS_LOADER_API_IMPORT___(false);\n// Module\nexports.push([module.id, \".tiles{display:flex}.tile{flex:1 0 0px}.pf-c-tile:focus{--pf-c-tile__title--Color: var(--pf-c-tile__title--Color);--pf-c-tile__icon--Color: var(---pf-global--Color--100);--pf-c-tile--before--BorderWidth: var(--pf-global--BorderWidth--sm);--pf-c-tile--before--BorderColor: var(--pf-global--BorderColor--100)}.pf-c-tile.pf-m-selected:focus{--pf-c-tile__title--Color: var(--pf-c-tile--focus__title--Color);--pf-c-tile__icon--Color: var(--pf-c-tile--focus__icon--Color);--pf-c-tile--before--BorderWidth: var(--pf-c-tile--focus--before--BorderWidth);--pf-c-tile--before--BorderColor: var(--pf-c-tile--focus--before--BorderColor)}.provider-icon{width:1em;height:1em}\\n\", \"\"]);\n// Exports\nmodule.exports = exports;\n","// Imports\nvar ___CSS_LOADER_API_IMPORT___ = require(\"../../../node_modules/css-loader/dist/runtime/api.js\");\nexports = ___CSS_LOADER_API_IMPORT___(false);\n// Module\nexports.push([module.id, \".error{color:var(--pf-global--danger-color--100)}.pf-c-content h3{margin-top:var(--pf-global--spacer--xl)}@media screen and (min-width: 576px){.pf-c-content dl{grid-template:1fr / 25% 1fr;grid-gap:var(--pf-global--spacer--sm)}}#destination-header{font-size:18px;margin-bottom:var(--pf-global--spacer--sm)}\\n\", \"\"]);\n// Exports\nmodule.exports = exports;\n","// Imports\nvar ___CSS_LOADER_API_IMPORT___ = require(\"../../../node_modules/css-loader/dist/runtime/api.js\");\nexports = ___CSS_LOADER_API_IMPORT___(false);\n// Module\nexports.push([module.id, \".pf-c-wizard__nav-list{padding-right:0px}\\n\", \"\"]);\n// Exports\nmodule.exports = exports;\n","\nvar content = require(\"!!../../../node_modules/css-loader/dist/cjs.js!../../../node_modules/sass-loader/dist/cjs.js!./WizardStepImageOutput.scss\");\n\nif(typeof content === 'string') content = [[module.id, content, '']];\n\nvar transform;\nvar insertInto;\n\n\n\nvar options = {\"hmr\":true}\n\noptions.transform = transform\noptions.insertInto = undefined;\n\nvar update = require(\"!../../../node_modules/style-loader/lib/addStyles.js\")(content, options);\n\nif(content.locals) module.exports = content.locals;\n\nif(module.hot) {\n\tmodule.hot.accept(\"!!../../../node_modules/css-loader/dist/cjs.js!../../../node_modules/sass-loader/dist/cjs.js!./WizardStepImageOutput.scss\", function() {\n\t\tvar newContent = require(\"!!../../../node_modules/css-loader/dist/cjs.js!../../../node_modules/sass-loader/dist/cjs.js!./WizardStepImageOutput.scss\");\n\n\t\tif(typeof newContent === 'string') newContent = [[module.id, newContent, '']];\n\n\t\tvar locals = (function(a, b) {\n\t\t\tvar key, idx = 0;\n\n\t\t\tfor(key in a) {\n\t\t\t\tif(!b || a[key] !== b[key]) return false;\n\t\t\t\tidx++;\n\t\t\t}\n\n\t\t\tfor(key in b) idx--;\n\n\t\t\treturn idx === 0;\n\t\t}(content.locals, newContent.locals));\n\n\t\tif(!locals) throw new Error('Aborting CSS HMR due to changed css-modules locals.');\n\n\t\tupdate(newContent);\n\t});\n\n\tmodule.hot.dispose(function() { update(); });\n}","\nvar content = require(\"!!../../../node_modules/css-loader/dist/cjs.js!../../../node_modules/sass-loader/dist/cjs.js!./WizardStepReview.scss\");\n\nif(typeof content === 'string') content = [[module.id, content, '']];\n\nvar transform;\nvar insertInto;\n\n\n\nvar options = {\"hmr\":true}\n\noptions.transform = transform\noptions.insertInto = undefined;\n\nvar update = require(\"!../../../node_modules/style-loader/lib/addStyles.js\")(content, options);\n\nif(content.locals) module.exports = content.locals;\n\nif(module.hot) {\n\tmodule.hot.accept(\"!!../../../node_modules/css-loader/dist/cjs.js!../../../node_modules/sass-loader/dist/cjs.js!./WizardStepReview.scss\", function() {\n\t\tvar newContent = require(\"!!../../../node_modules/css-loader/dist/cjs.js!../../../node_modules/sass-loader/dist/cjs.js!./WizardStepReview.scss\");\n\n\t\tif(typeof newContent === 'string') newContent = [[module.id, newContent, '']];\n\n\t\tvar locals = (function(a, b) {\n\t\t\tvar key, idx = 0;\n\n\t\t\tfor(key in a) {\n\t\t\t\tif(!b || a[key] !== b[key]) return false;\n\t\t\t\tidx++;\n\t\t\t}\n\n\t\t\tfor(key in b) idx--;\n\n\t\t\treturn idx === 0;\n\t\t}(content.locals, newContent.locals));\n\n\t\tif(!locals) throw new Error('Aborting CSS HMR due to changed css-modules locals.');\n\n\t\tupdate(newContent);\n\t});\n\n\tmodule.hot.dispose(function() { update(); });\n}","\nvar content = require(\"!!../../../node_modules/css-loader/dist/cjs.js!../../../node_modules/sass-loader/dist/cjs.js!./CreateImageWizard.scss\");\n\nif(typeof content === 'string') content = [[module.id, content, '']];\n\nvar transform;\nvar insertInto;\n\n\n\nvar options = {\"hmr\":true}\n\noptions.transform = transform\noptions.insertInto = undefined;\n\nvar update = require(\"!../../../node_modules/style-loader/lib/addStyles.js\")(content, options);\n\nif(content.locals) module.exports = content.locals;\n\nif(module.hot) {\n\tmodule.hot.accept(\"!!../../../node_modules/css-loader/dist/cjs.js!../../../node_modules/sass-loader/dist/cjs.js!./CreateImageWizard.scss\", function() {\n\t\tvar newContent = require(\"!!../../../node_modules/css-loader/dist/cjs.js!../../../node_modules/sass-loader/dist/cjs.js!./CreateImageWizard.scss\");\n\n\t\tif(typeof newContent === 'string') newContent = [[module.id, newContent, '']];\n\n\t\tvar locals = (function(a, b) {\n\t\t\tvar key, idx = 0;\n\n\t\t\tfor(key in a) {\n\t\t\t\tif(!b || a[key] !== b[key]) return false;\n\t\t\t\tidx++;\n\t\t\t}\n\n\t\t\tfor(key in b) idx--;\n\n\t\t\treturn idx === 0;\n\t\t}(content.locals, newContent.locals));\n\n\t\tif(!locals) throw new Error('Aborting CSS HMR due to changed css-modules locals.');\n\n\t\tupdate(newContent);\n\t});\n\n\tmodule.hot.dispose(function() { update(); });\n}","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport { Form, FormGroup, FormSelect, FormSelectOption, Tile, Title } from '@patternfly/react-core';\n\nimport './WizardStepImageOutput.scss';\n\nconst WizardStepImageOutput = (props) => {\n    const releaseOptions = [\n        { value: 'rhel-8', label: 'Red Hat Enterprise Linux (RHEL) 8.3' },\n        { value: 'centos-8', label: 'CentOS Stream 8' },\n    ];\n\n    return (\n        <>\n            <Form>\n                <Title headingLevel=\"h2\" size=\"xl\">Image output</Title>\n                <FormGroup isRequired label=\"Release\" fieldId=\"release-select\">\n                    <FormSelect value={ props.value } onChange={ value => props.setRelease(value) } isRequired\n                        aria-label=\"Select release input\" id=\"release-select\" data-testid=\"release-select\">\n                        { releaseOptions.map(option => <FormSelectOption key={ option.value } value={ option.value } label={ option.label } />) }\n                    </FormSelect>\n                </FormGroup>\n                <FormGroup isRequired label=\"Select target environment\" data-testid=\"target-select\">\n                    <div className=\"tiles\">\n                        <Tile\n                            className=\"tile pf-u-mr-sm\"\n                            data-testid=\"upload-aws\"\n                            title=\"Amazon Web Services\"\n                            icon={ <img\n                                className='provider-icon'\n                                src={ '/apps/frontend-assets/partners-icons/aws.svg' } /> }\n                            onClick={ () => props.toggleUploadDestination('aws') }\n                            isSelected={ props.uploadDestinations.aws }\n                            isStacked\n                            isDisplayLarge />\n                        <Tile\n                            className=\"tile pf-u-mr-sm\"\n                            data-testid=\"upload-azure\"\n                            title=\"Microsoft Azure\"\n                            icon={ <img\n                                className='provider-icon'\n                                src={ '/apps/frontend-assets/partners-icons/microsoft-azure-short.svg' } /> }\n                            onClick={ () => props.toggleUploadDestination('azure') }\n                            isSelected={ props.uploadDestinations.azure }\n                            isStacked\n                            isDisplayLarge\n                            isDisabled />\n                        <Tile\n                            className=\"tile\"\n                            data-testid=\"upload-google\"\n                            title=\"Google Cloud Platform\"\n                            icon={ <img\n                                className='provider-icon'\n                                src={ '/apps/frontend-assets/partners-icons/google-cloud-short.svg' } /> }\n                            onClick={ () => props.toggleUploadDestination('google') }\n                            isSelected={ props.uploadDestinations.google }\n                            isStacked\n                            isDisplayLarge />\n                    </div>\n                </FormGroup>\n            </Form>\n        </>\n    );\n};\n\nWizardStepImageOutput.propTypes = {\n    toggleUploadAWS: PropTypes.func,\n    uploadDestinations: PropTypes.object,\n    setRelease: PropTypes.func,\n    value: PropTypes.string,\n    toggleUploadDestination: PropTypes.func,\n};\n\nexport default WizardStepImageOutput;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport { Form, FormGroup, TextInput, Title } from '@patternfly/react-core';\n\nconst WizardStepUploadAWS = (props) => {\n    return (\n        <Form>\n            <Title headingLevel=\"h2\" size=\"xl\">Target Environment - Upload to AWS</Title>\n            <p>\n            Your image will be uploaded to a temporary account on Amazon Web Services. <br />\n            The image will be shared with the account you provide below. <br />\n            Within the next 14 days you will need to copy the shared image to your own account.\n            After 14 days it will be unavailable and will have to be regenerated.\n            </p>\n            <FormGroup isRequired label=\"AWS account ID\" fieldId=\"aws-account-id\"\n                helperTextInvalid={ (props.errors['aws-account-id'] && props.errors['aws-account-id'].value) || '' }\n                validated={ (props.errors['aws-account-id'] && 'error') || 'default' }>\n                <TextInput value={ props.uploadAWS.options.share_with_accounts || '' }\n                    type=\"text\" aria-label=\"AWS account ID\" id=\"aws-account-id\"\n                    data-testid=\"aws-account-id\" isRequired\n                    onChange={ value =>\n                        props.setUploadOptions('aws', Object.assign(props.uploadAWS.options, { share_with_accounts: [ value ]})) } />\n            </FormGroup>\n        </Form>\n    );\n};\n\nWizardStepUploadAWS.propTypes = {\n    setUploadOptions: PropTypes.func,\n    uploadAWS: PropTypes.object,\n    errors: PropTypes.object,\n};\n\nexport default WizardStepUploadAWS;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport { Button, DualListSelector, Text, TextContent, Title } from '@patternfly/react-core';\n\nconst WizardStepPackages = (props) => {\n    const availableOptionsActions = [\n        <Button\n            aria-label=\"Search button for available packages\"\n            key=\"availableSearchButton\"\n            onClick={ props.handlePackagesSearch }>\n            Search\n        </Button>\n    ];\n\n    return (\n        <>\n            <TextContent>\n                <Title headingLevel=\"h2\" size=\"xl\">Additional packages</Title>\n                <Text>Optionally add additional packages to your <strong>{props.release}</strong> image</Text>\n            </TextContent>\n            <DualListSelector\n                className=\"pf-u-mt-sm\"\n                isSearchable\n                availableOptionsActions={ availableOptionsActions }\n                availableOptions={ props.packagesAvailableComponents }\n                chosenOptions={ props.packagesFilteredComponents }\n                addSelected={ props.packageListChange }\n                removeSelected={ props.packageListChange }\n                addAll={ props.packageListChange }\n                removeAll= { props.packageListChange }\n                onAvailableOptionsSearchInputChanged={ props.setPackagesSearchName }\n                onChosenOptionsSearchInputChanged={ props.handlePackagesFilter }\n                filterOption={ () => true }\n                id=\"basicSelectorWithSearch\" />\n        </>\n    );\n};\n\nWizardStepPackages.propTypes = {\n    packageListChange: PropTypes.func,\n    release: PropTypes.string,\n    packagesAvailableComponents: PropTypes.arrayOf(PropTypes.object),\n    packagesFilteredComponents: PropTypes.arrayOf(PropTypes.object),\n    handlePackagesSearch: PropTypes.func,\n    handlePackagesFilter: PropTypes.func,\n    setPackagesSearchName: PropTypes.func,\n};\n\nexport default WizardStepPackages;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport { Form, FormGroup, TextList, TextListItem, Popover, Radio, TextContent, Text, TextInput, Title } from '@patternfly/react-core';\nimport { HelpIcon } from '@patternfly/react-icons';\n\nconst WizardStepUploadGoogle = (props) => {\n    const accountTypePopover = (\n        <Popover\n            hasAutoWidth\n            maxWidth='35rem'\n            headerContent={ 'Valid account types' }\n            bodyContent={ <TextContent>\n                <Text>The following account types can have an image shared with them:</Text>\n                <TextList>\n                    <TextListItem>\n                        <strong>Google account:</strong> A Google account represents a developer, an administrator,\n                        or any other person who interacts with Google Cloud. e.g., <em>`alice@gmail.com`</em>.\n                    </TextListItem>\n                    <TextListItem>\n                        <strong>Service account:</strong> A service account is an account for an application instead\n                        of an individual end user. e.g., <em>`myapp@appspot.gserviceaccount.com`</em>.\n                    </TextListItem>\n                    <TextListItem>\n                        <strong>Google group:</strong> A Google group is a named collection of Google accounts and\n                        and service accounts. e.g., <em>`admins@example.com`</em>.\n                    </TextListItem>\n                    <TextListItem>\n                        <strong>Google workspace domain/Cloud identity domain:</strong> A Google workspace or cloud identity\n                        domain represents a virtual group of all the Google accounts in an organization. These domains\n                        represent your organization&apos;s internet domain name. e.g., <em>`mycompany.com`</em>.\n                    </TextListItem>\n                </TextList>\n            </TextContent> }>\n            <button\n                type=\"button\"\n                aria-label=\"Account info\"\n                aria-describedby=\"google-account-type\"\n                className=\"pf-c-form__group-label-help\">\n                <HelpIcon />\n            </button>\n        </Popover>\n    );\n\n    return (\n        <Form>\n            <Title headingLevel=\"h2\" size=\"xl\">Target Environment - Google Cloud Platform</Title>\n            <p>\n            Your image will be uploaded to an account on Google Cloud Platform. <br />\n            The image will be shared with the email you provide below. <br />\n            Within the next 14 days you will need to copy the shared image to your own account.\n            After 14 days it will be unavailable and will have to be regenerated.\n            </p>\n            <FormGroup isRequired label=\"Type\" labelIcon={ accountTypePopover } fieldId=\"google-account-type\">\n                <Radio\n                    onChange={ props.setGoogleAccountType }\n                    isChecked={ props.uploadGoogle.accountType === 'googleAccount' }\n                    label=\"Google account\"\n                    id=\"radio-google-account\"\n                    test-id\n                    value=\"googleAccount\" />\n                <Radio\n                    onChange={ props.setGoogleAccountType }\n                    isChecked={ props.uploadGoogle.accountType === 'serviceAccount' }\n                    label=\"Service account\"\n                    id=\"radio-service-account\"\n                    value=\"serviceAccount\" />\n                <Radio\n                    onChange={ props.setGoogleAccountType }\n                    isChecked={ props.uploadGoogle.accountType === 'googleGroup' }\n                    label=\"Google group\"\n                    id=\"radio-google-group\"\n                    value=\"googleGroup\" />\n                <Radio\n                    onChange={ props.setGoogleAccountType }\n                    isChecked={ props.uploadGoogle.accountType === 'domain' }\n                    label=\"Google Workspace Domain or Cloud Identity Domain\"\n                    id=\"radio-domain\"\n                    value=\"domain\" />\n            </FormGroup>\n            {props.uploadGoogle.accountType === 'googleAccount' && (\n                <FormGroup isRequired label=\"Email address\" fieldId=\"user\">\n                    <TextInput\n                        value={ props.uploadGoogle.options.share_with_accounts[0] ?\n                            props.uploadGoogle.options.share_with_accounts[0].user || '' :\n                            '' }\n                        type=\"text\" aria-label=\"Google email address\" id=\"input-google-user\"\n                        data-testid=\"input-google-user\" isRequired\n                        onChange={ value => props.setUploadOptions(\n                            'google',\n                            Object.assign(props.uploadGoogle.options, { share_with_accounts: [{ user: value }]})\n                        ) } />\n                </FormGroup>\n            )}\n            {props.uploadGoogle.accountType === 'serviceAccount' && (\n                <FormGroup isRequired label=\"Email address\" fieldId=\"service-account\">\n                    <TextInput\n                        value={ props.uploadGoogle.options.share_with_accounts[0] ?\n                            props.uploadGoogle.options.share_with_accounts[0].serviceAccount || '' :\n                            '' }\n                        type=\"text\" aria-label=\"Google email address\" id=\"input-google-service-account\"\n                        data-testid=\"input-google-service-account\" isRequired\n                        onChange={ value => props.setUploadOptions(\n                            'google',\n                            Object.assign(props.uploadGoogle.options, { share_with_accounts: [{ serviceAccount: value }]})\n                        ) } />\n                </FormGroup>\n            )}\n            {props.uploadGoogle.accountType === 'googleGroup' && (\n                <FormGroup isRequired label=\"Email address\" fieldId=\"group\">\n                    <TextInput\n                        value={ props.uploadGoogle.options.share_with_accounts[0] ?\n                            props.uploadGoogle.options.share_with_accounts[0].group || '' :\n                            '' }\n                        type=\"text\" aria-label=\"Google email address\" id=\"input-google-group\"\n                        data-testid=\"input-google-group\" isRequired\n                        onChange={ value => props.setUploadOptions(\n                            'google',\n                            Object.assign(props.uploadGoogle.options, { share_with_accounts: [{ group: value }]})\n                        ) } />\n                </FormGroup>\n            )}\n            {props.uploadGoogle.accountType === 'domain' && (\n                <FormGroup isRequired label=\"Domain\" fieldId=\"domain\">\n                    <TextInput\n                        value={ props.uploadGoogle.options.share_with_accounts[0] ?\n                            props.uploadGoogle.options.share_with_accounts[0].domain || '' :\n                            '' }\n                        type=\"text\" aria-label=\"Google domain\" id=\"input-google-domain\"\n                        data-testid=\"input-google-domain\" isRequired\n                        onChange={ value => props.setUploadOptions(\n                            'google',\n                            Object.assign(props.uploadGoogle.options, { share_with_accounts: [{ domain: value }]})\n                        ) } />\n                </FormGroup>\n            )}\n        </Form>\n    );\n};\n\nWizardStepUploadGoogle.propTypes = {\n    setUploadOptions: PropTypes.func,\n    setGoogleAccountType: PropTypes.func,\n    uploadGoogle: PropTypes.object,\n    errors: PropTypes.object,\n};\n\nexport default WizardStepUploadGoogle;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport { Form, FormGroup, TextInput, Radio, Title } from '@patternfly/react-core';\n\nconst WizardStepRegistration = (props) => {\n    return (\n        <Form>\n            <Title headingLevel=\"h2\" size=\"xl\">Registration</Title>\n            <FormGroup isRequired label=\"Register the system\">\n                <Radio name=\"subscribe-now-radio\" isChecked={ props.subscribeNow } id=\"subscribe-now-radio\"\n                    label=\"Embed an activation key and register systems on first boot\"\n                    onChange={ () => props.setSubscribeNow(true) }\n                    data-testid=\"register-now-radio-button\" />\n                <Radio name=\"subscribe-later-radio\" isChecked={ !props.subscribeNow }\n                    label=\"Register the system later\" id=\"subscribe-later-radio\"\n                    onChange={ () => props.setSubscribeNow(false) }\n                    data-testid=\"register-later-radio-button\" />\n            </FormGroup>\n            { props.subscribeNow &&\n              <>\n                  <FormGroup label=\"Organization ID\" fieldId=\"subscription-organization\">\n                      <TextInput isDisabled value={ props.subscription.organization || '' } type=\"text\"\n                          id=\"subscription-organization\" aria-label=\"Subscription organization ID\"\n                          data-testid=\"organization-id\" />\n                  </FormGroup>\n                  <FormGroup isRequired label=\"Activation key\" fieldId=\"subscription-activation\"\n                      helperTextInvalid={ (props.errors['subscription-activation'] && props.errors['subscription-activation'].value) || '' }\n                      validated={ (props.errors['subscription-activation'] && 'error') || 'default' }>\n                      <TextInput value={ props.subscription['activation-key'] || '' } type=\"password\"\n                          data-testid=\"subscription-activation\" isRequired\n                          id=\"subscription-activation\" aria-label=\"Subscription activation key\"\n                          onChange={ value => props.setSubscription(Object.assign(props.subscription, { 'activation-key': value })) } />\n                  </FormGroup>\n              </> }\n        </Form>\n    );\n};\n\nWizardStepRegistration.propTypes = {\n    setSubscription: PropTypes.func,\n    setSubscribeNow: PropTypes.func,\n    subscription: PropTypes.object,\n    subscribeNow: PropTypes.bool,\n    errors: PropTypes.object,\n};\n\nexport default WizardStepRegistration;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport {\n    Alert,\n    Text, TextVariants, TextContent, TextList, TextListVariants, TextListItem, TextListItemVariants,\n    Title\n} from '@patternfly/react-core';\nimport { ExclamationCircleIcon } from '@patternfly/react-icons';\n\nimport './WizardStepReview.scss';\n\nconst WizardStepReview = (props) => {\n    const releaseLabels = {\n        'rhel-8': 'Red Hat Enterprise Linux (RHEL) 8.3',\n        'centos-8': 'CentOS Stream 8'\n    };\n\n    const awsReview = (\n        <>\n            <Text id=\"destination-header\">Amazon Web Services</Text>\n            <TextList component={ TextListVariants.dl } data-testid='review-image-upload-aws'>\n                <TextListItem component={ TextListItemVariants.dt }>Account ID</TextListItem>\n                {props.uploadAWSErrors['aws-account-id'] ? (\n                    <TextListItem component={ TextListItemVariants.dd }>\n                        <ExclamationCircleIcon className=\"error\" /> { props.uploadAWSErrors['aws-account-id'].value }\n                    </TextListItem>\n                ) : (\n                    <TextListItem component={ TextListItemVariants.dd }>{props.uploadAWS.options.share_with_accounts[0]}</TextListItem>\n                )}\n            </TextList>\n        </>\n    );\n\n    const googleReview = (\n        <>\n            <Text id=\"destination-header\">Google Cloud Platform</Text>\n            <TextList component={ TextListVariants.dl } data-testid='review-image-upload-google'>\n                {props.uploadGoogle.accountType === 'googleAccount' && (\n                    <>\n                        <TextListItem component={ TextListItemVariants.dt }>Google account</TextListItem>\n                        <TextListItem component={ TextListItemVariants.dd }>{props.uploadGoogle.options.share_with_accounts[0] ?\n                            props.uploadGoogle.options.share_with_accounts[0].user || '' :\n                            ''}\n                        </TextListItem>\n                    </>\n                )}\n                {props.uploadGoogle.accountType === 'serviceAccount' && (\n                    <>\n                        <TextListItem component={ TextListItemVariants.dt }>Service account</TextListItem>\n                        <TextListItem component={ TextListItemVariants.dd }>{props.uploadGoogle.options.share_with_accounts[0] ?\n                            props.uploadGoogle.options.share_with_accounts[0].serviceAccount || '' :\n                            ''}\n                        </TextListItem>\n                    </>\n                )}\n                {props.uploadGoogle.accountType === 'googleGroup' && (\n                    <>\n                        <TextListItem component={ TextListItemVariants.dt }>Google group</TextListItem>\n                        <TextListItem component={ TextListItemVariants.dd }>{props.uploadGoogle.options.share_with_accounts[0] ?\n                            props.uploadGoogle.options.share_with_accounts[0].group || '' :\n                            ''}\n                        </TextListItem>\n                    </>\n                )}\n                {props.uploadGoogle.accountType === 'domain' && (\n                    <>\n                        <TextListItem component={ TextListItemVariants.dt }>Domain</TextListItem>\n                        <TextListItem component={ TextListItemVariants.dd }>{props.uploadGoogle.options.share_with_accounts[0] ?\n                            props.uploadGoogle.options.share_with_accounts[0].domain || '' :\n                            ''}\n                        </TextListItem>\n                    </>\n                )}\n            </TextList>\n        </>\n    );\n\n    let subscriptionReview = <TextListItem component={ TextListItemVariants.dd }>Register the system later</TextListItem>;\n    if (props.subscribeNow) {\n        subscriptionReview = (<>\n            <TextListItem component={ TextListItemVariants.dd }>Register the system on first boot</TextListItem>\n            <TextListItem component={ TextListItemVariants.dt }>Activation key</TextListItem>\n            { props.subscriptionErrors['subscription-activation'] ? (\n                <TextListItem component={ TextListItemVariants.dd }>\n                    <ExclamationCircleIcon className=\"error\" /> { props.subscriptionErrors['subscription-activation'].value }\n                </TextListItem>\n            ) : (\n                <TextListItem component={ TextListItemVariants.dd } type=\"password\">\n                    {'*'.repeat(props.subscription['activation-key'].length)}\n                </TextListItem>\n            )}\n        </>);\n    }\n\n    return (\n        <>\n            { (Object.keys(props.uploadAWSErrors).length > 0 ||\n               Object.keys(props.subscriptionErrors).length > 0) &&\n              <Alert variant=\"danger\" className=\"pf-u-mb-xl\" isInline title=\"Required information is missing\" /> }\n            <Title headingLevel=\"h2\" size=\"xl\">Review</Title>\n            <TextContent>\n                <Text component={ TextVariants.small }>\n                    Review the information and click Create image\n                    to create the image using the following criteria.\n                </Text>\n                <Text component={ TextVariants.h3 }>Image output</Text>\n                <TextList component={ TextListVariants.dl } data-testid='review-image-output'>\n                    <TextListItem component={ TextListItemVariants.dt }>Release</TextListItem>\n                    <TextListItem component={ TextListItemVariants.dd }>{releaseLabels[props.release]}</TextListItem>\n                </TextList>\n                <Text component={ TextVariants.h3 }>Target environment</Text>\n                {props.uploadDestinations.aws && awsReview }\n                {props.uploadDestinations.google && googleReview }\n                <Text component={ TextVariants.h3 }>Registration</Text>\n                <TextList component={ TextListVariants.dl } data-testid='review-image-registration'>\n                    <TextListItem component={ TextListItemVariants.dt }>Subscription</TextListItem>\n                    { subscriptionReview }\n                </TextList>\n            </TextContent>\n        </>\n    );\n};\n\nWizardStepReview.propTypes = {\n    release: PropTypes.string,\n    uploadAWS: PropTypes.object,\n    uploadGoogle: PropTypes.object,\n    uploadDestinations: PropTypes.object,\n    subscription: PropTypes.object,\n    subscribeNow: PropTypes.bool,\n    uploadAWSErrors: PropTypes.object,\n    subscriptionErrors: PropTypes.object,\n};\n\nexport default WizardStepReview;\n","import PropTypes from 'prop-types';\nimport React, { Component } from 'react';\nimport { withRouter } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport { actions } from '../redux';\n\nimport { Wizard, TextContent } from '@patternfly/react-core';\n\nimport WizardStepImageOutput from '../../PresentationalComponents/CreateImageWizard/WizardStepImageOutput';\nimport WizardStepUploadAWS from '../../PresentationalComponents/CreateImageWizard/WizardStepUploadAWS';\nimport WizardStepPackages from '../../PresentationalComponents/CreateImageWizard/WizardStepPackages';\nimport WizardStepUploadGoogle from '../../PresentationalComponents/CreateImageWizard/WizardStepUploadGoogle';\nimport WizardStepRegistration from '../../PresentationalComponents/CreateImageWizard/WizardStepRegistration';\nimport WizardStepReview from '../../PresentationalComponents/CreateImageWizard/WizardStepReview';\n\nimport api from './../../api.js';\nimport './CreateImageWizard.scss';\n\nclass CreateImageWizard extends Component {\n    constructor(props) {\n        super(props);\n\n        this.handlePackagesSearch = this.handlePackagesSearch.bind(this);\n        this.handlePackagesFilter = this.handlePackagesFilter.bind(this);\n        this.packageListChange = this.packageListChange.bind(this);\n        this.mapPackagesToComponent = this.mapPackagesToComponent.bind(this);\n        this.setRelease = this.setRelease.bind(this);\n        this.setUploadOptions = this.setUploadOptions.bind(this);\n        this.setSubscription = this.setSubscription.bind(this);\n        this.setSubscribeNow = this.setSubscribeNow.bind(this);\n        this.setPackagesSearchName = this.setPackagesSearchName.bind(this);\n        this.setGoogleAccountType = this.setGoogleAccountType.bind(this);\n        this.toggleUploadDestination = this.toggleUploadDestination.bind(this);\n        this.onStep = this.onStep.bind(this);\n        this.onSave = this.onSave.bind(this);\n        this.onClose = this.onClose.bind(this);\n        this.validate = this.validate.bind(this);\n        this.validateUploadAmazon = this.validateUploadAmazon.bind(this);\n        this.validateSubscription = this.validateSubscription.bind(this);\n\n        this.state = {\n            arch: 'x86_64',\n            imageType: 'qcow2',\n            release: 'rhel-8',\n            uploadAWS: {\n                type: 'aws',\n                options: {\n                    share_with_accounts: []\n                }\n            },\n            uploadAzure: {\n                type: 'azure',\n                options: {\n                    temp: ''\n                }\n            },\n            uploadGoogle: {\n                type: 'gcp',\n                accountType: 'googleAccount',\n                options: {\n                    share_with_accounts: []\n                }\n            },\n            uploadDestinations: {\n                aws: false,\n                azure: false,\n                google: false\n            },\n            subscription: {\n                organization: null,\n                'activation-key': null,\n                'server-url': 'subscription.rhsm.redhat.com',\n                'base-url': 'https://cdn.redhat.com/',\n                insights: true\n            },\n            subscribeNow: true,\n            /* errors take form of $fieldId: error */\n            uploadAWSErrors: {},\n            uploadAzureErrors: {},\n            uploadGoogleErrors: {},\n            subscriptionErrors: {},\n            packagesAvailableComponents: [],\n            packagesSelectedComponents: [],\n            packagesFilteredComponents: [],\n            packagesSelectedNames: [],\n            packagesSearchName: '',\n        };\n    }\n\n    async componentDidMount() {\n        let user = await insights.chrome.auth.getUser();\n        this.setState({\n            subscription: {\n                organization: Number(user.identity.internal.org_id)\n            }\n        });\n    }\n\n    onStep(step) {\n        if (step.name === 'Review') {\n            this.validate();\n        }\n    }\n\n    validate() {\n        if (this.state.uploadDestinations.aws) {this.validateUploadAmazon();}\n        else {\n            this.setState({\n                uploadAWSErrors: {},\n                uploadAzureErrors: {},\n                uploadGoogleErrors: {},\n            });\n        }\n\n        /* subscription */\n        if (this.state.subscribeNow) {\n            this.validateSubscription();\n        } else {\n            this.setState({ subscriptionErrors: {}});\n        }\n    }\n\n    validateUploadAmazon() {\n        let uploadAWSErrors = {};\n        let share = this.state.uploadAWS.options.share_with_accounts;\n        if (share.length === 0 || share[0].length !== 12 || isNaN(share[0])) {\n            uploadAWSErrors['aws-account-id'] =\n                { label: 'AWS account ID', value: 'A 12-digit number is required' };\n        }\n\n        this.setState({ uploadAWSErrors });\n    }\n\n    validateSubscription() {\n        let subscriptionErrors = {};\n        if (!this.state.subscription['activation-key']) {\n            subscriptionErrors['subscription-activation'] =\n                { label: 'Activation key', value: 'A value is required' };\n        }\n\n        this.setState({ subscriptionErrors });\n    }\n\n    setRelease(release) {\n        this.setState({ release });\n    }\n\n    toggleUploadDestination(provider) {\n        this.setState(prevState => ({\n            ...prevState,\n            uploadDestinations: {\n                ...prevState.uploadDestinations,\n                [provider]: !prevState.uploadDestinations[provider]\n            }\n        }));\n    }\n\n    setUploadOptions(provider, uploadOptions) {\n        switch (provider) {\n            case 'aws':\n                this.setState({\n                    uploadAWS: {\n                        type: provider,\n                        options: uploadOptions\n                    }\n                });\n                break;\n            case 'azure':\n                this.setState({\n                    uploadAzure: {\n                        type: provider,\n                        options: uploadOptions\n                    }\n                });\n                break;\n            case 'google':\n                this.setState({\n                    uploadGoogle: {\n                        ...this.state.uploadGoogle,\n                        options: uploadOptions\n                    }\n                });\n                break;\n            default:\n                break;\n        }\n    }\n\n    setGoogleAccountType(_, event) {\n        this.setState({\n            uploadGoogle: {\n                ...this.state.uploadGoogle,\n                accountType: event.target.value\n            }\n        });\n    }\n\n    setSubscribeNow(subscribeNow) {\n        this.setState({ subscribeNow });\n    }\n\n    setSubscription(subscription) {\n        this.setState({ subscription }, this.validate);\n    }\n\n    setPackagesSearchName(packagesSearchName) {\n        this.setState({ packagesSearchName });\n    }\n\n    mapPackagesToComponent(packages) {\n        return packages.map((pack) =>\n            <TextContent key={ pack }>\n                <span className=\"pf-c-dual-list-selector__item-text\">{ pack.name }</span>\n                <small>{ pack.summary }</small>\n            </TextContent>\n        );\n    }\n\n    // this digs into the component properties to extract the package name\n    mapComponentToPackageName(component) {\n        return component.props.children[0].props.children;\n    }\n\n    handlePackagesSearch() {\n        api.getPackages(this.state.release, this.state.arch, this.state.packagesSearchName).then(response => {\n            const packageComponents = this.mapPackagesToComponent(response.data);\n            this.setState({\n                packagesAvailableComponents: packageComponents\n            });\n        });\n    };\n\n    handlePackagesFilter(filter) {\n        const filteredPackages = this.state.packagesSelectedComponents.filter(component => {\n            const name = this.mapComponentToPackageName(component);\n            return name.includes(filter);\n        });\n        this.setState({\n            packagesFilteredComponents: filteredPackages\n        });\n    }\n\n    packageListChange(newAvailablePackages, newChosenPackages) {\n        const chosenNames = newChosenPackages.map(component => this.mapComponentToPackageName(component));\n        this.setState({\n            packagesAvailableComponents: newAvailablePackages,\n            packagesSelectedComponents: newChosenPackages,\n            packagesFilteredComponents: newChosenPackages,\n            packagesSelectedNames: chosenNames\n        });\n    }\n\n    onSave () {\n        let requests = [];\n        if (this.state.uploadDestinations.aws) {\n            let request = {\n                distribution: this.state.release,\n                image_requests: [\n                    {\n                        architecture: this.state.arch,\n                        image_type: 'ami',\n                        upload_requests: [ this.state.uploadAWS ],\n                    }],\n                customizations: {\n                    subscription: this.state.subscription,\n                    packages: this.state.packagesSelectedNames,\n                },\n            };\n            requests.push(request);\n        }\n\n        if (this.state.uploadDestinations.google) {\n            let share = '';\n            switch (this.state.uploadGoogle.accountType) {\n                case 'googleAccount':\n                    share = 'user:' + this.state.uploadGoogle.options.share_with_accounts[0].user;\n                    break;\n                case 'serviceAccount':\n                    share = 'serviceAccount:' + this.state.uploadGoogle.options.share_with_accounts[0].serviceAccount;\n                    break;\n                case 'googleGroup':\n                    share = 'group:' + this.state.uploadGoogle.options.share_with_accounts[0].group;\n                    break;\n                case 'domain':\n                    share = 'domain:' + this.state.uploadGoogle.options.share_with_accounts[0].domain;\n                    break;\n            }\n\n            let request = {\n                distribution: this.state.release,\n                image_requests: [\n                    {\n                        architecture: this.state.arch,\n                        image_type: 'gcp',\n                        upload_requests: [{\n                            type: 'gcp',\n                            options: {\n                                share_with_accounts: [ share ],\n                            },\n                        }],\n                    }],\n                customizations: {\n                    subscription: this.state.subscription,\n                },\n            };\n            requests.push(request);\n        }\n\n        const composeRequests = [];\n        requests.forEach(request => {\n            const composeRequest = api.composeImage(request).then(response => {\n                let compose = {};\n                compose[response.id] = {\n                    image_status: {\n                        status: 'pending',\n                    },\n                    distribution: request.distribution,\n                    architecture: request.image_requests[0].architecture,\n                    image_type: request.image_requests[0].image_type,\n                };\n                this.props.updateCompose(compose);\n            });\n            composeRequests.push(composeRequest);\n        });\n        Promise.all(composeRequests).then(() => this.props.history.push('/landing'));\n    }\n\n    onClose () {\n        this.props.history.push('/landing');\n    }\n\n    render() {\n        const StepImageOutput = {\n            name: 'Image output',\n            component: <WizardStepImageOutput\n                value={ this.state.release }\n                setRelease={ this.setRelease }\n                toggleUploadDestination={ this.toggleUploadDestination }\n                uploadDestinations={ this.state.uploadDestinations } />\n        };\n\n        const StepUploadAWS = {\n            name: 'Amazon Web Services',\n            component: <WizardStepUploadAWS\n                uploadAWS={ this.state.uploadAWS }\n                setUploadOptions={ this.setUploadOptions }\n                errors={ this.state.uploadAWSErrors } />\n        };\n\n        const StepUploadAzure = {\n            name: 'Microsoft Azure'\n        };\n\n        const StepUploadGoogle = {\n            name: 'Google Cloud Platform',\n            component: <WizardStepUploadGoogle\n                uploadGoogle={ this.state.uploadGoogle }\n                setGoogleAccountType={ this.setGoogleAccountType }\n                setUploadOptions={ this.setUploadOptions }\n                errors={ this.state.uploadGoogleErrors } />\n        };\n\n        const uploadDestinationSteps = [];\n        if (this.state.uploadDestinations.aws) {\n            uploadDestinationSteps.push(StepUploadAWS);\n        }\n\n        if (this.state.uploadDestinations.azure) {\n            uploadDestinationSteps.push(StepUploadAzure);\n        }\n\n        if (this.state.uploadDestinations.google) {\n            uploadDestinationSteps.push(StepUploadGoogle);\n        }\n\n        const StepTargetEnv = {\n            name: 'Target environment',\n            steps: uploadDestinationSteps\n        };\n\n        const steps = [\n            StepImageOutput,\n            ...(StepTargetEnv.steps.length > 0 ? [ StepTargetEnv ] : []),\n            {\n                name: 'Registration',\n                component: <WizardStepRegistration\n                    subscription={ this.state.subscription }\n                    subscribeNow={ this.state.subscribeNow }\n                    setSubscription={ this.setSubscription }\n                    setSubscribeNow={ this.setSubscribeNow }\n                    errors={ this.state.subscriptionErrors } /> },\n            {\n                name: 'Packages',\n                component: <WizardStepPackages\n                    packageListChange={ this.packageListChange }\n                    release={ this.state.release }\n                    packagesAvailableComponents={ this.state.packagesAvailableComponents }\n                    packagesFilteredComponents={ this.state.packagesFilteredComponents }\n                    handlePackagesSearch={ this.handlePackagesSearch }\n                    handlePackagesFilter= { this.handlePackagesFilter }\n                    setPackagesSearchName={ this.setPackagesSearchName } /> },\n            {\n                name: 'Review',\n                component: <WizardStepReview\n                    release={ this.state.release }\n                    uploadAWS={ this.state.uploadAWS }\n                    uploadGoogle={ this.state.uploadGoogle }\n                    uploadDestinations={ this.state.uploadDestinations }\n                    subscription={ this.state.subscription }\n                    subscribeNow={ this.state.subscribeNow }\n                    uploadAWSErrors={ this.state.uploadAWSErrors }\n                    subscriptionErrors={ this.state.subscriptionErrors } />,\n                nextButtonText: 'Create',\n            }\n        ];\n        return (\n            <React.Fragment>\n                <Wizard\n                    title={ 'Create image' }\n                    onNext={ this.onStep }\n                    onGoToStep={ this.onStep }\n                    steps={ steps }\n                    onClose={ this.onClose }\n                    onSave={ this.onSave }\n                    isOpen />\n            </React.Fragment>\n        );\n    }\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        updateCompose: (compose) => dispatch(actions.updateCompose(compose)),\n    };\n}\n\nCreateImageWizard.propTypes = {\n    updateCompose: PropTypes.func,\n    history: PropTypes.object,\n};\n\nexport default connect(null, mapDispatchToProps)(withRouter(CreateImageWizard));\n"],"sourceRoot":""}