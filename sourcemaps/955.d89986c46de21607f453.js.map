{"version":3,"sources":["webpack:///./src/store/actions/actions.js"],"names":["composeFailed","error","type","types","payload","composeAdded","compose","composeUpdatedStatus","id","status","composeGetStatus","dispatch","api","request","image_status","composesGet","limit","offset","data","map","count","meta","composeStart","composeRequest","then","response","Object","assign","err","composeUpdated","setRelease","arch","distro","setUploadDestinations","aws","azure","google","setUploadAWS","shareWithAccounts","setUploadAzure","tenantId","subscriptionId","resourceGroup","setUploadGoogle","accountType","setSelectedPackages","selectedPackages","setSubscription","activationKey","insights","organization","setSubscribeNow","subscribeNow"],"mappings":"wLAUaA,EAAgB,SAACC,GAAD,MAAY,CACrCC,KAAMC,mBACNC,QAAS,CAAEH,WAGFI,EAAe,SAACC,GAAD,MAAc,CACtCJ,KAAMC,kBACNC,QAAS,CAAEE,aAoBFC,EAAuB,SAACC,EAAIC,GAAL,MAAiB,CACjDP,KAAMC,2BACNC,QAAS,CAAEI,KAAIC,YAGNC,EAAmB,SAACF,GAAD,0CAAQ,WAAMG,GAAN,uFACdC,qBAAqBJ,GADP,OAC9BK,EAD8B,OAEpCF,EAASJ,EAAqBC,EAAIK,EAAQC,eAFN,2CAAR,uDA+FhC,SACIC,YAtFuB,SAACC,EAAOC,GAAR,0CAAmB,WAAMN,GAAN,uFACpBC,gBAAgBI,EAAOC,GADH,QACpCJ,EADoC,QAElCK,KAAKC,KAAI,SAAAb,GACbK,EAASN,EAAaC,IACtBK,EAASD,EAAiBJ,EAAQE,QAEtCG,GAXiCS,EAWHP,EAAQQ,KAAKD,MAXC,CAC5ClB,KAAMC,2BACNC,QAAS,CAAEgB,YAG+B,iCALV,IAACA,IAKS,OAAnB,uDAuFvBE,aAvHwB,SAACC,GAAD,0CAAoB,WAAMZ,GAAN,8EAEtCE,EAAUD,iBAAiBW,GAFW,kBAGrCV,EAAQW,MAAK,SAAAC,GAGhB,IAAMnB,EAAUoB,OAAOC,OAAO,GAAIF,EAAU,CAAEZ,QAASU,GAAmB,CAAET,aAAc,CAAEL,OAAQ,aACpGE,EAASN,EAAaC,OAJnB,OAKE,SAAAsB,GACuB,MAAxBA,EAAIH,SAAShB,OACbE,EAASX,EAAc,2CAEvBW,EAASX,EAAc,qDAZa,2CAApB,uDAwHxB6B,eAzIJ,SAAwBvB,GACpB,MAAO,CACHJ,KAAMC,oBACNC,QAAS,CAAEE,aAuIfI,mBACAoB,WAjFJ,YAAsC,IAAhBC,EAAgB,EAAhBA,KAAMC,EAAU,EAAVA,OACxB,MAAO,CACH9B,KAAMC,gBACNC,QAAS,CACL2B,OACAC,YA6ERC,sBAxEJ,YAAuD,IAAtBC,EAAsB,EAAtBA,IAAKC,EAAiB,EAAjBA,MAAOC,EAAU,EAAVA,OACzC,MAAO,CACHlC,KAAMC,4BACNC,QAAS,CACL8B,MACAC,QACAC,YAmERC,aA9DJ,YAA6C,IAArBC,EAAqB,EAArBA,kBACpB,MAAO,CACHpC,KAAMC,mBACNC,QAAS,CACLkC,uBA2DRC,eAtDJ,YAAqE,IAA3CC,EAA2C,EAA3CA,SAAUC,EAAiC,EAAjCA,eAAgBC,EAAiB,EAAjBA,cAChD,MAAO,CACHxC,KAAMC,qBACNC,QAAS,CACLoC,WACAC,iBACAC,mBAiDRC,gBA5CJ,YAA6D,IAAlCC,EAAkC,EAAlCA,YAAaN,EAAqB,EAArBA,kBACpC,MAAO,CACHpC,KAAMC,sBACNC,QAAS,CACLwC,cACAN,uBAwCRO,oBAnCJ,SAA6BC,GACzB,MAAO,CACH5C,KAAMC,0BACNC,QAAS0C,IAiCbC,gBA7BJ,YAAoE,IAAzCC,EAAyC,EAAzCA,cAAeC,EAA0B,EAA1BA,SAAUC,EAAgB,EAAhBA,aAChD,MAAO,CACHhD,KAAMC,qBACNC,QAAS,CACL4C,gBACAC,WACAC,kBAwBRC,gBAnBJ,SAAyBC,GACrB,MAAO,CACHlD,KAAMC,sBACNC,QAASgD","file":"js/955.5563a1b671c2ae3119ef.js","sourcesContent":["import api from '../../api';\nimport types from '../types';\n\nfunction composeUpdated(compose) {\n    return {\n        type: types.COMPOSE_UPDATED,\n        payload: { compose },\n    };\n}\n\nexport const composeFailed = (error) => ({\n    type: types.COMPOSE_FAILED,\n    payload: { error }\n});\n\nexport const composeAdded = (compose) => ({\n    type: types.COMPOSE_ADDED,\n    payload: { compose },\n});\n\nexport const composeStart = (composeRequest) => async dispatch => {\n    // response will be of the format {id: ''}\n    const request = api.composeImage(composeRequest);\n    return request.then(response => {\n        // add the compose id to the compose object to provide access to the id if iterating through\n        // composes and add an image status of 'pending' alongside the compose request.\n        const compose = Object.assign({}, response, { request: composeRequest },  { image_status: { status: 'pending' }});\n        dispatch(composeAdded(compose));\n    }).catch(err => {\n        if (err.response.status === 500) {\n            dispatch(composeFailed('Error: Something went wrong serverside'));\n        } else {\n            dispatch(composeFailed('Error: Something went wrong with the compose'));\n        }\n    });\n};\n\nexport const composeUpdatedStatus = (id, status) => ({\n    type: types.COMPOSE_UPDATED_STATUS,\n    payload: { id, status }\n});\n\nexport const composeGetStatus = (id) => async dispatch => {\n    const request = await api.getComposeStatus(id);\n    dispatch(composeUpdatedStatus(id, request.image_status));\n};\n\nexport const composesUpdatedCount = (count) => ({\n    type: types.COMPOSES_UPDATED_COUNT,\n    payload: { count }\n});\n\nexport const composesGet = (limit, offset) => async dispatch => {\n    const request = await api.getComposes(limit, offset);\n    request.data.map(compose => {\n        dispatch(composeAdded(compose));\n        dispatch(composeGetStatus(compose.id));\n    });\n    dispatch(composesUpdatedCount(request.meta.count));\n};\n\nfunction setRelease({ arch, distro }) {\n    return {\n        type: types.SET_RELEASE,\n        payload: {\n            arch,\n            distro,\n        }\n    };\n}\n\nfunction setUploadDestinations({ aws, azure, google }) {\n    return {\n        type: types.SET_UPLOAD_DESTINATIONS,\n        payload: {\n            aws,\n            azure,\n            google,\n        }\n    };\n}\n\nfunction setUploadAWS({ shareWithAccounts }) {\n    return {\n        type: types.SET_UPLOAD_AWS,\n        payload: {\n            shareWithAccounts,\n        }\n    };\n}\n\nfunction setUploadAzure({ tenantId, subscriptionId, resourceGroup }) {\n    return {\n        type: types.SET_UPLOAD_AZURE,\n        payload: {\n            tenantId,\n            subscriptionId,\n            resourceGroup,\n        }\n    };\n}\n\nfunction setUploadGoogle({ accountType, shareWithAccounts }) {\n    return {\n        type: types.SET_UPLOAD_GOOGLE,\n        payload: {\n            accountType,\n            shareWithAccounts,\n        }\n    };\n}\n\nfunction setSelectedPackages(selectedPackages) {\n    return {\n        type: types.SET_SELECTED_PACKAGES,\n        payload: selectedPackages\n    };\n}\n\nfunction setSubscription({ activationKey, insights, organization }) {\n    return {\n        type: types.SET_SUBSCRIPTION,\n        payload: {\n            activationKey,\n            insights,\n            organization,\n        }\n    };\n}\n\nfunction setSubscribeNow(subscribeNow) {\n    return {\n        type: types.SET_SUBSCRIBE_NOW,\n        payload: subscribeNow\n    };\n}\n\nexport default {\n    composesGet,\n    composeStart,\n    composeUpdated,\n    composeGetStatus,\n    setRelease,\n    setUploadDestinations,\n    setUploadAWS,\n    setUploadAzure,\n    setUploadGoogle,\n    setSelectedPackages,\n    setSubscription,\n    setSubscribeNow,\n};\n"],"sourceRoot":""}