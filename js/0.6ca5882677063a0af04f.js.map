{"version":3,"sources":["webpack:///./src/store/actions/actions.js","webpack:///./src/store/actions/index.js"],"names":["composeFailed","error","type","types","COMPOSE_FAILED","payload","composeAdded","compose","COMPOSE_ADDED","composeUpdatedStatus","id","status","COMPOSE_UPDATED_STATUS","composeGetStatus","dispatch","a","api","getComposeStatus","request","image_status","composesGet","limit","offset","getComposes","data","map","count","meta","COMPOSES_UPDATED_COUNT","composeStart","composeRequest","composeImage","then","response","Object","assign","err","composeUpdated","COMPOSE_UPDATED","setRelease","arch","distro","SET_RELEASE","setUploadDestinations","aws","azure","google","SET_UPLOAD_DESTINATIONS","setUploadAWS","shareWithAccounts","SET_UPLOAD_AWS","setUploadAzure","tenantId","subscriptionId","resourceGroup","SET_UPLOAD_AZURE","setUploadGoogle","accountType","SET_UPLOAD_GOOGLE","setSelectedPackages","selectedPackages","SET_SELECTED_PACKAGES","setSubscription","activationKey","insights","organization","SET_SUBSCRIPTION","setSubscribeNow","subscribeNow","SET_SUBSCRIBE_NOW"],"mappings":"kJAUO,IAAMA,EAAgB,SAACC,GAAD,MAAY,CACrCC,KAAMC,IAAMC,eACZC,QAAS,CAAEJ,WAGFK,EAAe,SAACC,GAAD,MAAc,CACtCL,KAAMC,IAAMK,cACZH,QAAS,CAAEE,aAoBFE,EAAuB,SAACC,EAAIC,GAAL,MAAiB,CACjDT,KAAMC,IAAMS,uBACZP,QAAS,CAAEK,KAAIC,YAGNE,EAAmB,SAACH,GAAD,sCAAQ,WAAMI,GAAN,eAAAC,EAAA,sEACdC,IAAIC,iBAAiBP,GADP,OAC9BQ,EAD8B,OAEpCJ,EAASL,EAAqBC,EAAIQ,EAAQC,eAFN,2CAAR,uDA+FjB,OACXC,YAtFuB,SAACC,EAAOC,GAAR,sCAAmB,WAAMR,GAAN,eAAAC,EAAA,sEACpBC,IAAIO,YAAYF,EAAOC,GADH,QACpCJ,EADoC,QAElCM,KAAKC,KAAI,SAAAlB,GACbO,EAASR,EAAaC,IACtBO,EAASD,EAAiBN,EAAQG,QAEtCI,GAXiCY,EAWHR,EAAQS,KAAKD,MAXC,CAC5CxB,KAAMC,IAAMyB,uBACZvB,QAAS,CAAEqB,YAG+B,iCALV,IAACA,IAKS,OAAnB,uDAuFvBG,aAvHwB,SAACC,GAAD,sCAAoB,WAAMhB,GAAN,eAAAC,EAAA,6DAEtCG,EAAUF,IAAIe,aAAaD,GAFW,kBAGrCZ,EAAQc,MAAK,SAAAC,GAGhB,IAAM1B,EAAU2B,OAAOC,OAAO,GAAIF,EAAU,CAAEf,QAASY,GAAmB,CAAEX,aAAc,CAAER,OAAQ,aACpGG,EAASR,EAAaC,OAJnB,OAKE,SAAA6B,GACuB,MAAxBA,EAAIH,SAAStB,OACbG,EAASd,EAAc,2CAEvBc,EAASd,EAAc,qDAZa,2CAApB,uDAwHxBqC,eAzIJ,SAAwB9B,GACpB,MAAO,CACHL,KAAMC,IAAMmC,gBACZjC,QAAS,CAAEE,aAuIfM,mBACA0B,WAjFJ,YAAsC,IAAhBC,EAAgB,EAAhBA,KAAMC,EAAU,EAAVA,OACxB,MAAO,CACHvC,KAAMC,IAAMuC,YACZrC,QAAS,CACLmC,OACAC,YA6ERE,sBAxEJ,YAAuD,IAAtBC,EAAsB,EAAtBA,IAAKC,EAAiB,EAAjBA,MAAOC,EAAU,EAAVA,OACzC,MAAO,CACH5C,KAAMC,IAAM4C,wBACZ1C,QAAS,CACLuC,MACAC,QACAC,YAmERE,aA9DJ,YAA6C,IAArBC,EAAqB,EAArBA,kBACpB,MAAO,CACH/C,KAAMC,IAAM+C,eACZ7C,QAAS,CACL4C,uBA2DRE,eAtDJ,YAAqE,IAA3CC,EAA2C,EAA3CA,SAAUC,EAAiC,EAAjCA,eAAgBC,EAAiB,EAAjBA,cAChD,MAAO,CACHpD,KAAMC,IAAMoD,iBACZlD,QAAS,CACL+C,WACAC,iBACAC,mBAiDRE,gBA5CJ,YAA6D,IAAlCC,EAAkC,EAAlCA,YAAaR,EAAqB,EAArBA,kBACpC,MAAO,CACH/C,KAAMC,IAAMuD,kBACZrD,QAAS,CACLoD,cACAR,uBAwCRU,oBAnCJ,SAA6BC,GACzB,MAAO,CACH1D,KAAMC,IAAM0D,sBACZxD,QAASuD,IAiCbE,gBA7BJ,YAAoE,IAAzCC,EAAyC,EAAzCA,cAAeC,EAA0B,EAA1BA,SAAUC,EAAgB,EAAhBA,aAChD,MAAO,CACH/D,KAAMC,IAAM+D,iBACZ7D,QAAS,CACL0D,gBACAC,WACAC,kBAwBRE,gBAnBJ,SAAyBC,GACrB,MAAO,CACHlE,KAAMC,IAAMkE,kBACZhE,QAAS+D,KCrIjB","file":"js/0.6ca5882677063a0af04f.js","sourcesContent":["import api from '../../api';\nimport types from '../types';\n\nfunction composeUpdated(compose) {\n    return {\n        type: types.COMPOSE_UPDATED,\n        payload: { compose },\n    };\n}\n\nexport const composeFailed = (error) => ({\n    type: types.COMPOSE_FAILED,\n    payload: { error }\n});\n\nexport const composeAdded = (compose) => ({\n    type: types.COMPOSE_ADDED,\n    payload: { compose },\n});\n\nexport const composeStart = (composeRequest) => async dispatch => {\n    // response will be of the format {id: ''}\n    const request = api.composeImage(composeRequest);\n    return request.then(response => {\n        // add the compose id to the compose object to provide access to the id if iterating through\n        // composes and add an image status of 'pending' alongside the compose request.\n        const compose = Object.assign({}, response, { request: composeRequest },  { image_status: { status: 'pending' }});\n        dispatch(composeAdded(compose));\n    }).catch(err => {\n        if (err.response.status === 500) {\n            dispatch(composeFailed('Error: Something went wrong serverside'));\n        } else {\n            dispatch(composeFailed('Error: Something went wrong with the compose'));\n        }\n    });\n};\n\nexport const composeUpdatedStatus = (id, status) => ({\n    type: types.COMPOSE_UPDATED_STATUS,\n    payload: { id, status }\n});\n\nexport const composeGetStatus = (id) => async dispatch => {\n    const request = await api.getComposeStatus(id);\n    dispatch(composeUpdatedStatus(id, request.image_status));\n};\n\nexport const composesUpdatedCount = (count) => ({\n    type: types.COMPOSES_UPDATED_COUNT,\n    payload: { count }\n});\n\nexport const composesGet = (limit, offset) => async dispatch => {\n    const request = await api.getComposes(limit, offset);\n    request.data.map(compose => {\n        dispatch(composeAdded(compose));\n        dispatch(composeGetStatus(compose.id));\n    });\n    dispatch(composesUpdatedCount(request.meta.count));\n};\n\nfunction setRelease({ arch, distro }) {\n    return {\n        type: types.SET_RELEASE,\n        payload: {\n            arch,\n            distro,\n        }\n    };\n}\n\nfunction setUploadDestinations({ aws, azure, google }) {\n    return {\n        type: types.SET_UPLOAD_DESTINATIONS,\n        payload: {\n            aws,\n            azure,\n            google,\n        }\n    };\n}\n\nfunction setUploadAWS({ shareWithAccounts }) {\n    return {\n        type: types.SET_UPLOAD_AWS,\n        payload: {\n            shareWithAccounts,\n        }\n    };\n}\n\nfunction setUploadAzure({ tenantId, subscriptionId, resourceGroup }) {\n    return {\n        type: types.SET_UPLOAD_AZURE,\n        payload: {\n            tenantId,\n            subscriptionId,\n            resourceGroup,\n        }\n    };\n}\n\nfunction setUploadGoogle({ accountType, shareWithAccounts }) {\n    return {\n        type: types.SET_UPLOAD_GOOGLE,\n        payload: {\n            accountType,\n            shareWithAccounts,\n        }\n    };\n}\n\nfunction setSelectedPackages(selectedPackages) {\n    return {\n        type: types.SET_SELECTED_PACKAGES,\n        payload: selectedPackages\n    };\n}\n\nfunction setSubscription({ activationKey, insights, organization }) {\n    return {\n        type: types.SET_SUBSCRIPTION,\n        payload: {\n            activationKey,\n            insights,\n            organization,\n        }\n    };\n}\n\nfunction setSubscribeNow(subscribeNow) {\n    return {\n        type: types.SET_SUBSCRIBE_NOW,\n        payload: subscribeNow\n    };\n}\n\nexport default {\n    composesGet,\n    composeStart,\n    composeUpdated,\n    composeGetStatus,\n    setRelease,\n    setUploadDestinations,\n    setUploadAWS,\n    setUploadAzure,\n    setUploadGoogle,\n    setSelectedPackages,\n    setSubscription,\n    setSubscribeNow,\n};\n","export { default as actions } from './actions';\n"],"sourceRoot":""}