{"version":3,"sources":["webpack:///./src/PresentationalComponents/CreateImageWizard/WizardStepReview.scss","webpack:///./src/PresentationalComponents/CreateImageWizard/WizardStepReview.scss?a1e2","webpack:///./src/PresentationalComponents/CreateImageWizard/WizardStepImageOutput.js","webpack:///./src/PresentationalComponents/CreateImageWizard/WizardStepUploadAWS.js","webpack:///./src/PresentationalComponents/CreateImageWizard/WizardStepRegistration.js","webpack:///./src/PresentationalComponents/CreateImageWizard/WizardStepReview.js","webpack:///./src/SmartComponents/CreateImageWizard/CreateImageWizard.js"],"names":["exports","___CSS_LOADER_API_IMPORT___","push","module","i","content","options","transform","undefined","update","locals","hot","accept","newContent","a","b","key","idx","Error","dispose","WizardStepImageOutput","props","Form","Title","headingLevel","size","FormGroup","isRequired","label","fieldId","FormSelect","value","onChange","setRelease","aria-label","id","data-testid","map","option","FormSelectOption","upload","type","setUpload","propTypes","PropTypes","func","string","object","WizardStepUploadAWS","helperTextInvalid","errors","validated","TextInput","share_with_accounts","setUploadOptions","Object","assign","WizardStepRegistration","Radio","name","isChecked","subscribeNow","setSubscribeNow","isDisabled","subscription","organization","setSubscription","bool","WizardStepReview","keys","uploadErrors","length","subscriptionErrors","Alert","variant","className","isInline","title","TextContent","release","aws","entries","error","Fragment","CreateImageWizard","bind","onStep","onSave","onClose","validate","validateUploadAmazon","validateSubscription","state","insights","chrome","auth","getUser","user","this","setState","Number","identity","internal","org_id","step","share","isNaN","uploadOptions","oldState","request","distribution","image_requests","architecture","image_type","upload_requests","customizations","updateCompose","api","composeImage","then","response","compose","status","history","StepImageOutput","component","StepUploadAWS","steps","nextButtonText","Wizard","onNext","onGoToStep","isOpen","Component","connect","dispatch","actions","withRouter"],"mappings":"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","file":"js/8.d2dd52c95f5c13186fe2.js","sourcesContent":["// Imports\nvar ___CSS_LOADER_API_IMPORT___ = require(\"../../../node_modules/css-loader/dist/runtime/api.js\");\nexports = ___CSS_LOADER_API_IMPORT___(false);\n// Module\nexports.push([module.id, \".error{color:var(--pf-global--danger-color--100)}.pf-c-content h3{margin-top:var(--pf-global--spacer--xl);margin-bottom:var(--pf-global--spacer--md)}@media screen and (min-width: 576px){.pf-c-content dl{grid-template:1fr / 25% 1fr;grid-gap:var(--pf-global--spacer--sm)}}\\n\", \"\"]);\n// Exports\nmodule.exports = exports;\n","\nvar content = require(\"!!../../../node_modules/css-loader/dist/cjs.js!../../../node_modules/sass-loader/dist/cjs.js!./WizardStepReview.scss\");\n\nif(typeof content === 'string') content = [[module.id, content, '']];\n\nvar transform;\nvar insertInto;\n\n\n\nvar options = {\"hmr\":true}\n\noptions.transform = transform\noptions.insertInto = undefined;\n\nvar update = require(\"!../../../node_modules/style-loader/lib/addStyles.js\")(content, options);\n\nif(content.locals) module.exports = content.locals;\n\nif(module.hot) {\n\tmodule.hot.accept(\"!!../../../node_modules/css-loader/dist/cjs.js!../../../node_modules/sass-loader/dist/cjs.js!./WizardStepReview.scss\", function() {\n\t\tvar newContent = require(\"!!../../../node_modules/css-loader/dist/cjs.js!../../../node_modules/sass-loader/dist/cjs.js!./WizardStepReview.scss\");\n\n\t\tif(typeof newContent === 'string') newContent = [[module.id, newContent, '']];\n\n\t\tvar locals = (function(a, b) {\n\t\t\tvar key, idx = 0;\n\n\t\t\tfor(key in a) {\n\t\t\t\tif(!b || a[key] !== b[key]) return false;\n\t\t\t\tidx++;\n\t\t\t}\n\n\t\t\tfor(key in b) idx--;\n\n\t\t\treturn idx === 0;\n\t\t}(content.locals, newContent.locals));\n\n\t\tif(!locals) throw new Error('Aborting CSS HMR due to changed css-modules locals.');\n\n\t\tupdate(newContent);\n\t});\n\n\tmodule.hot.dispose(function() { update(); });\n}","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport { Form, FormGroup, FormSelect, FormSelectOption, Title } from '@patternfly/react-core';\n\nconst WizardStepImageOutput = (props) => {\n    const releaseOptions = [\n        { value: 'rhel-8', label: 'Red Hat Enterprise Linux (RHEL) 8.3' },\n    ];\n    const uploadOptions = [\n        { value: 'aws', label: 'Amazon Web Services' },\n    ];\n    return (\n        <Form>\n            <Title headingLevel=\"h2\" size=\"xl\">Image output</Title>\n            <FormGroup isRequired label=\"Release\" fieldId=\"release-select\">\n                <FormSelect value={ props.value } onChange={ value => props.setRelease(value) } isRequired\n                    aria-label=\"Select release input\" id=\"release-select\" data-testid=\"release-select\">\n                    { releaseOptions.map(option => <FormSelectOption key={ option.value } value={ option.value } label={ option.label } />) }\n                </FormSelect>\n            </FormGroup>\n            <FormGroup isRequired label=\"Target environment\" fieldId=\"upload-destination\">\n                <FormSelect value={ props.upload.type || '' } id=\"upload-destination\"\n                    data-testid=\"upload-destination\" isRequired\n                    onChange={ value => props.setUpload({ type: value, options: props.upload.options }) } aria-label=\"Select upload destination\">\n                    { uploadOptions.map(option => <FormSelectOption key={ option.value } value={ option.value } label={ option.label } />) }\n                </FormSelect>\n            </FormGroup>\n        </Form>\n    );\n};\n\nWizardStepImageOutput.propTypes = {\n    setRelease: PropTypes.func,\n    value: PropTypes.string,\n    upload: PropTypes.object,\n    setUpload: PropTypes.func,\n};\n\nexport default WizardStepImageOutput;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport { Form, FormGroup, TextInput, Title } from '@patternfly/react-core';\n\nconst WizardStepUploadAWS = (props) => {\n    return (\n        <Form>\n            <Title headingLevel=\"h2\" size=\"xl\">Upload to AWS</Title>\n            <p>\n            Your image will be uploaded to a temporary account on Amazon Web Services.\n            The image will be shared with the account ID you provide below. <br />\n            Within the next 14 days you will need to copy the shared image to your own account.\n            After 14 days it will be unavailable and will have to be regenerated.\n            </p>\n            <FormGroup isRequired label=\"AWS account ID\" fieldId=\"aws-account-id\"\n                helperTextInvalid={ (props.errors['aws-account-id'] && props.errors['aws-account-id'].value) || '' }\n                validated={ (props.errors['aws-account-id'] && 'error') || 'default' }>\n                <TextInput value={ props.upload.options.share_with_accounts || '' }\n                    type=\"text\" aria-label=\"AWS account ID\" id=\"aws-account-id\"\n                    data-testid=\"aws-account-id\" isRequired\n                    onChange={ value => props.setUploadOptions(Object.assign(props.upload.options, { share_with_accounts: [ value ]})) } />\n            </FormGroup>\n        </Form>\n    );\n};\n\nWizardStepUploadAWS.propTypes = {\n    setUploadOptions: PropTypes.func,\n    upload: PropTypes.object,\n    errors: PropTypes.object,\n};\n\nexport default WizardStepUploadAWS;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport { Form, FormGroup, TextInput, Radio, Title } from '@patternfly/react-core';\n\nconst WizardStepRegistration = (props) => {\n    return (\n        <Form>\n            <Title headingLevel=\"h2\" size=\"xl\">Registration</Title>\n            <FormGroup isRequired label=\"Register the system\">\n                <Radio name=\"subscribe-now-radio\" isChecked={ props.subscribeNow } id=\"subscribe-now-radio\"\n                    label=\"Embed an activation key and register systems on first boot\"\n                    onChange={ () => props.setSubscribeNow(true) }\n                    data-testid=\"register-now-radio-button\" />\n                <Radio name=\"subscribe-later-radio\" isChecked={ !props.subscribeNow }\n                    label=\"Register the system later\" id=\"subscribe-later-radio\"\n                    onChange={ () => props.setSubscribeNow(false) }\n                    data-testid=\"register-later-radio-button\" />\n            </FormGroup>\n            { props.subscribeNow &&\n              <>\n                  <FormGroup label=\"Organization ID\" fieldId=\"subscription-organization\">\n                      <TextInput isDisabled value={ props.subscription.organization || '' } type=\"text\"\n                          id=\"subscription-organization\" aria-label=\"Subscription organization ID\"\n                          data-testid=\"organization-id\" />\n                  </FormGroup>\n                  <FormGroup isRequired label=\"Activation key\" fieldId=\"subscription-activation\"\n                      helperTextInvalid={ (props.errors['subscription-activation'] && props.errors['subscription-activation'].value) || '' }\n                      validated={ (props.errors['subscription-activation'] && 'error') || 'default' }>\n                      <TextInput value={ props.subscription['activation-key'] || '' } type=\"password\"\n                          data-testid=\"subscription-activation\" isRequired\n                          id=\"subscription-activation\" aria-label=\"Subscription activation key\"\n                          onChange={ value => props.setSubscription(Object.assign(props.subscription, { 'activation-key': value })) } />\n                  </FormGroup>\n              </> }\n        </Form>\n    );\n};\n\nWizardStepRegistration.propTypes = {\n    setSubscription: PropTypes.func,\n    setSubscribeNow: PropTypes.func,\n    subscription: PropTypes.object,\n    subscribeNow: PropTypes.bool,\n    errors: PropTypes.object,\n};\n\nexport default WizardStepRegistration;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport { Alert, TextContent, Title } from '@patternfly/react-core';\nimport { ExclamationCircleIcon } from '@patternfly/react-icons';\n\nimport './WizardStepReview.scss';\n\nconst WizardStepReview = (props) => {\n    const releaseOptions = {\n        'rhel-8': 'Red Hat Enterprise Linux (RHEL) 8.3'\n    };\n    const uploadOptions = {\n        aws: 'Amazon Web Services'\n    };\n    return (\n        <>\n            { (Object.keys(props.uploadErrors).length > 0 ||\n               Object.keys(props.subscriptionErrors).length > 0) &&\n              <Alert variant=\"danger\" className=\"pf-u-mb-xl\" isInline title=\"Required information is missing\" /> }\n            <Title headingLevel=\"h2\" size=\"xl\">Create image</Title>\n            <TextContent>\n                <small>\n                    Review the information and click Create image\n                    to create the image using the following criteria.\n                </small>\n                <h3>Image output</h3>\n                <dl>\n                    <dt>\n                        Release\n                    </dt>\n                    <dd>\n                        { releaseOptions[props.release] }\n                    </dd>\n                    <dt>\n                        Target environment\n                    </dt>\n                    <dd>\n                        { props.upload && <>{ uploadOptions[props.upload.type] }</> }\n                    </dd>\n                </dl>\n                { Object.entries(props.uploadErrors).length > 0 && (\n                    <h3>Upload to AWS</h3>\n                )}\n                <dl>\n                    { Object.entries(props.uploadErrors).map(([ key, error ]) => {\n                        return (<React.Fragment key={ key }>\n                            <dt>\n                                { error.label }\n                            </dt>\n                            <dd>\n                                <ExclamationCircleIcon className=\"error\" /> { error.value }\n                            </dd>\n                        </React.Fragment>);\n                    })}\n                </dl>\n                <h3>Registration</h3>\n                <dl>\n                    <dt>\n                        Subscription\n                    </dt>\n                    { !props.subscribeNow &&\n                      <dd>\n                          Register the system later\n                      </dd> }\n                    { props.subscribeNow &&\n                      <dd>\n                          Register the system on first boot\n                      </dd> }\n                    { Object.entries(props.subscriptionErrors).map(([ key, error ]) => {\n                        return (<React.Fragment key={ key }>\n                            <dt>\n                                { error.label }\n                            </dt>\n                            <dd>\n                                <ExclamationCircleIcon className=\"error\" /> { error.value }\n                            </dd>\n                        </React.Fragment>);\n                    })}\n                </dl>\n            </TextContent>\n        </>\n    );\n};\n\nWizardStepReview.propTypes = {\n    release: PropTypes.string,\n    upload: PropTypes.object,\n    subscription: PropTypes.object,\n    subscribeNow: PropTypes.bool,\n    uploadErrors: PropTypes.object,\n    subscriptionErrors: PropTypes.object,\n};\n\nexport default WizardStepReview;\n","import PropTypes from 'prop-types';\nimport React, { Component } from 'react';\nimport { withRouter } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport { actions } from '../redux';\n\nimport { Wizard } from '@patternfly/react-core';\n\nimport WizardStepImageOutput from '../../PresentationalComponents/CreateImageWizard/WizardStepImageOutput';\nimport WizardStepUploadAWS from '../../PresentationalComponents/CreateImageWizard/WizardStepUploadAWS';\nimport WizardStepRegistration from '../../PresentationalComponents/CreateImageWizard/WizardStepRegistration';\nimport WizardStepReview from '../../PresentationalComponents/CreateImageWizard/WizardStepReview';\n\nimport api from './../../api.js';\n\nclass CreateImageWizard extends Component {\n    constructor(props) {\n        super(props);\n\n        this.setRelease = this.setRelease.bind(this);\n        this.setUpload = this.setUpload.bind(this);\n        this.setUploadOptions = this.setUploadOptions.bind(this);\n        this.setSubscription = this.setSubscription.bind(this);\n        this.setSubscribeNow = this.setSubscribeNow.bind(this);\n        this.onStep = this.onStep.bind(this);\n        this.onSave = this.onSave.bind(this);\n        this.onClose = this.onClose.bind(this);\n        this.validate = this.validate.bind(this);\n        this.validateUploadAmazon = this.validateUploadAmazon.bind(this);\n        this.validateSubscription = this.validateSubscription.bind(this);\n\n        this.state = {\n            release: 'rhel-8',\n            upload: {\n                type: 'aws',\n                options: {\n                    share_with_accounts: [],\n                }\n            },\n            subscription: {\n                organization: null,\n                'activation-key': null,\n                'server-url': 'subscription.rhsm.redhat.com',\n                'base-url': 'https://cdn.redhat.com/',\n                insights: true\n            },\n            subscribeNow: true,\n            /* errors take form of $fieldId: error */\n            uploadErrors: {},\n            subscriptionErrors: {},\n        };\n    }\n\n    async componentDidMount() {\n        let user = await insights.chrome.auth.getUser();\n        this.setState({\n            subscription: {\n                organization: Number(user.identity.internal.org_id)\n            }\n        });\n    }\n\n    onStep(step) {\n        if (step.name === 'Review') {\n            this.validate();\n        }\n    }\n\n    validate() {\n        /* upload */\n        if (this.state.upload.type === 'aws') {\n            this.validateUploadAmazon();\n        } else {\n            this.setState({ uploadErrors: {}});\n        }\n\n        /* subscription */\n        if (this.state.subscribeNow) {\n            this.validateSubscription();\n        } else {\n            this.setState({ subscriptionErrors: {}});\n        }\n    }\n\n    validateUploadAmazon() {\n        let uploadErrors = {};\n        let share = this.state.upload.options.share_with_accounts;\n        if (share.length === 0 || share[0].length !== 12 || isNaN(share[0])) {\n            uploadErrors['aws-account-id'] =\n                { label: 'AWS account ID', value: 'A 12-digit number is required' };\n        }\n\n        this.setState({ uploadErrors });\n    }\n\n    validateSubscription() {\n        let subscriptionErrors = {};\n        if (!this.state.subscription['activation-key']) {\n            subscriptionErrors['subscription-activation'] =\n                { label: 'Activation key', value: 'A value is required' };\n        }\n\n        this.setState({ subscriptionErrors });\n    }\n\n    setRelease(release) {\n        this.setState({ release });\n    }\n\n    setUpload(upload) {\n        this.setState({ upload });\n    }\n\n    setUploadOptions(uploadOptions) {\n        this.setState(oldState => {\n            return {\n                upload: {\n                    type: oldState.upload.type,\n                    options: uploadOptions\n                }\n            };\n        });\n    }\n\n    setSubscribeNow(subscribeNow) {\n        this.setState({ subscribeNow });\n    }\n\n    setSubscription(subscription) {\n        this.setState({ subscription }, this.validate);\n    }\n\n    onSave () {\n        let request = {\n            distribution: this.state.release,\n            image_requests: [\n                {\n                    architecture: 'x86_64',\n                    image_type: 'ami',\n                    upload_requests: [{\n                        type: 'aws',\n                        options: {\n                            share_with_accounts: this.state.upload.options.share_with_accounts,\n                        },\n                    }],\n                }],\n            customizations: {\n                subscription: this.state.subscription,\n            },\n        };\n\n        let { updateCompose } = this.props;\n        api.composeImage(request).then(response => {\n            let compose = {};\n            compose[response.id] = {\n                status: 'request sent',\n                distribution: request.distribution,\n                architecture: request.image_requests[0].architecture,\n                image_type: request.image_requests[0].image_type,\n            };\n            updateCompose(compose);\n            this.props.history.push('/landing');\n        });\n    }\n\n    onClose () {\n        this.props.history.push('/landing');\n    }\n\n    render() {\n        const StepImageOutput = {\n            name: 'Image output',\n            component: <WizardStepImageOutput\n                value={ this.state.release }\n                upload={ this.state.upload }\n                setRelease={ this.setRelease }\n                setUpload={ this.setUpload } />\n        };\n        const StepUploadAWS = {\n            name: 'Upload to AWS',\n            component: <WizardStepUploadAWS\n                upload={ this.state.upload }\n                setUploadOptions={ this.setUploadOptions }\n                errors={ this.state.uploadErrors } />\n        };\n\n        const steps = [\n            StepImageOutput,\n            ...(this.state.upload.type === 'aws' ? [ StepUploadAWS ] : []),\n            {\n                name: 'Registration',\n                component: <WizardStepRegistration\n                    subscription={ this.state.subscription }\n                    subscribeNow={ this.state.subscribeNow }\n                    setSubscription={ this.setSubscription }\n                    setSubscribeNow={ this.setSubscribeNow }\n                    errors={ this.state.subscriptionErrors } /> },\n            {\n                name: 'Review',\n                component: <WizardStepReview\n                    release={ this.state.release }\n                    upload={ this.state.upload }\n                    subscription={ this.state.subscription }\n                    subscribeNow={ this.state.subscribeNow }\n                    uploadErrors={ this.state.uploadErrors }\n                    subscriptionErrors={ this.state.subscriptionErrors } />,\n                nextButtonText: 'Create',\n            }\n        ];\n        return (\n            <React.Fragment>\n                <Wizard\n                    title={ 'Create image' }\n                    onNext={ this.onStep }\n                    onGoToStep={ this.onStep }\n                    steps={ steps }\n                    onClose={ this.onClose }\n                    onSave={ this.onSave }\n                    isOpen />\n            </React.Fragment>\n        );\n    }\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        updateCompose: (compose) => dispatch(actions.updateCompose(compose)),\n    };\n}\n\nCreateImageWizard.propTypes = {\n    updateCompose: PropTypes.func,\n    history: PropTypes.object,\n};\n\nexport default connect(null, mapDispatchToProps)(withRouter(CreateImageWizard));\n"],"sourceRoot":""}