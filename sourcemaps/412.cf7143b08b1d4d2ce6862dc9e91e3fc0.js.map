{"version":3,"file":"js/412.1664893992978.d86444fe43ed42f4398d.js","mappings":"6MAkCA,QAzBY,SAACA,GACX,IAAMC,GAAWC,EAAAA,EAAAA,eAgBjB,OAdAC,EAAAA,EAAAA,YAAU,YACSC,EAAAA,EAAAA,MACRC,SAAS,CAAEC,cAAeC,EAAAA,KACnCC,SAASC,MAAQ,mCACjBC,SAASC,OAAOC,OAChBF,SAASC,OAAOE,YAAY,iBAC5B,IAAMC,EAAaJ,SAASC,OAAOI,GAAG,kBAAkB,SAACC,GAAD,OACtDf,EAAS,IAAD,OAAKe,EAAMC,OADmC,IAGxD,OAAO,WACLH,GACD,CACF,GAAE,IAGD,kBAAC,aAAD,KACE,kBAAC,KAAD,MACA,kBAAC,IAAD,CAAQI,WAAYlB,IAGzB,C,+HCjBD,QARqB,kBACnB,kBAAC,KAAD,CAAUmB,MAAOA,EAAAA,GACf,kBAAC,gBAAD,CAAQC,UAAUC,EAAAA,EAAAA,IAAYC,OAAOC,SAASC,WAC5C,kBAAC,IAAD,OAHe,C,sECJfC,GAAcC,EAAAA,EAAAA,OAAK,kBAAM,4DAAN,IACnBC,GAAoBD,EAAAA,EAAAA,OAAK,kBAC7B,qEAD6B,IAIlBE,EAAS,WACpB,OACE,kBAAC,EAAAC,OAAD,KACE,kBAAC,EAAAC,MAAD,CAAOC,KAAK,iBAAiBC,QAAS,kBAACL,EAAD,QACtC,kBAAC,EAAAG,MAAD,CAAOC,KAAK,IAAIC,QAAS,kBAACP,EAAD,QAG9B,C,mECNKQ,GAAgBC,E,SAAAA,IAAY,CAChCC,KAAM,WACNC,aATmB,CACnBC,MAAO,EACPC,OAAQ,GACRC,KAAM,CAAC,EACPC,MAAO,MAMPC,SAAU,CACRC,aAAc,SAACC,EAAOC,GAEfD,EAAML,OAAOO,SAASD,EAAOE,QAAQC,QAAQC,MAC5CJ,EAAOE,QAAQG,OACjBN,EAAML,OAAOY,QAAQN,EAAOE,QAAQC,QAAQC,IAE5CL,EAAML,OAAOa,KAAKP,EAAOE,QAAQC,QAAQC,KAG7CL,EAAMJ,KAAKK,EAAOE,QAAQC,QAAQC,IAAMJ,EAAOE,QAAQC,QACvDJ,EAAMH,MAAQ,IACf,EACDY,qBAAsB,SAACT,EAAOC,GAC5BD,EAAMN,MAAQO,EAAOE,QAAQT,KAC9B,EACDgB,qBAAsB,SAACV,EAAOC,GAC5BD,EAAMJ,KAAKK,EAAOE,QAAQE,IAAIM,aAAeV,EAAOE,QAAQS,MAC7D,KAIE,EACLtB,EAAcuB,QADDd,EAAR,EAAQA,aAAcU,EAAtB,EAAsBA,qBAAsBC,EAA5C,EAA4CA,qBAEnD,QAAepB,EAAf,O,iFC/BawB,EAAU,CACrBC,S,SAAUzB,GACV3B,cAAeC,EAAAA,IAMJY,GAAQwC,EAAAA,EAAAA,IAAe,CAAEF,QAAAA,EAASG,WAHrB,SAACC,GAAD,OACxBA,IAAuBC,OAAOC,IADN,G","sources":["webpack:///./src/App.js","webpack:///./src/AppEntry.js","webpack:///./src/Router.js","webpack:///./src/store/composesSlice.js","webpack:///./src/store/index.js"],"sourcesContent":["import React, { useEffect } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport '@patternfly/patternfly/patternfly-addons.css';\n\nimport { getRegistry } from '@redhat-cloud-services/frontend-components-utilities/Registry';\nimport NotificationsPortal from '@redhat-cloud-services/frontend-components-notifications/NotificationPortal';\nimport { notificationsReducer } from '@redhat-cloud-services/frontend-components-notifications/redux';\nimport { Router } from './Router';\n\nconst App = (props) => {\n  const navigate = useNavigate();\n\n  useEffect(() => {\n    const registry = getRegistry();\n    registry.register({ notifications: notificationsReducer });\n    document.title = 'Image Builder | Red Hat Insights';\n    insights.chrome.init();\n    insights.chrome.identifyApp('image-builder');\n    const unregister = insights.chrome.on('APP_NAVIGATION', (event) =>\n      navigate(`/${event.navId}`)\n    );\n    return () => {\n      unregister();\n    };\n  }, []);\n\n  return (\n    <React.Fragment>\n      <NotificationsPortal />\n      <Router childProps={props} />\n    </React.Fragment>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport { BrowserRouter as Router } from 'react-router-dom';\nimport { Provider } from 'react-redux';\nimport { getBaseName } from '@redhat-cloud-services/frontend-components-utilities/helpers';\nimport App from './App';\nimport { store } from './store';\n\nconst ImageBuilder = () => (\n  <Provider store={store}>\n    <Router basename={getBaseName(window.location.pathname)}>\n      <App />\n    </Router>\n  </Provider>\n);\n\nexport default ImageBuilder;\n","import React, { lazy } from 'react';\nimport { Route, Routes } from 'react-router-dom';\n\nconst LandingPage = lazy(() => import('./Components/LandingPage/LandingPage'));\nconst CreateImageWizard = lazy(() =>\n  import('./Components/CreateImageWizard/CreateImageWizard')\n);\n\nexport const Router = () => {\n  return (\n    <Routes>\n      <Route path=\"/imagewizard/*\" element={<CreateImageWizard />} />\n      <Route path=\"*\" element={<LandingPage />} />\n    </Routes>\n  );\n};\n","import { createSlice } from '@reduxjs/toolkit';\n\nconst initialState = {\n  count: 0,\n  allIds: [],\n  byId: {},\n  error: null,\n};\n\nconst composesSlice = createSlice({\n  name: 'composes',\n  initialState,\n  reducers: {\n    composeAdded: (state, action) => {\n      // only add to array if compose does not exist\n      if (!state.allIds.includes(action.payload.compose.id)) {\n        if (action.payload.insert) {\n          state.allIds.unshift(action.payload.compose.id);\n        } else {\n          state.allIds.push(action.payload.compose.id);\n        }\n      }\n      state.byId[action.payload.compose.id] = action.payload.compose;\n      state.error = null;\n    },\n    composesUpdatedCount: (state, action) => {\n      state.count = action.payload.count;\n    },\n    composeUpdatedStatus: (state, action) => {\n      state.byId[action.payload.id].image_status = action.payload.status;\n    },\n  },\n});\n\nexport const { composeAdded, composesUpdatedCount, composeUpdatedStatus } =\n  composesSlice.actions;\nexport default composesSlice.reducer;\n","import { configureStore } from '@reduxjs/toolkit';\nimport promiseMiddleware from 'redux-promise-middleware';\nimport { notificationsReducer } from '@redhat-cloud-services/frontend-components-notifications/redux';\nimport composesSlice from './composesSlice';\n\nexport const reducer = {\n  composes: composesSlice,\n  notifications: notificationsReducer,\n};\n\nexport const middleware = (getDefaultMiddleware) =>\n  getDefaultMiddleware().concat(promiseMiddleware);\n\nexport const store = configureStore({ reducer, middleware });\n"],"names":["props","navigate","useNavigate","useEffect","getRegistry","register","notifications","notificationsReducer","document","title","insights","chrome","init","identifyApp","unregister","on","event","navId","childProps","store","basename","getBaseName","window","location","pathname","LandingPage","lazy","CreateImageWizard","Router","Routes","Route","path","element","composesSlice","createSlice","name","initialState","count","allIds","byId","error","reducers","composeAdded","state","action","includes","payload","compose","id","insert","unshift","push","composesUpdatedCount","composeUpdatedStatus","image_status","status","actions","reducer","composes","configureStore","middleware","getDefaultMiddleware","concat","promiseMiddleware"],"sourceRoot":""}