{"version":3,"sources":["webpack:///./src/PresentationalComponents/CreateImageWizard/WizardStepReview.scss","webpack:///./src/PresentationalComponents/CreateImageWizard/WizardStepReview.scss?a1e2","webpack:///./src/PresentationalComponents/CreateImageWizard/WizardStepImageOutput.js","webpack:///./src/PresentationalComponents/CreateImageWizard/WizardStepUploadAWS.js","webpack:///./src/PresentationalComponents/CreateImageWizard/WizardStepRegistration.js","webpack:///./src/PresentationalComponents/CreateImageWizard/WizardStepReview.js","webpack:///./src/SmartComponents/CreateImageWizard/CreateImageWizard.js"],"names":["exports","___CSS_LOADER_API_IMPORT___","push","module","i","content","options","transform","undefined","update","locals","hot","accept","newContent","a","b","key","idx","Error","dispose","WizardStepImageOutput","props","Form","Title","headingLevel","size","FormGroup","isRequired","label","fieldId","FormSelect","value","onChange","setRelease","aria-label","id","data-testid","map","option","FormSelectOption","upload","type","setUpload","propTypes","PropTypes","func","string","object","WizardStepUploadAWS","helperTextInvalid","errors","validated","TextInput","access_key_id","setUploadOptions","Object","assign","secret_access_key","service","region","bucket","WizardStepRegistration","Radio","name","isChecked","subscribeNow","setSubscribeNow","isDisabled","subscription","organization","setSubscription","bool","WizardStepReview","keys","uploadErrors","length","subscriptionErrors","Alert","variant","className","isInline","title","TextContent","release","aws","entries","error","Fragment","CreateImageWizard","bind","onStep","onSave","onClose","validate","validateUploadAmazon","validateSubscription","state","insights","chrome","auth","getUser","user","this","setState","Number","identity","internal","org_id","step","uploadOptions","oldState","request","distribution","image_requests","architecture","image_type","upload_requests","s3","ec2","customizations","updateCompose","api","composeImage","then","response","compose","status","history","StepImageOutput","component","StepUploadAWS","steps","nextButtonText","Stack","StackItem","isFilled","Wizard","onNext","onGoToStep","isInPage","Component","connect","dispatch","actions","withRouter"],"mappings":"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","file":"js/8.16918597c0ef177a975a.js","sourcesContent":["// Imports\nvar ___CSS_LOADER_API_IMPORT___ = require(\"../../../node_modules/css-loader/dist/runtime/api.js\");\nexports = ___CSS_LOADER_API_IMPORT___(false);\n// Module\nexports.push([module.id, \".error{color:var(--pf-global--danger-color--100)}.pf-c-content h3{margin-top:var(--pf-global--spacer--xl);margin-bottom:var(--pf-global--spacer--md)}@media screen and (min-width: 576px){.pf-c-content dl{grid-template:1fr / 25% 1fr;grid-gap:var(--pf-global--spacer--sm)}}\\n\", \"\"]);\n// Exports\nmodule.exports = exports;\n","\nvar content = require(\"!!../../../node_modules/css-loader/dist/cjs.js!../../../node_modules/sass-loader/dist/cjs.js!./WizardStepReview.scss\");\n\nif(typeof content === 'string') content = [[module.id, content, '']];\n\nvar transform;\nvar insertInto;\n\n\n\nvar options = {\"hmr\":true}\n\noptions.transform = transform\noptions.insertInto = undefined;\n\nvar update = require(\"!../../../node_modules/style-loader/lib/addStyles.js\")(content, options);\n\nif(content.locals) module.exports = content.locals;\n\nif(module.hot) {\n\tmodule.hot.accept(\"!!../../../node_modules/css-loader/dist/cjs.js!../../../node_modules/sass-loader/dist/cjs.js!./WizardStepReview.scss\", function() {\n\t\tvar newContent = require(\"!!../../../node_modules/css-loader/dist/cjs.js!../../../node_modules/sass-loader/dist/cjs.js!./WizardStepReview.scss\");\n\n\t\tif(typeof newContent === 'string') newContent = [[module.id, newContent, '']];\n\n\t\tvar locals = (function(a, b) {\n\t\t\tvar key, idx = 0;\n\n\t\t\tfor(key in a) {\n\t\t\t\tif(!b || a[key] !== b[key]) return false;\n\t\t\t\tidx++;\n\t\t\t}\n\n\t\t\tfor(key in b) idx--;\n\n\t\t\treturn idx === 0;\n\t\t}(content.locals, newContent.locals));\n\n\t\tif(!locals) throw new Error('Aborting CSS HMR due to changed css-modules locals.');\n\n\t\tupdate(newContent);\n\t});\n\n\tmodule.hot.dispose(function() { update(); });\n}","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport { Form, FormGroup, FormSelect, FormSelectOption, Title } from '@patternfly/react-core';\n\nconst WizardStepImageOutput = (props) => {\n    const releaseOptions = [\n        { value: 'rhel-8', label: 'Red Hat Enterprise Linux (RHEL) 8.3' },\n    ];\n    const uploadOptions = [\n        { value: 'aws', label: 'Amazon Web Services' },\n    ];\n    return (\n        <Form>\n            <Title headingLevel=\"h2\" size=\"xl\">Image output</Title>\n            <FormGroup isRequired label=\"Release\" fieldId=\"release-select\">\n                <FormSelect value={ props.value } onChange={ value => props.setRelease(value) } isRequired\n                    aria-label=\"Select release input\" id=\"release-select\" data-testid=\"release-select\">\n                    { releaseOptions.map(option => <FormSelectOption key={ option.value } value={ option.value } label={ option.label } />) }\n                </FormSelect>\n            </FormGroup>\n            <FormGroup isRequired label=\"Target environment\" fieldId=\"upload-destination\">\n                <FormSelect value={ props.upload.type || '' } id=\"upload-destination\"\n                    data-testid=\"upload-destination\" isRequired\n                    onChange={ value => props.setUpload({ type: value, options: props.upload.options }) } aria-label=\"Select upload destination\">\n                    { uploadOptions.map(option => <FormSelectOption key={ option.value } value={ option.value } label={ option.label } />) }\n                </FormSelect>\n            </FormGroup>\n        </Form>\n    );\n};\n\nWizardStepImageOutput.propTypes = {\n    setRelease: PropTypes.func,\n    value: PropTypes.string,\n    upload: PropTypes.object,\n    setUpload: PropTypes.func,\n};\n\nexport default WizardStepImageOutput;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport { Form, FormGroup, FormSelect, TextInput, FormSelectOption, Title } from '@patternfly/react-core';\n\nconst WizardStepUploadAWS = (props) => {\n    const serviceOptions = [\n        { value: 'ec2', label: 'Amazon Elastic Compute Cloud (ec2)' },\n        { value: 's3', label: 'Amazon Simple Storage Service (s3)' },\n    ];\n\n    return (\n        <Form>\n            <Title headingLevel=\"h2\" size=\"xl\">Upload to AWS</Title>\n            <FormGroup isRequired label=\"Access key ID\" fieldId=\"amazon-access-id\"\n                helperTextInvalid={ (props.errors['amazon-access-id'] && props.errors['amazon-access-id'].value) || '' }\n                validated={ (props.errors['amazon-access-id'] && 'error') || 'default' }>\n                <TextInput value={ props.upload.options.access_key_id || '' }\n                    type=\"text\" aria-label=\"amazon access key ID\" id=\"amazon-access-id\"\n                    data-testid=\"aws-access-key\" isRequired\n                    onChange={ value => props.setUploadOptions(Object.assign(props.upload.options, { access_key_id: value })) } />\n            </FormGroup>\n            <FormGroup isRequired label=\"Secret access key\" fieldId=\"amazon-access-secret\"\n                helperTextInvalid={ (props.errors['amazon-access-secret'] && props.errors['amazon-access-secret'].value)  || '' }\n                validated={ (props.errors['amazon-access-secret'] && 'error') || 'default' }>\n                <TextInput value={ props.upload.options.secret_access_key || '' }\n                    data-testid=\"aws-secret-access-key\" isRequired\n                    type=\"password\" aria-label=\"amazon secret access key\" id=\"amazon-access-secret\"\n                    onChange={ value => props.setUploadOptions(Object.assign(props.upload.options, { secret_access_key: value })) } />\n            </FormGroup>\n            <FormGroup isRequired label=\"Service\" fieldId=\"amazon-service\">\n                <FormSelect value={ props.upload.options.service } aria-label=\"Select amazon service\" id=\"amazon-service\"\n                    data-testid=\"aws-service-select\"\n                    onChange={ value => props.setUploadOptions(Object.assign(props.upload.options, { service: value })) }>\n                    { serviceOptions.map(option => <FormSelectOption key={ option.value } value={ option.value } label={ option.label } />) }\n                </FormSelect>\n            </FormGroup>\n            <FormGroup isRequired label=\"Region\" fieldId=\"amazon-region\"\n                helperTextInvalid={ (props.errors['amazon-region'] && props.errors['amazon-region'].value) || '' }\n                validated={ (props.errors['amazon-region'] && 'error') || 'default' }>\n                <TextInput value={ props.upload.options.region } type=\"text\" aria-label=\"amazon region\" id=\"amazon-region\"\n                    data-testid=\"aws-region\" isRequired\n                    onChange={ value => props.setUploadOptions(Object.assign(props.upload.options, { region: value })) } />\n            </FormGroup>\n            { props.upload.options.service === 's3' &&\n              <FormGroup isRequired label=\"Bucket\" fieldId=\"amazon-bucket\"\n                  helperTextInvalid={ (props.errors['amazon-bucket'] && props.errors['amazon-bucket'].value) || '' }\n                  validated={ (props.errors['amazon-bucket'] && 'error') || 'default' }>\n                  <TextInput value={ props.upload.options.bucket || '' } type=\"text\" aria-label=\"amazon bucket\" id=\"amazon-bucket\"\n                      data-testid=\"aws-bucket\" isRequired\n                      onChange={ value => props.setUploadOptions(Object.assign(props.upload.options, { bucket: value })) } />\n              </FormGroup> }\n        </Form>\n    );\n};\n\nWizardStepUploadAWS.propTypes = {\n    setUploadOptions: PropTypes.func,\n    upload: PropTypes.object,\n    errors: PropTypes.object,\n};\n\nexport default WizardStepUploadAWS;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport { Form, FormGroup, TextInput, Radio, Title } from '@patternfly/react-core';\n\nconst WizardStepRegistration = (props) => {\n    return (\n        <Form>\n            <Title headingLevel=\"h2\" size=\"xl\">Registration</Title>\n            <FormGroup isRequired label=\"Register the system\">\n                <Radio name=\"subscribe-now-radio\" isChecked={ props.subscribeNow } id=\"subscribe-now-radio\"\n                    label=\"Embed an activation key and register systems on first boot\"\n                    onChange={ () => props.setSubscribeNow(true) }\n                    data-testid=\"register-now-radio-button\" />\n                <Radio name=\"subscribe-later-radio\" isChecked={ !props.subscribeNow }\n                    label=\"Register the system later\" id=\"subscribe-later-radio\"\n                    onChange={ () => props.setSubscribeNow(false) }\n                    data-testid=\"register-later-radio-button\" />\n            </FormGroup>\n            { props.subscribeNow &&\n              <>\n                  <FormGroup label=\"Organization ID\" fieldId=\"subscription-organization\">\n                      <TextInput isDisabled value={ props.subscription.organization || '' } type=\"text\"\n                          id=\"subscription-organization\" aria-label=\"Subscription organization ID\"\n                          data-testid=\"organization-id\" />\n                  </FormGroup>\n                  <FormGroup isRequired label=\"Activation key\" fieldId=\"subscription-activation\"\n                      helperTextInvalid={ (props.errors['subscription-activation'] && props.errors['subscription-activation'].value) || '' }\n                      validated={ (props.errors['subscription-activation'] && 'error') || 'default' }>\n                      <TextInput value={ props.subscription['activation-key'] || '' } type=\"password\"\n                          data-testid=\"subscription-activation\" isRequired\n                          id=\"subscription-activation\" aria-label=\"Subscription activation key\"\n                          onChange={ value => props.setSubscription(Object.assign(props.subscription, { 'activation-key': value })) } />\n                  </FormGroup>\n              </> }\n        </Form>\n    );\n};\n\nWizardStepRegistration.propTypes = {\n    setSubscription: PropTypes.func,\n    setSubscribeNow: PropTypes.func,\n    subscription: PropTypes.object,\n    subscribeNow: PropTypes.bool,\n    errors: PropTypes.object,\n};\n\nexport default WizardStepRegistration;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport { Alert, TextContent, Title } from '@patternfly/react-core';\nimport { ExclamationCircleIcon } from '@patternfly/react-icons';\n\nimport './WizardStepReview.scss';\n\nconst WizardStepReview = (props) => {\n    const releaseOptions = {\n        'rhel-8': 'Red Hat Enterprise Linux (RHEL) 8.3'\n    };\n    const uploadOptions = {\n        aws: 'Amazon Web Services'\n    };\n    return (\n        <>\n            { (Object.keys(props.uploadErrors).length > 0 ||\n               Object.keys(props.subscriptionErrors).length > 0) &&\n              <Alert variant=\"danger\" className=\"pf-u-mb-xl\" isInline title=\"Required information is missing\" /> }\n            <Title headingLevel=\"h2\" size=\"xl\">Create image</Title>\n            <TextContent>\n                <small>\n                    Review the information and click Create image\n                    to create the image using the following criteria.\n                </small>\n                <h3>Image output</h3>\n                <dl>\n                    <dt>\n                        Release\n                    </dt>\n                    <dd>\n                        { releaseOptions[props.release] }\n                    </dd>\n                    <dt>\n                        Target environment\n                    </dt>\n                    <dd>\n                        { props.upload && <>{ uploadOptions[props.upload.type] }</> }\n                    </dd>\n                </dl>\n                { Object.entries(props.uploadErrors).length > 0 && (\n                    <h3>Upload to AWS</h3>\n                )}\n                <dl>\n                    { Object.entries(props.uploadErrors).map(([ key, error ]) => {\n                        return (<React.Fragment key={ key }>\n                            <dt>\n                                { error.label }\n                            </dt>\n                            <dd>\n                                <ExclamationCircleIcon className=\"error\" /> { error.value }\n                            </dd>\n                        </React.Fragment>);\n                    })}\n                </dl>\n                <h3>Registration</h3>\n                <dl>\n                    <dt>\n                        Subscription\n                    </dt>\n                    { !props.subscribeNow &&\n                      <dd>\n                          Register the system later\n                      </dd> }\n                    { props.subscribeNow &&\n                      <dd>\n                          Register the system on first boot\n                      </dd> }\n                    { Object.entries(props.subscriptionErrors).map(([ key, error ]) => {\n                        return (<React.Fragment key={ key }>\n                            <dt>\n                                { error.label }\n                            </dt>\n                            <dd>\n                                <ExclamationCircleIcon className=\"error\" /> { error.value }\n                            </dd>\n                        </React.Fragment>);\n                    })}\n                </dl>\n            </TextContent>\n        </>\n    );\n};\n\nWizardStepReview.propTypes = {\n    release: PropTypes.string,\n    upload: PropTypes.object,\n    subscription: PropTypes.object,\n    subscribeNow: PropTypes.bool,\n    uploadErrors: PropTypes.object,\n    subscriptionErrors: PropTypes.object,\n};\n\nexport default WizardStepReview;\n","import PropTypes from 'prop-types';\nimport React, { Component } from 'react';\nimport { withRouter } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport { actions } from '../redux';\nimport { PageHeader, PageHeaderTitle } from '@redhat-cloud-services/frontend-components';\n\nimport { Wizard, Stack, StackItem } from '@patternfly/react-core';\n\nimport WizardStepImageOutput from '../../PresentationalComponents/CreateImageWizard/WizardStepImageOutput';\nimport WizardStepUploadAWS from '../../PresentationalComponents/CreateImageWizard/WizardStepUploadAWS';\nimport WizardStepRegistration from '../../PresentationalComponents/CreateImageWizard/WizardStepRegistration';\nimport WizardStepReview from '../../PresentationalComponents/CreateImageWizard/WizardStepReview';\n\nimport api from './../../api.js';\n\nclass CreateImageWizard extends Component {\n    constructor(props) {\n        super(props);\n\n        this.setRelease = this.setRelease.bind(this);\n        this.setUpload = this.setUpload.bind(this);\n        this.setUploadOptions = this.setUploadOptions.bind(this);\n        this.setSubscription = this.setSubscription.bind(this);\n        this.setSubscribeNow = this.setSubscribeNow.bind(this);\n        this.onStep = this.onStep.bind(this);\n        this.onSave = this.onSave.bind(this);\n        this.onClose = this.onClose.bind(this);\n        this.validate = this.validate.bind(this);\n        this.validateUploadAmazon = this.validateUploadAmazon.bind(this);\n        this.validateSubscription = this.validateSubscription.bind(this);\n\n        this.state = {\n            release: 'rhel-8',\n            upload: {\n                type: 'aws',\n                options: {\n                    service: 'ec2',\n                    region: 'eu-west-2',\n                    access_key_id: null,\n                    secret_access_key: null,\n                    bucket: null,\n                }\n            },\n            subscription: {\n                organization: null,\n                'activation-key': null,\n                'server-url': 'subscription.rhsm.redhat.com',\n                'base-url': 'https://cdn.redhat.com/',\n                insights: true\n            },\n            subscribeNow: true,\n            /* errors take form of $fieldId: error */\n            uploadErrors: {},\n            subscriptionErrors: {},\n        };\n    }\n\n    async componentDidMount() {\n        let user = await insights.chrome.auth.getUser();\n        this.setState({\n            subscription: {\n                organization: Number(user.identity.internal.org_id)\n            }\n        });\n    }\n\n    onStep(step) {\n        if (step.name === 'Review') {\n            this.validate();\n        }\n    }\n\n    validate() {\n        /* upload */\n        if (this.state.upload.type === 'aws') {\n            this.validateUploadAmazon();\n        } else {\n            this.setState({ uploadErrors: {}});\n        }\n\n        /* subscription */\n        if (this.state.subscribeNow) {\n            this.validateSubscription();\n        } else {\n            this.setState({ subscriptionErrors: {}});\n        }\n    }\n\n    validateUploadAmazon() {\n        let uploadErrors = {};\n        if (!this.state.upload.options.access_key_id) {\n            uploadErrors['amazon-access-id'] =\n                { label: 'Access key ID', value: 'A value is required' };\n        }\n\n        if (!this.state.upload.options.secret_access_key) {\n            uploadErrors['amazon-access-secret'] =\n                { label: 'Secret access key', value: 'A value is required' };\n        }\n\n        if (!this.state.upload.options.region) {\n            uploadErrors['amazon-region'] =\n                { label: 'Region', value: 'A value is required' };\n        }\n\n        if (this.state.upload.options.service === 's3' &&\n            !this.state.upload.options.bucket) {\n            uploadErrors['amazon-bucket'] =\n                { label: 'Bucket', value: 'A value is required' };\n        }\n\n        this.setState({ uploadErrors });\n    }\n\n    validateSubscription() {\n        let subscriptionErrors = {};\n        if (!this.state.subscription['activation-key']) {\n            subscriptionErrors['subscription-activation'] =\n                { label: 'Activation key', value: 'A value is required' };\n        }\n\n        this.setState({ subscriptionErrors });\n    }\n\n    setRelease(release) {\n        this.setState({ release });\n    }\n\n    setUpload(upload) {\n        this.setState({ upload });\n    }\n\n    setUploadOptions(uploadOptions) {\n        this.setState(oldState => {\n            return {\n                upload: {\n                    type: oldState.upload.type,\n                    options: uploadOptions\n                }\n            };\n        });\n    }\n\n    setSubscribeNow(subscribeNow) {\n        this.setState({ subscribeNow });\n    }\n\n    setSubscription(subscription) {\n        this.setState({ subscription }, this.validate);\n    }\n\n    onSave () {\n        let request = {\n            distribution: this.state.release,\n            image_requests: [\n                {\n                    architecture: 'x86_64',\n                    image_type: 'qcow2',\n                    upload_requests: [{\n                        type: 'aws',\n                        options: {\n                            region: this.state.upload.options.region,\n                            s3: {\n                                access_key_id: this.state.upload.options.access_key_id,\n                                secret_access_key: this.state.upload.options.secret_access_key,\n                                bucket: this.state.upload.options.bucket,\n                            },\n                            ec2: {\n                                access_key_id: this.state.upload.options.access_key_id,\n                                secret_access_key: this.state.upload.options.secret_access_key,\n                            },\n                        },\n                    }],\n                }],\n            customizations: {\n                subscription: this.state.subscription,\n            },\n        };\n\n        let { updateCompose } = this.props;\n        api.composeImage(request).then(response => {\n            let compose = {};\n            compose[response.id] = {\n                status: 'request sent',\n                distribution: request.distribution,\n                architecture: request.image_requests[0].architecture,\n                image_type: request.image_requests[0].image_type,\n            };\n            updateCompose(compose);\n            this.props.history.push('/landing');\n        });\n    }\n\n    onClose () {\n        this.props.history.push('/landing');\n    }\n\n    render() {\n        const StepImageOutput = {\n            name: 'Image output',\n            component: <WizardStepImageOutput\n                value={ this.state.release }\n                upload={ this.state.upload }\n                setRelease={ this.setRelease }\n                setUpload={ this.setUpload } />\n        };\n        const StepUploadAWS = {\n            name: 'Upload to AWS',\n            component: <WizardStepUploadAWS\n                upload={ this.state.upload }\n                setUploadOptions={ this.setUploadOptions }\n                errors={ this.state.uploadErrors } />\n        };\n\n        const steps = [\n            StepImageOutput,\n            ...(this.state.upload.type === 'aws' ? [ StepUploadAWS ] : []),\n            {\n                name: 'Registration',\n                component: <WizardStepRegistration\n                    subscription={ this.state.subscription }\n                    subscribeNow={ this.state.subscribeNow }\n                    setSubscription={ this.setSubscription }\n                    setSubscribeNow={ this.setSubscribeNow }\n                    errors={ this.state.subscriptionErrors } /> },\n            {\n                name: 'Review',\n                component: <WizardStepReview\n                    release={ this.state.release }\n                    upload={ this.state.upload }\n                    subscription={ this.state.subscription }\n                    subscribeNow={ this.state.subscribeNow }\n                    uploadErrors={ this.state.uploadErrors }\n                    subscriptionErrors={ this.state.subscriptionErrors } />,\n                nextButtonText: 'Create',\n            }\n        ];\n\n        return (\n            <Stack className=\"pf-u-h-100\">\n                <StackItem>\n                    <PageHeader>\n                        <PageHeaderTitle title='Create a new image' />\n                    </PageHeader>\n                </StackItem>\n                <StackItem isFilled>\n                    <Wizard\n                        onNext={ this.onStep }\n                        onGoToStep={ this.onStep }\n                        isInPage\n                        steps={ steps }\n                        onClose={ this.onClose }\n                        onSave={ this.onSave } />\n                </StackItem>\n            </Stack>\n        );\n    }\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        updateCompose: (compose) => dispatch(actions.updateCompose(compose)),\n    };\n}\n\nCreateImageWizard.propTypes = {\n    updateCompose: PropTypes.func,\n    history: PropTypes.object,\n};\n\nexport default connect(null, mapDispatchToProps)(withRouter(CreateImageWizard));\n"],"sourceRoot":""}