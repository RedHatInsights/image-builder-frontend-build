{"version":3,"file":"js/189.1646059061138.5032cbbe8040cf7f56f1.js","mappings":"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","sources":["webpack:///./src/store/reducers/composes.js","webpack:///./src/store/index.js","webpack:///./src/Router.js","webpack:///./src/App.js","webpack:///./src/AppEntry.js","webpack:///./src/bootstrap.js","webpack:///./src/store/types.js"],"sourcesContent":["import types from '../types';\n\n// Example of action.compose\n// {\n//     \"77e4c693-0497-4b85-936d-b2a3ad69571b\": {\n//         created_at: \"2021-04-21 11:20:46.927594 +0000 UTC\",\n//         id: \"77e4c693-0497-4b85-936d-b2a3ad69571b\",\n//         request: {\n//             distribution: \"rhel-8\",\n//             image_requests: [\n//                 {\n//                     architecture: \"x86_64\",\n//                     image_type: \"ami\",\n//                     upload_request: {\n//                         type: \"aws\",\n//                         options: {}\n//                     }\n//                 }\n//             ]\n//         },\n//         image_status: {\n//             status: \"uploading\",\n//         },\n//     }\n// };\n\nconst initialComposesState = {\n    count: 0,\n    allIds: [],\n    byId: {},\n    error: null,\n};\n\n// only add to array if compose does not exist\nconst updateAllIds = (allIds, id, insert) => {\n    if (allIds.includes(id)) {\n        return allIds;\n    }\n\n    if (insert) {\n        return [ id ].concat(allIds);\n    }\n\n    return allIds.concat(id);\n};\n\nexport function composes(state = initialComposesState, action) {\n    switch (action.type) {\n        case types.COMPOSE_ADDED:\n            return {\n                ...state,\n                allIds: updateAllIds(state.allIds, action.payload.compose.id, action.payload.insert),\n                byId: {\n                    ...state.byId,\n                    [action.payload.compose.id]: action.payload.compose,\n                },\n                error: null,\n            };\n        case types.COMPOSE_FAILED:\n            return {\n                ...state,\n                error: action.payload.error,\n            };\n        case types.COMPOSE_PENDING:\n            return {\n                ...state,\n                error: null,\n            };\n        case types.COMPOSE_UPDATED:\n            return {\n                ...state,\n                byId: {\n                    ...state.byId,\n                    [action.payload.compose.id]: action.payload.compose,\n                }\n            };\n        case types.COMPOSES_UPDATED_COUNT:\n            return {\n                ...state,\n                count: action.payload.count,\n            };\n        case types.COMPOSE_UPDATED_STATUS:\n            return {\n                ...state,\n                byId: {\n                    ...state.byId,\n                    [action.payload.id]: {\n                        ...state.byId[action.payload.id],\n                        image_status: action.payload.status,\n                    }\n                }\n            };\n        default:\n            return state;\n    }\n}\n\nexport default composes;\n","import { ReducerRegistry } from '@redhat-cloud-services/frontend-components-utilities/ReducerRegistry';\nimport promiseMiddleware from 'redux-promise-middleware';\nimport thunk from 'redux-thunk';\nimport { notificationsReducer } from '@redhat-cloud-services/frontend-components-notifications/redux';\n\nimport composes from './reducers/composes';\n\nlet registry;\n\nexport function init (store = {}, ...middleware) {\n    if (!registry) {\n        registry = new ReducerRegistry(store, [\n            promiseMiddleware,\n            thunk,\n            ...middleware.filter(item => typeof item !== 'undefined'),\n        ]);\n\n        registry.register({\n            composes,\n            notifications: notificationsReducer,\n        });\n    }\n\n    return registry;\n}\n\nexport function getStore () {\n    return registry.getStore();\n}\n\nexport function register (...args) {\n    return registry.register(...args);\n}\n\n/* added for testing purposes only */\nexport function clearStore() {\n    registry = undefined;\n}\n","import React, { lazy } from 'react';\nimport { Route, Routes } from 'react-router-dom';\n\nconst LandingPage = lazy(() => import('./Components/LandingPage/LandingPage'));\nconst CreateImageWizard = lazy(() => import('./Components/CreateImageWizard/CreateImageWizard'));\n\nexport const Router = () => {\n    return (\n        <Routes>\n            <Route path='/imagewizard/*' element={ <CreateImageWizard /> } />\n            <Route path='*' element={ <LandingPage /> } />\n        </Routes>\n    );\n};\n","import React, { useEffect } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { Router } from './Router';\nimport '@patternfly/patternfly/patternfly-addons.css';\nimport './App.scss';\n\nimport { getRegistry } from '@redhat-cloud-services/frontend-components-utilities/Registry';\nimport NotificationsPortal from '@redhat-cloud-services/frontend-components-notifications/NotificationPortal';\nimport { notificationsReducer } from '@redhat-cloud-services/frontend-components-notifications/redux';\n\nconst App = (props) => {\n    const navigate = useNavigate();\n\n    useEffect(() => {\n        const registry = getRegistry();\n        registry.register({ notifications: notificationsReducer });\n        insights.chrome.init();\n        insights.chrome.identifyApp('image-builder');\n        const unregister = insights.chrome.on('APP_NAVIGATION', (event) =>\n            navigate(`/${event.navId}`)\n        );\n        return () => {\n            unregister();\n        };\n    }, []);\n\n    return (\n        <React.Fragment>\n            <NotificationsPortal />\n            <Router childProps={ props } />\n        </React.Fragment>\n    );\n};\n\nexport default App;\n","import React from 'react';\nimport { BrowserRouter as Router } from 'react-router-dom';\nimport { Provider } from 'react-redux';\nimport { init } from './store';\nimport App from './App';\nimport { getBaseName } from '@redhat-cloud-services/frontend-components-utilities/helpers';\nimport logger from 'redux-logger';\n\nconst ImageBuilder = () => (\n    <Provider store={ init({}, ...[ process.env.NODE_ENV !== 'production' ? logger : undefined ]).getStore() }>\n        <Router basename={ getBaseName(window.location.pathname) }>\n            <App />\n        </Router>\n    </Provider>\n);\n\nexport default ImageBuilder;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport ImageBuilder from './AppEntry';\n\nReactDOM.render(<ImageBuilder />, document.getElementById('root'));\n","const COMPOSE_ADDED = 'COMPOSE_ADDED';\nconst COMPOSE_FAILED = 'COMPOSE_FAILED';\nconst COMPOSE_UPDATED = 'COMPOSE_UPDATED';\nconst COMPOSES_UPDATED_COUNT = 'COMPOSES_UPDATED_COUNT';\nconst COMPOSE_UPDATED_STATUS = 'COMPOSE_UPDATED_STATUS';\nconst SET_RELEASE = 'SET_RELEASE';\nconst SET_UPLOAD_DESTINATIONS = 'SET_UPLOAD_DESTINATIONS';\nconst SET_UPLOAD_AWS = 'SET_UPLOAD_AWS';\nconst SET_UPLOAD_AZURE = 'SET_UPLOAD_AZURE';\nconst SET_UPLOAD_GOOGLE = 'SET_UPLOAD_GOOGLE';\nconst SET_SELECTED_PACKAGES = 'SET_SELECTED_PACKAGES';\nconst SET_SUBSCRIPTION = 'SET_SUBSCRIPTION';\nconst SET_SUBSCRIBE_NOW = 'SET_SUBSCRIBE_NOW';\n\nexport default {\n    COMPOSE_ADDED,\n    COMPOSE_FAILED,\n    COMPOSE_UPDATED,\n    COMPOSES_UPDATED_COUNT,\n    COMPOSE_UPDATED_STATUS,\n    SET_RELEASE,\n    SET_UPLOAD_DESTINATIONS,\n    SET_UPLOAD_AWS,\n    SET_UPLOAD_AZURE,\n    SET_UPLOAD_GOOGLE,\n    SET_SELECTED_PACKAGES,\n    SET_SUBSCRIPTION,\n    SET_SUBSCRIBE_NOW,\n};\n"],"names":["initialComposesState","count","allIds","byId","error","updateAllIds","id","insert","includes","concat","state","action","type","types","payload","compose","image_status","status","registry","init","store","middleware","ReducerRegistry","promiseMiddleware","thunk","filter","item","register","composes","notifications","notificationsReducer","LandingPage","lazy","CreateImageWizard","Router","Routes","Route","path","element","props","navigate","useNavigate","useEffect","getRegistry","insights","chrome","identifyApp","unregister","on","event","navId","childProps","undefined","getStore","basename","getBaseName","window","location","pathname","ReactDOM","document","getElementById","COMPOSE_ADDED","COMPOSE_FAILED","COMPOSE_UPDATED","COMPOSES_UPDATED_COUNT","COMPOSE_UPDATED_STATUS","SET_RELEASE","SET_UPLOAD_DESTINATIONS","SET_UPLOAD_AWS","SET_UPLOAD_AZURE","SET_UPLOAD_GOOGLE","SET_SELECTED_PACKAGES","SET_SUBSCRIPTION","SET_SUBSCRIBE_NOW"],"sourceRoot":""}