{"version":3,"file":"js/412.1663678319737.191130bfd98dbb44c15e.js","mappings":"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","sources":["webpack:///./src/App.js","webpack:///./src/AppEntry.js","webpack:///./src/Router.js","webpack:///./src/store/index.js","webpack:///./src/store/reducers/composes.js","webpack:///./src/store/types.js"],"sourcesContent":["import React, { useEffect } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport '@patternfly/patternfly/patternfly-addons.css';\n\nimport { getRegistry } from '@redhat-cloud-services/frontend-components-utilities/Registry';\nimport NotificationsPortal from '@redhat-cloud-services/frontend-components-notifications/NotificationPortal';\nimport { notificationsReducer } from '@redhat-cloud-services/frontend-components-notifications/redux';\nimport { Router } from './Router';\n\nconst App = (props) => {\n  const navigate = useNavigate();\n\n  useEffect(() => {\n    const registry = getRegistry();\n    registry.register({ notifications: notificationsReducer });\n    document.title = 'Image Builder | Red Hat Insights';\n    insights.chrome.init();\n    insights.chrome.identifyApp('image-builder');\n    const unregister = insights.chrome.on('APP_NAVIGATION', (event) =>\n      navigate(`/${event.navId}`)\n    );\n    return () => {\n      unregister();\n    };\n  }, []);\n\n  return (\n    <React.Fragment>\n      <NotificationsPortal />\n      <Router childProps={props} />\n    </React.Fragment>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport { BrowserRouter as Router } from 'react-router-dom';\nimport { Provider } from 'react-redux';\nimport { getBaseName } from '@redhat-cloud-services/frontend-components-utilities/helpers';\nimport App from './App';\nimport { store } from './store';\n\nconst ImageBuilder = () => (\n  <Provider store={store}>\n    <Router basename={getBaseName(window.location.pathname)}>\n      <App />\n    </Router>\n  </Provider>\n);\n\nexport default ImageBuilder;\n","import React, { lazy } from 'react';\nimport { Route, Routes } from 'react-router-dom';\n\nconst LandingPage = lazy(() => import('./Components/LandingPage/LandingPage'));\nconst CreateImageWizard = lazy(() =>\n  import('./Components/CreateImageWizard/CreateImageWizard')\n);\n\nexport const Router = () => {\n  return (\n    <Routes>\n      <Route path=\"/imagewizard/*\" element={<CreateImageWizard />} />\n      <Route path=\"*\" element={<LandingPage />} />\n    </Routes>\n  );\n};\n","import { configureStore } from '@reduxjs/toolkit';\nimport promiseMiddleware from 'redux-promise-middleware';\nimport { notificationsReducer } from '@redhat-cloud-services/frontend-components-notifications/redux';\nimport composes from './reducers/composes';\n\nexport const reducer = {\n  composes: composes,\n  notifications: notificationsReducer,\n};\n\nexport const middleware = (getDefaultMiddleware) =>\n  getDefaultMiddleware().concat(promiseMiddleware);\n\nexport const store = configureStore({ reducer, middleware });\n","import types from '../types';\n\n// Example of action.compose\n// {\n//     \"77e4c693-0497-4b85-936d-b2a3ad69571b\": {\n//         created_at: \"2021-04-21 11:20:46.927594 +0000 UTC\",\n//         id: \"77e4c693-0497-4b85-936d-b2a3ad69571b\",\n//         request: {\n//             distribution: \"rhel-8\",\n//             image_requests: [\n//                 {\n//                     architecture: \"x86_64\",\n//                     image_type: \"ami\",\n//                     upload_request: {\n//                         type: \"aws\",\n//                         options: {}\n//                     }\n//                 }\n//             ]\n//         },\n//         image_status: {\n//             status: \"uploading\",\n//         },\n//     }\n// };\n\nconst initialComposesState = {\n  count: 0,\n  allIds: [],\n  byId: {},\n  error: null,\n};\n\n// only add to array if compose does not exist\nconst updateAllIds = (allIds, id, insert) => {\n  if (allIds.includes(id)) {\n    return allIds;\n  }\n\n  if (insert) {\n    return [id].concat(allIds);\n  }\n\n  return allIds.concat(id);\n};\n\nexport function composes(state = initialComposesState, action) {\n  switch (action.type) {\n    case types.COMPOSE_ADDED:\n      return {\n        ...state,\n        allIds: updateAllIds(\n          state.allIds,\n          action.payload.compose.id,\n          action.payload.insert\n        ),\n        byId: {\n          ...state.byId,\n          [action.payload.compose.id]: action.payload.compose,\n        },\n        error: null,\n      };\n    case types.COMPOSE_FAILED:\n      return {\n        ...state,\n        error: action.payload.error,\n      };\n    case types.COMPOSE_PENDING:\n      return {\n        ...state,\n        error: null,\n      };\n    case types.COMPOSE_UPDATED:\n      return {\n        ...state,\n        byId: {\n          ...state.byId,\n          [action.payload.compose.id]: action.payload.compose,\n        },\n      };\n    case types.COMPOSES_UPDATED_COUNT:\n      return {\n        ...state,\n        count: action.payload.count,\n      };\n    case types.COMPOSE_UPDATED_STATUS:\n      return {\n        ...state,\n        byId: {\n          ...state.byId,\n          [action.payload.id]: {\n            ...state.byId[action.payload.id],\n            image_status: action.payload.status,\n          },\n        },\n      };\n    default:\n      return state;\n  }\n}\n\nexport default composes;\n","const COMPOSE_ADDED = 'COMPOSE_ADDED';\nconst COMPOSE_FAILED = 'COMPOSE_FAILED';\nconst COMPOSE_UPDATED = 'COMPOSE_UPDATED';\nconst COMPOSES_UPDATED_COUNT = 'COMPOSES_UPDATED_COUNT';\nconst COMPOSE_UPDATED_STATUS = 'COMPOSE_UPDATED_STATUS';\nconst SET_RELEASE = 'SET_RELEASE';\nconst SET_UPLOAD_DESTINATIONS = 'SET_UPLOAD_DESTINATIONS';\nconst SET_UPLOAD_AWS = 'SET_UPLOAD_AWS';\nconst SET_UPLOAD_AZURE = 'SET_UPLOAD_AZURE';\nconst SET_UPLOAD_GOOGLE = 'SET_UPLOAD_GOOGLE';\nconst SET_SELECTED_PACKAGES = 'SET_SELECTED_PACKAGES';\nconst SET_SUBSCRIPTION = 'SET_SUBSCRIPTION';\nconst SET_SUBSCRIBE_NOW = 'SET_SUBSCRIBE_NOW';\n\nexport default {\n  COMPOSE_ADDED,\n  COMPOSE_FAILED,\n  COMPOSE_UPDATED,\n  COMPOSES_UPDATED_COUNT,\n  COMPOSE_UPDATED_STATUS,\n  SET_RELEASE,\n  SET_UPLOAD_DESTINATIONS,\n  SET_UPLOAD_AWS,\n  SET_UPLOAD_AZURE,\n  SET_UPLOAD_GOOGLE,\n  SET_SELECTED_PACKAGES,\n  SET_SUBSCRIPTION,\n  SET_SUBSCRIBE_NOW,\n};\n"],"names":["props","navigate","useNavigate","useEffect","getRegistry","register","notifications","notificationsReducer","document","title","insights","chrome","init","identifyApp","unregister","on","event","navId","childProps","store","basename","getBaseName","window","location","pathname","LandingPage","lazy","CreateImageWizard","Router","Routes","Route","path","element","reducer","composes","configureStore","middleware","getDefaultMiddleware","concat","promiseMiddleware","initialComposesState","count","allIds","byId","error","updateAllIds","id","insert","includes","state","action","type","types","payload","compose","image_status","status","COMPOSE_ADDED","COMPOSE_FAILED","COMPOSE_UPDATED","COMPOSES_UPDATED_COUNT","COMPOSE_UPDATED_STATUS","SET_RELEASE","SET_UPLOAD_DESTINATIONS","SET_UPLOAD_AWS","SET_UPLOAD_AZURE","SET_UPLOAD_GOOGLE","SET_SELECTED_PACKAGES","SET_SUBSCRIPTION","SET_SUBSCRIBE_NOW"],"sourceRoot":""}