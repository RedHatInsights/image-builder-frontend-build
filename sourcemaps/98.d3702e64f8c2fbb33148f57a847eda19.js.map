{"version":3,"file":"js/98.1646326107175.209f6f515aa4ee884f4b.js","mappings":"gXAEA,mBAA+G,6DAAhD,GAAvBA,EAAuE,EAA7F,sBAAiCC,EAA4D,EAA5DA,QAA4D,yDAAP,GAAnCC,EAA0C,EAA1CA,QAASC,EAAiC,EAAjCA,WAAYC,EAAqB,EAArBA,UACtF,OAAKF,GAAD,MAAYF,GAAAA,EAAWK,IAChB,kBAGNF,GAAD,MAAeH,GAAAA,EAAWM,OACnB,2BAGNF,GAAD,MAAcJ,GAAAA,EAAWO,MAClB,sBAGJN,IAAYO,EAAAA,GAAS,eAAiB,6B,MCVpCC,GAAa,eACrBD,EAAAA,GAAS,sCADY,SAEtB,WAAY,oBAFU,SAGtB,WAAY,mBAHU,GAM1B,SACIE,MAAO,eACPC,KAAM,eACNC,SAAU,gBAAGC,EAAH,EAAGA,OAAH,OAAgBC,EAAeD,IACzCE,OAAQ,CACJ,CACIC,UAAWC,EAAAA,EAAAA,OACXC,MAAO,UACPP,KAAM,UACNQ,aAAa,EACbC,aAAcZ,EAAAA,GACda,QAASC,OAAOC,QAAQd,GAAee,KAAI,+BAAGC,EAAH,WAAqB,CAC5DP,MADuC,KAEvCQ,MAAOD,MAEXE,YAAY,EACZC,SAAU,CACN,CACIC,KAAMC,EAAAA,EAAAA,YAIlB,CACId,UAAW,SACXL,KAAM,qBACNO,MAAO,6BACPS,YAAY,EACZC,SAAU,CACN,CACIC,KAAMC,EAAAA,EAAAA,cChCnB,IAAMC,EAAgB,CACzBC,cAAe,iBACfC,eAAgB,kBAChBC,YAAa,eACbC,OAAQ,UAGNC,EAAc,SAAC,GAAiB,IAAfC,EAAe,EAAfA,SACnB,OAAO,kBAAC,EAAAC,QAAD,CACHD,SAAWA,EACXE,cAAY,EACZC,SAAS,QACTC,cAAgB,sBAChBC,aAAe,CAAE,QAAS,SAAU,MAAO,QAC3CC,YAAc,kBAAC,EAAAC,YAAD,KACV,kBAAC,EAAAC,KAAD,wEACA,kBAAC,EAAAC,SAAD,KACI,kBAAC,EAAAC,aAAD,KACI,mDADJ,0HAE+C,iDAF/C,KAIA,kBAAC,EAAAA,aAAD,KACI,oDADJ,gGAEqB,mEAFrB,KAIA,kBAAC,EAAAA,aAAD,KACI,iDADJ,wFAEY,oDAFZ,KAIA,kBAAC,EAAAA,aAAD,KACI,kFADJ,kMAGmD,+CAHnD,QAOR,kBAAC,EAAAC,OAAD,CACIC,QAAQ,QACR,aAAW,eACX,mBAAiB,sBACjBC,UAAU,+BACV,kBAAC,KAAD,SAKZd,EAAYe,UAAY,CACpBd,SAAUe,IAAAA,KAGd,SACI1C,MAAO,wBACP2C,YAAa,kBAAC,EAAAC,MAAD,CAAOC,aAAa,KAAKC,KAAK,MAA9B,8CACb7C,KAAM,0BACN8C,UAAW,qBACX7C,SAAU,gBAAGC,EAAH,EAAGA,OAAH,OAAgBC,EAAeD,EAAQ,CAAEV,YAAY,EAAMD,SAAS,KAC9Ea,OAAQ,CACJ,CACIC,UAAWC,EAAAA,EAAAA,WACXN,KAAM,8BACNO,MAAO,kBAAC,EAAA2B,KAAD,0GAC2F,6BAD3F,+DAKX,CACI7B,UAAW,gBACXE,MAAO,OACPoB,QAASF,EACTzB,KAAM,sBACNS,aAAc,gBACdC,QAASC,OAAOC,QAAQQ,GAAeP,KAAI,+BAAGE,EAAH,KAAUR,EAAV,WAAuB,CAC9DA,MAAiB,WAAVQ,EAAqB,mDAAqDR,EACjFQ,MAAAA,MAEJC,YAAY,EACZC,SAAU,CACN,CACIC,KAAMC,EAAAA,EAAAA,YAIlB,CACId,UAAWC,EAAAA,EAAAA,WACXN,KAAM,eACN,cAAe,qBACfkB,KAAM,OACNX,MAAO,gBACPwC,UAAW,CACPC,GAAI,CACA,CAAEC,KAAM,sBAAuBC,GAAI,iBACnC,CAAED,KAAM,sBAAuBC,GAAI,kBACnC,CAAED,KAAM,sBAAuBC,GAAI,eACnC,CAAED,KAAM,sBAAuBC,GAAI,QAG3ClC,YAAY,EACZC,SAAU,CACN,CACIC,KAAMC,EAAAA,EAAAA,UAEV,CACID,KAAMC,EAAAA,EAAAA,QACNgC,QAAS,wCACTC,QAAS,wCAIrB,CACI/C,UAAWC,EAAAA,EAAAA,WACXN,KAAM,gBACNkB,KAAM,OACNX,MAAO,SACPwC,UAAW,CACPE,KAAM,sBACNC,GAAI,UAERlC,YAAY,EACZC,SAAU,CACN,CACIC,KAAMC,EAAAA,EAAAA,c,0GCvG1B,IAAMkC,EAAgB,SAAC,GAAiB,IAAZC,GAAY,aACpC,OACI,kBAAC,EAAAC,gBAAD,CACI,aAAW,kCACXjB,QAAQ,WACR,kBAAC,EAAAkB,MAAD,KACI,kBAAC,EAAAC,GAAD,KACI,kBAAC,EAAAC,GAAD,oBACA,kBAAC,EAAAA,GAAD,aACA,kBAAC,EAAAA,GAAD,uBAGR,kBAAC,EAAAC,MAAD,CAAO,cAAY,0CACdL,EAAMM,IAAI/C,KAAI,SAACgD,EAAGC,GAAJ,OACX,kBAAC,EAAAL,GAAD,CAAI3C,IAAMgD,GACN,kBAAC,EAAAC,GAAD,CAAIxB,UAAU,iBAAkBsB,EAAEG,YAClC,kBAAC,EAAAD,GAAD,CAAIxB,UAAU,iBAAd,OACA,kBAAC,EAAAwB,GAAD,CAAIxB,UAAU,iBAAkBsB,EAAEhB,KAAlC,IAA2CgB,EAAEI,OAASC,EAAAA,GAAW,MAAQL,EAAEI,OAASE,EAAAA,GAAW,MAAQ,cAQ/Hd,EAAcb,UAAY,CACtBoB,IAAKnB,IAAAA,QAAkBA,IAAAA,QAAkBzB,YAuR7C,QApRmB,WAAM,kJACrB,IAA0CoD,EAAAA,EAAAA,UAAS,GAAnD,iBAAQC,GAAR,MAAsBC,GAAtB,MACA,IAA4BF,EAAAA,EAAAA,YAA5B,iBAAQG,GAAR,MAAeC,GAAf,MACA,IAAgCJ,EAAAA,EAAAA,YAAhC,iBAAQK,GAAR,MAAiBC,GAAjB,MACA,IAA6BC,EAAAA,EAAAA,WAArBC,GAAR,GAAQA,OAAQC,GAAhB,GAAgBA,SAiChB,OA/BAC,EAAAA,EAAAA,YAAU,WAAM,gBACNC,EAAc,UAAGF,YAAH,iBAAG,EAAY3E,cAAf,aAAG,EAAqB,mBAU5C,GATuB,iBAAnB6E,GAAwD,0BAAnBA,IACrC,iBAAC,0HAC0BC,gBAD1B,iBAC0B,EAAUC,cADpC,iBAC0B,EAAkBC,YAD5C,aAC0B,EAAwBC,UADlD,OACSC,EADT,OAESC,EAAKD,MAAAA,GAFd,UAEcA,EAAUE,gBAFxB,iBAEc,EAAoBC,gBAFlC,aAEc,EAA8BC,OACzChB,GAASa,GACTT,GAAO,+BAAgCS,GAJ1C,0CAAD,GAQsD,YAA9C,QAAR,EAAAR,YAAA,mBAAY3E,cAAZ,eAAqB,+BAArB,UACA2E,YADA,iBACA,EAAY3E,cADZ,OACA,EAAqB,6BAA8B,CACnD,IADmD,EAC/C2C,EAAO,EADwC,E,25BAAA,CAEjCgC,KAAW3E,OAAO,8BAFe,IAEnD,2BAAkE,KAAvD0D,EAAuD,QAC9Df,GAASe,EAAIf,KAAOe,EAAIK,MAHuB,8BAMnDpB,GAAQA,EAAOqB,EAAAA,IAAUuB,QAAQ,GAE7Bf,GADA7B,EAAO,EACI,kBAEA,GAAD,OAAIA,EAAJ,aAUlB,oCACI,kBAAC,EAAAX,KAAD,0GAIA,kBAAC,EAAAwD,gBAAD,CAAiBC,WAAS,EAACC,cAAY,GACnC,kBAAC,EAAAC,qBAAD,MACa,QAAR,EAAAhB,YAAA,mBAAY3E,cAAZ,eAAqB,gBAClB,oCACI,kBAAC,EAAA4F,oBAAD,mBACA,kBAAC,EAAAC,2BAAD,eACKlB,YADL,iBACK,EAAY3E,cADjB,aACK,EAAqB,gBAIlC,kBAAC,EAAA4F,oBAAD,gBACA,kBAAC,EAAAC,2BAAD,KACKjG,MAAAA,OADL,EACKA,EAAa,UAAG+E,YAAH,iBAAG,EAAY3E,cAAf,aAAG,EAAoBZ,YAIjD,kBAAC,EAAA0G,KAAD,CAAMC,UAAQ,EAACC,UAAY7B,GAAe8B,SA1B3B,SAACC,EAAOC,GAC3B/B,GAAgB+B,IAyB0D9D,UAAU,aAC5E,kBAAC,EAAA+D,IAAD,CAAKC,SAAW,EAAIxG,MAAQ,kBAAC,EAAAyG,aAAD,2BAAkD,cAAY,cACtF,kBAAC,EAAAC,KAAD,CAAMC,SAAO,EAACC,SAAS,UACV,QAAR,EAAA9B,YAAA,mBAAY3E,cAAZ,mBAAqB,6BAArB,eAA4CR,MACzC,kBAAC,EAAAkH,SAAD,CAAUC,KAAO,yBAAKtE,UAAU,gBAAgBuE,IAAI,kDAChD,kBAAC,EAAA7E,YAAD,KACI,kBAAC,EAAAC,KAAD,CAAM7B,UAAY0G,EAAAA,aAAAA,IAAlB,uBAGA,kBAAC,EAAA5E,SAAD,CAAU9B,UAAY2G,EAAAA,iBAAAA,IAClB,kBAAC,EAAA5E,aAAD,CAAc/B,UAAY4G,EAAAA,qBAAAA,IAA1B,cACA,kBAAC,EAAA7E,aAAD,CAAc/B,UAAY4G,EAAAA,qBAAAA,IAA1B,UACKpC,YADL,iBACK,EAAY3E,cADjB,aACK,EAAqB,uBAMjC,QAAR,EAAA2E,YAAA,mBAAY3E,cAAZ,mBAAqB,6BAArB,eAA4CP,SACzC,kBAAC,EAAAiH,SAAD,CACIrE,UAAU,6BACVsE,KAAO,yBAAKtE,UAAU,gBAAgBuE,IAAI,iEAC1C,kBAAC,EAAA7E,YAAD,KACI,kBAAC,EAAAC,KAAD,CAAM7B,UAAY0G,EAAAA,aAAAA,IAAlB,yBACA,kBAAC,EAAA5E,SAAD,CAAU9B,UAAY2G,EAAAA,iBAAAA,IAClB,kBAAC,EAAA5E,aAAD,CAAc/B,UAAY4G,EAAAA,qBAAAA,IACrB7F,MAAAA,OADL,EACKA,EAAa,UAAGyD,YAAH,iBAAG,EAAY3E,cAAf,aAAG,EAAqB,yBAE1C,kBAAC,EAAAkC,aAAD,CAAc/B,UAAY4G,EAAAA,qBAAAA,KACb,QAAR,EAAApC,YAAA,mBAAY3E,cAAZ,eAAqB,mBAArB,UAAwC2E,YAAxC,iBAAwC,EAAY3E,cAApD,aAAwC,EAAqB,uBAMzE,QAAR,EAAA2E,YAAA,mBAAY3E,cAAZ,mBAAqB,6BAArB,eAA4CN,QACzC,kBAAC,EAAAgH,SAAD,CACIrE,UAAU,6BACVsE,KAAO,yBAAKtE,UAAU,gBAAgBuE,IAAI,oEAC1C,kBAAC,EAAA7E,YAAD,KACI,kBAAC,EAAAC,KAAD,CAAM7B,UAAY0G,EAAAA,aAAAA,IAAlB,mBACA,kBAAC,EAAA5E,SAAD,CAAU9B,UAAY2G,EAAAA,iBAAAA,IAClB,kBAAC,EAAA5E,aAAD,CAAc/B,UAAY4G,EAAAA,qBAAAA,IAA1B,mBAGA,kBAAC,EAAA7E,aAAD,CAAc/B,UAAY4G,EAAAA,qBAAAA,IAA1B,UACKpC,YADL,iBACK,EAAY3E,cADjB,aACK,EAAqB,0BAE1B,kBAAC,EAAAkC,aAAD,CAAc/B,UAAY4G,EAAAA,qBAAAA,IAA1B,aAGA,kBAAC,EAAA7E,aAAD,CAAc/B,UAAY4G,EAAAA,qBAAAA,IAA1B,UACKpC,YADL,iBACK,EAAY3E,cADjB,aACK,EAAqB,oBAE1B,kBAAC,EAAAkC,aAAD,CAAc/B,UAAY4G,EAAAA,qBAAAA,IAA1B,kBAGA,kBAAC,EAAA7E,aAAD,CAAc/B,UAAY4G,EAAAA,qBAAAA,IAA1B,UACKpC,YADL,iBACK,EAAY3E,cADjB,aACK,EAAqB,6BAMjC,QAAR,EAAA2E,YAAA,mBAAY3E,cAAZ,mBAAqB,6BAArB,eAA4CgH,UACzC,kBAAC,EAAAN,SAAD,KACI,kBAAC,EAAA3E,YAAD,KACI,kBAAC,EAAAC,KAAD,CAAM7B,UAAY0G,EAAAA,aAAAA,IAAlB,aAMH,QAAR,EAAAlC,YAAA,mBAAY3E,cAAZ,mBAAqB,6BAArB,eAA6C,iBAC1C,kBAAC,EAAA0G,SAAD,KACI,kBAAC,EAAA3E,YAAD,KACI,kBAAC,EAAAC,KAAD,CAAM7B,UAAY0G,EAAAA,aAAAA,IAAlB,mCAMH,QAAR,EAAAlC,YAAA,mBAAY3E,cAAZ,mBAAqB,6BAArB,eAA6C,qBAC1C,kBAAC,EAAA0G,SAAD,KACI,kBAAC,EAAA3E,YAAD,KACI,kBAAC,EAAAC,KAAD,CAAM7B,UAAY0G,EAAAA,aAAAA,IAAlB,+BAQX,QAAR,EAAAlC,YAAA,mBAAY3E,cAAZ,eAAoBZ,QAAQ6H,SAAS,UAClC,kBAAC,EAAAb,IAAD,CAAKC,SAAW,EAAIxG,MAAQ,kBAAC,EAAAyG,aAAD,qBAA4C,cAAY,oBACnC,oBAApC,QAAR,EAAA3B,YAAA,oBAAY3E,cAAZ,iBAAqB,qBAClB,kBAAC,EAAA+B,YAAD,KACI,kBAAC,EAAAE,SAAD,CAAU9B,UAAY2G,EAAAA,iBAAAA,IAClB,kBAAC,EAAA5E,aAAD,CAAc/B,UAAY4G,EAAAA,qBAAAA,IAA1B,gBAGA,kBAAC,EAAA7E,aAAD,CAAc/B,UAAY4G,EAAAA,qBAAAA,IAA1B,gCAMkC,kBAApC,QAAR,GAAApC,YAAA,sBAAY3E,cAAZ,iBAAqB,qBACyB,2BAApC,QAAR,GAAA2E,YAAA,sBAAY3E,cAAZ,iBAAqB,sBACrB,kBAAC,EAAA+B,YAAD,KACI,kBAAC,EAAAE,SAAD,CAAU9B,UAAY2G,EAAAA,iBAAAA,IAClB,kBAAC,EAAA5E,aAAD,CAAc/B,UAAY4G,EAAAA,qBAAAA,IAA1B,gBAGA,kBAAC,EAAA7E,aAAD,CAAc/B,UAAY4G,EAAAA,qBAAAA,IACuB,2BAApC,QAAR,GAAApC,YAAA,sBAAY3E,cAAZ,iBAAqB,qBAClB,mDAEyC,kBAApC,QAAR,GAAA2E,YAAA,sBAAY3E,cAAZ,iBAAqB,qBAClB,+BAGR,kBAAC,EAAAkC,aAAD,CAAc/B,UAAY4G,EAAAA,qBAAAA,IAA1B,kBAGA,kBAAC,EAAA7E,aAAD,CAAc/B,UAAY4G,EAAAA,qBAAAA,IAA1B,WACKpC,YADL,mBACK,GAAY3E,cADjB,cACK,GAAqB,gCAE1B,kBAAC,EAAAkC,aAAD,CAAc/B,UAAY4G,EAAAA,qBAAAA,IAA1B,wBAGWG,IAAV7C,GACG,kBAAC,EAAAnC,aAAD,CAAc/B,UAAY4G,EAAAA,qBAAAA,GAA0B,cAAY,mBAC3D1C,IAGL,kBAAC,EAAAnC,aAAD,CAAc/B,UAAY4G,EAAAA,qBAAAA,IACtB,kBAAC,EAAAI,QAAD,UAQ5B,kBAAC,EAAAf,IAAD,CAAKC,SAAW,EAAIxG,MAAQ,kBAAC,EAAAyG,aAAD,6BAAoD,cAAY,cACxF,kBAAC,EAAAvE,YAAD,KACI,kBAAC,EAAAC,KAAD,CAAM7B,UAAY0G,EAAAA,aAAAA,IAAlB,6BACA,kBAAC,EAAA5E,SAAD,CAAU9B,UAAY2G,EAAAA,iBAAAA,IAClB,kBAAC,EAAA5E,aAAD,CAAc/B,UAAY4G,EAAAA,qBAAAA,IAA1B,gBAGA,kBAAC,EAAA7E,aAAD,CAAc/B,UAAY4G,EAAAA,qBAAAA,GAA0B,cAAY,4BACL,YAA9C,QAAR,GAAApC,YAAA,sBAAY3E,cAAZ,iBAAqB,8BAA4C,SAAW,YACtB,YAA9C,QAAR,GAAA2E,YAAA,sBAAY3E,cAAZ,iBAAqB,+BACrB,oCACK,IACD,kBAAC,EAAAyB,QAAD,CACI2F,SAAS,SACTxF,cAAc,aACdF,cAAY,EACZ2F,SAAS,QACTvF,YAAc,kBAACqB,EAAD,CAAeO,IAAMiB,KAAW3E,OAAO,gCACrD,kBAAC,EAAAmC,OAAD,CACI,cAAY,oCACZC,QAAQ,OACR,aAAW,iCACX,mBAAiB,kCAJrB,sBAW0C,YAA9C,QAAR,GAAAuC,YAAA,sBAAY3E,cAAZ,iBAAqB,+BACrB,oCACI,kBAAC,EAAAkC,aAAD,CAAc/B,UAAY4G,EAAAA,qBAAAA,IAA1B,uBAEI,kBAAC,EAAAtF,QAAD,CACIC,cAAY,EACZI,YAAc,kBAAC,EAAAC,YAAD,KACV,kBAAC,EAAAC,KAAD,2GAKJ,kBAAC,EAAAG,OAAD,CACIC,QAAQ,QACR,aAAW,iCACX,mBAAiB,iCACjBC,UAAU,+BACV,kBAAC,KAAD,SAIZ,kBAAC,EAAAH,aAAD,CAAc/B,UAAY4G,EAAAA,qBAAAA,IACpBxC,MAKf,kBAAC,EAAAvC,KAAD,CAAM7B,UAAY0G,EAAAA,aAAAA,IAAlB,YACA,kBAAC,EAAA5E,SAAD,CAAU9B,UAAY2G,EAAAA,iBAAAA,IAClB,kBAAC,EAAA5E,aAAD,CAAc/B,UAAY4G,EAAAA,qBAAAA,IAA1B,UAGA,kBAAC,EAAA7E,aAAD,CAAc/B,UAAY4G,EAAAA,qBAAAA,GAA0B,cAAY,0BACnD,QAAR,GAAApC,YAAA,sBAAY3E,cAAZ,sBAAqB,4BAArB,iBAA2CsH,SAAU,S,6mBCzTtF,IAAMC,EAAoB,SAAC,GAAoC,IAAlClH,EAAkC,EAAlCA,MAAOS,EAA2B,EAA3BA,WAAesC,GAAY,YAC3D,GAA6BqB,EAAAA,EAAAA,WAArBE,EAAR,EAAQA,SAAUD,EAAlB,EAAkBA,OACV8C,GAAUC,EAAAA,EAAAA,GAAY,EAAD,CAAGpH,MAAAA,EAAOS,WAAAA,GAAesC,IAA9CoE,MACR,GAAwCtD,EAAAA,EAAAA,UAAS,CAC7C1E,KAAK,EACLE,OAAO,EACPD,QAAQ,EACRuH,SAAS,EACT,eAAe,EACf,mBAAmB,IANvB,eAAQU,EAAR,KAAqBC,EAArB,MASA/C,EAAAA,EAAAA,YAAU,WAAM,QACZ,UAAID,WAAJ,iBAAI,EAAY3E,cAAhB,OAAI,EAAqBwH,EAAM1H,OAC3B6H,EAAehD,IAAW3E,OAAOwH,EAAM1H,SAE5C,IAEH,IAAM8H,EAAuB,SAACC,GAAD,OAASF,GAAe,SAACG,GAClD,IAAMC,EAAS,EAAH,KACLD,GADK,cAEPD,GAAOC,EAAQD,KAGpB,OADAnD,EAAO8C,EAAM1H,KAAMiI,GACZA,MAGX,OACI,oCACI,kBAAC,EAAAC,UAAD,CAAWlH,WAAaA,EAAaT,MAAQA,EAAQ,cAAY,iBAC7D,kBAAC,EAAA2H,UAAD,CAAW3H,MAAQ,kBAAC,EAAA2B,KAAD,CAAM7B,UAAY0G,EAAAA,aAAAA,OAAlB,gBAA6D,cAAY,iBACxF,yBAAKxE,UAAU,SACX,kBAAC,EAAA4F,KAAD,CACI5F,UAAU,kBACV,cAAY,aACZxC,MAAM,sBACN8G,KAAO,yBACHtE,UAAU,gBACVuE,IAAM,iDACVsB,QAAU,kBAAMN,EAAqB,QACrCO,WAAaT,EAAYlI,IACzB4I,WAAS,EACTC,gBAAc,IAClB,kBAAC,EAAAJ,KAAD,CACI5F,UAAU,kBACV,cAAY,gBACZxC,MAAM,wBACN8G,KAAO,yBACHtE,UAAU,gBACVuE,IAAM,gEACVsB,QAAU,kBAAMN,EAAqB,WACrCO,WAAaT,EAAYjI,OACzB2I,WAAS,EACTC,gBAAc,IAClB,kBAAC,EAAAJ,KAAD,CACI5F,UAAU,kBACV,cAAY,eACZxC,MAAM,kBACN8G,KAAO,yBACHtE,UAAU,gBACVuE,IAAM,mEACVsB,QAAU,kBAAMN,EAAqB,UACrCO,WAAaT,EAAYhI,MACzB0I,WAAS,EACTC,gBAAc,MAc1B,kBAAC,EAAAL,UAAD,CAAW3H,MAAQ,kBAAC,EAAA2B,KAAD,CAAM7B,UAAY0G,EAAAA,aAAAA,OAAlB,SAAsD,cAAY,gBACjF,kBAAC,EAAAyB,SAAD,CACIjI,MAAM,+BACNkI,UAAYb,EAAY,eACxBc,SAAW,kBAAMZ,EAAqB,gBACtC,aAAW,sCACXzC,GAAG,uBACHrF,KAAK,6BACL,cAAY,6BAgBpCyH,EAAkBjF,UAAY,CAC1BjC,MAAOkC,IAAAA,KACPzB,WAAYyB,IAAAA,MAGhBgF,EAAkBkB,aAAe,CAC7BpI,MAAO,GACPS,YAAY,GAGhB,U,wFCpGM4H,EAA8B,SAACC,GAAD,OAAcA,EAAShI,KAAI,SAACiI,GAAD,MAAW,CACtE9I,KAAM8I,EAAK9I,KACX+I,QAASD,EAAKC,aAGZC,EAAW,SAAC,GAA8B,IAA5BC,EAA4B,EAA5BA,YAAgB3F,GAAY,YAC5C,GAA6BqB,EAAAA,EAAAA,WAArBC,EAAR,EAAQA,OAAQC,EAAhB,EAAgBA,SACR6C,GAAUC,EAAAA,EAAAA,GAAYrE,GAAtBoE,MACFwB,GAAqBC,EAAAA,EAAAA,UAC3B,GAAoD/E,EAAAA,EAAAA,UAAS,IAA7D,eAAQgF,EAAR,KAA2BC,EAA3B,KACA,GAA8DjF,EAAAA,EAAAA,WAAS,GAAvE,eAAQkF,EAAR,KAAgCC,EAAhC,KACA,GAA8CnF,EAAAA,EAAAA,UAAS,IAAvD,eAAQoF,EAAR,KAAwBC,EAAxB,KACA,GAAwDrF,EAAAA,EAAAA,WAAS,GAAjE,eAAQsF,EAAR,KAA6BC,EAA7B,KACA,GAA0CvF,EAAAA,EAAAA,UAAS,IAAnD,eAAQwF,EAAR,KAAsBC,EAAtB,KACA,GAA4BzF,EAAAA,EAAAA,UAAS,IAArC,eAAQ0F,EAAR,KAAeC,EAAf,MAGAjF,EAAAA,EAAAA,YAAU,WAAM,QACNkF,EAAgB,UAAGnF,WAAH,iBAAG,EAAY3E,cAAf,aAAG,EAAqB,qBAC1C8J,GACAP,EAAkBO,KAEvB,IAEH,IAAMC,GAA0BC,EAAAA,EAAAA,cAAY,SAACC,GACzC,OAAO,SAACC,EAAGC,GAKP,OAJAD,EAAIA,EAAEpK,KAAKsK,cACXD,EAAIA,EAAErK,KAAKsK,cAGPF,IAAMD,GACE,EAGRE,IAAMF,EACC,EAIPC,EAAEG,WAAWJ,KAAgBE,EAAEE,WAAWJ,IAClC,EAGRE,EAAEE,WAAWJ,KAAgBC,EAAEG,WAAWJ,GACnC,EAKPC,EAAIC,GACI,EAGRA,EAAID,EACG,EAGJ,MAITI,GAAeN,EAAAA,EAAAA,cAAY,SAACO,GAC9B,IAAMC,EAAcD,EAAYE,KAAKV,EAAwBf,EAAmB0B,UAChFvB,EAAqBqB,MAInBG,GAA0BX,EAAAA,EAAAA,cAAY,SAACO,GACzC,OAAOA,EAAYK,QAAO,SAACC,GAEvB,OAAQvB,EAAewB,MAAK,SAACC,GAAD,OAAmBF,EAAiB/K,OAASiL,EAAcjL,cAIzFkL,EAAc,mCAAG,6GACbC,EAAO,WACTtG,WADS,iBACT,EAAY3E,cADH,aACT,EAAoBZ,SACZ,QAAR,EAAAuF,WAAA,mBAAY3E,cAAZ,eAAoBkL,eAAgBnC,EACpCC,EAAmB0B,SAJJ,SAMQS,EAAAA,EAAAA,YAAAA,MAAAA,EAAAA,EAAmBF,GAN3B,mBAMbG,EANa,EAMbA,KAAMC,EANO,EAMPA,MACJ,QAAJ,EAAAD,SAAA,eAAM9D,UAAW+D,EAAKC,MAPP,0CAQRF,GARQ,YASRA,EATQ,kCAUGD,EAAAA,EAAAA,YAAAA,MAAAA,EAAAA,EAAmBF,EAAf,OAAD,CAAsBI,EAAKC,SAVjC,wBAUZF,EAVY,EAUZA,KAVY,kBAWRA,GAXQ,4CAAH,qDAgBdG,EAA6B,mCAAG,sGACRP,IADQ,QAC5BT,EAD4B,SAGxBiB,EAA4Bb,EAAwBJ,GAC1DD,EAAakB,GACbnC,GAA0B,KAE1BF,EAAqB,IACrBE,GAA0B,IARI,2CAAH,qDAa7BoC,GAA6B,WAC/B,IAAIC,GAAQ,EACNC,EAAyBrC,EAAe3I,KAAI,SAACiI,GAQ/C,OAPKA,EAAK9I,KAAKmH,SAASyC,IAGpBd,EAAKgD,UAAW,EAChBF,GAAQ,GAHR9C,EAAKgD,UAAW,EAMbhD,KAEXa,EAAuBiC,GACvBnC,EAAkBoC,IAGhBE,GAAiB,SAAC3F,GACF,UAAdA,EAAMtF,MACQ,cAAVgJ,GACA1D,EAAM4F,kBACNP,KACiB,WAAV3B,IACP1D,EAAM4F,kBACNL,SAKZ7G,EAAAA,EAAAA,YAAU,WAGN,OAFAmH,SAASC,iBAAiB,UAAWH,IAAgB,GAE9C,WACHE,SAASE,oBAAoB,UAAWJ,IAAgB,OAKhE,IAAMK,GAAe,SAACC,GAClB,IACMC,EAAsBD,EAAgB7C,EAAiBJ,EAEvDmD,GAHiBF,EAAgBjD,EAAoBI,GAGdsB,QAAO,SAAChC,GACjD,OAAIA,EAAK0D,WACL1D,EAAK0D,UAAW,EAChBF,EAAoBG,KAAK3D,IAClB,MAMXuD,GACA7B,EAAa+B,GACb9C,EAAkB6C,GAElB1H,EAAO8C,EAAM1H,KAAM4I,EAA4B0D,MAE/C7C,EAAkB8C,GAClB/B,EAAapB,GAEbxE,EAAO8C,EAAM1H,KAAM4I,EAA4B2D,MAKjDG,GAAU,SAACL,GACb,IAAIM,EAAiB,GACjBN,GACAM,EAAiB,GAAH,eAAQvD,EAAkB0B,QAAO,SAAAhC,GAAI,OAAKA,EAAKgD,cAA/C,OAA6DtC,IAC3EC,EAAkBkD,GAClBnC,GAAa,OAAKpB,EAAkB0B,QAAO,SAAAhC,GAAI,OAAIA,EAAKgD,gBAExDa,GAAiB,OAAKnD,EAAesB,QAAO,SAAAhC,GAAI,OAAIA,EAAKgD,aACzDtB,EAAa,GAAD,eAAMhB,EAAesB,QAAO,SAAAhC,GAAI,OAAKA,EAAKgD,cAA1C,OAAwD1C,KACpEK,EAAkBkD,IAItB/H,EAAO8C,EAAM1H,KAAM4I,EAA4B+D,KAG7CC,GAAiB,SAACxG,EAAOyG,EAAOC,GAClC,GAAIA,EAAU,CACV,IAAMC,GAAY,OAAKvD,GACvBuD,EAAUF,GAAOL,UAAYhD,EAAeqD,GAAOL,SACnD/C,EAAkBsD,OACf,CACH,IAAMC,GAAe,OAAK5D,GAC1B4D,EAAaH,GAAOL,UAAYpD,EAAkByD,GAAOL,SACzDhC,EAAawC,KAIrB,OACI,kBAAC,EAAAC,iBAAD,KACI,kBAAC,EAAAC,qBAAD,CACInN,MAAM,qBACNoN,YAAc,kBAAC,EAAAC,YAAD,CACVC,YAAY,uBACZ,cAAY,8BACZtM,MAAQmI,EAAmB0B,QAC3B0C,QAAU,kBAAMvD,EAAS,cACzBwD,OAAS,kBAAMxD,EAAS,KACxBrB,SAAW,SAAC8E,GACRtE,EAAmB0B,QAAU4C,KAErCC,QAAU,CACN,kBAAC,EAAApL,OAAD,CACI,aAAW,uCACXvB,IAAI,wBACJ,cAAY,+BACZsH,QAAUqD,GAJd,YAQJ,kBAAC,EAAAiC,qBAAD,CAAsB,cAAY,uBAC5BtE,EAAkB5B,OAOf4B,EAAkBvI,KAAI,SAACiI,EAAM+D,GAC9B,OAAQ/D,EAAKgD,SAUT,KATA,kBAAC,EAAA6B,yBAAD,CACI7M,IAAM+L,EACNxE,WAAaS,EAAK0D,SAClBI,eAAiB,SAACgB,GAAD,OAAOhB,GAAegB,EAAGf,GAAO,KACjD,kBAAC,EAAA5K,YAAD,CAAanB,IAAG,UAAMgI,EAAK9I,KAAX,YAAmB6M,IAC/B,0BAAMtK,UAAU,sCAAuCuG,EAAK9I,MAC5D,+BAAS8I,EAAKC,cAd1B,uBAAGxG,UAAU,qCACP+G,EAEI,qEAAgC,6BAAhC,0BADA,uBAmBtB,kBAAC,EAAAuE,gCAAD,CACI,aAAW,qBACX,kBAAC,EAAAC,wBAAD,CACIC,YAAc3E,EAAkB4B,MAAK,SAAAgD,GAAM,OAAIA,EAAOxB,YACtDpE,QAAU,kBAAMgE,IAAa,IAC7B,aAAW,eACX6B,eAAe,gBACf,kBAAC,KAAD,OAEJ,kBAAC,EAAAH,wBAAD,CACIC,YAAc3E,EAAkB5B,OAChCY,QAAU,kBAAMsE,IAAQ,IACxB,aAAW,UACXuB,eAAe,WACf,kBAAC,KAAD,OAEJ,kBAAC,EAAAH,wBAAD,CACIC,YAAcvE,EAAehC,SAAWkC,EACxCtB,QAAU,kBAAMsE,IAAQ,IACxB,aAAW,aACXuB,eAAe,cACf,kBAAC,KAAD,OAEJ,kBAAC,EAAAH,wBAAD,CACI1F,QAAU,kBAAMgE,IAAa,IAC7B2B,YAAcvE,EAAewB,MAAK,SAAAgD,GAAM,OAAIA,EAAOxB,cAAc9C,EACjE,aAAW,kBACXuE,eAAe,mBACf,kBAAC,KAAD,QAGR,kBAAC,EAAAf,qBAAD,CACInN,MAAM,kBACNoN,YAAc,kBAAC,EAAAC,YAAD,CACVC,YAAY,uBACZ,cAAY,2BACZtM,MAAQ6I,EACR0D,QAAU,kBAAMvD,EAAS,WACzBwD,OAAS,kBAAMxD,EAAS,KACxBrB,SAAW,SAAC8E,GAAD,OAAS3D,EAAgB2D,MACxCC,QAAU,CACN,kBAAC,EAAApL,OAAD,CACI,aAAW,sCACXvB,IAAI,uBACJ,cAAY,4BACZsH,QAAUuD,IAJd,WAQJmB,UAAQ,GACR,kBAAC,EAAAY,qBAAD,CAAsB,cAAY,oBAC5BlE,EAAehC,OAIZkC,EAIAF,EAAe3I,KAAI,SAACiI,EAAM+D,GAC3B,OAAQ/D,EAAKgD,SAUT,KATA,kBAAC,EAAA6B,yBAAD,CACI7M,IAAM+L,EACNxE,WAAaS,EAAK0D,SAClBI,eAAiB,SAACgB,GAAD,OAAOhB,GAAegB,EAAGf,GAAO,KACjD,kBAAC,EAAA5K,YAAD,CAAanB,IAAG,UAAMgI,EAAK9I,KAAX,YAAmB6M,IAC/B,0BAAMtK,UAAU,sCAAuCuG,EAAK9I,MAC5D,+BAAS8I,EAAKC,cAX1B,uBAAGxG,UAAU,qCAAb,qBAJA,uBAAGA,UAAU,qCAAb,yBA0BxByG,EAASxG,UAAY,CACjByG,YAAaxG,IAAAA,QAGjB,U,6BClVMyL,EAAmB,SAAC,GAA0B,IAAxBvM,EAAwB,EAAxBA,QAAY2B,GAAY,YAC1C6K,GAAMhF,EAAAA,EAAAA,UACZ,OAAO,kBAAC,KAAD,UAAY7F,EAAZ,CAAoB/C,MAAQ,0BAAM4N,IAAMA,EAAM5L,UAAU,iCAAiCe,EAAM/C,MAClG,kBAACoB,EAAD,WAIRuM,EAAiB1L,UAAY,CACzBb,QAASc,IAAAA,YAAAA,WACTlC,MAAOkC,IAAAA,MAGX,UCSA,GArBwB,WAAM,QAGpB2L,EAAQ,WAAGvJ,GAFIF,EAAAA,EAAAA,WAAbE,mBAEM,iBAAG,EAAY3E,cAAf,aAAG,EAAqB,mBAChCmO,EAAY,IAAIC,OAAO,4EAA6E,KAE1G,OACI,kBAAC,EAAApG,UAAD,KACI,kBAAC,EAAA7F,OAAD,CACIhC,UAAU,IACVkO,OAAO,SACPjM,QAAQ,YACRyL,YAAcM,EAAUG,KAAKJ,GAC7BK,KAAO,qCAAuCL,EAAvC,mKALX,6B,gBCwBZ,SA/B4B,WACxB,OAAkChK,EAAAA,EAAAA,WAAS,GAA3C,eAAQsK,EAAR,KAAkBC,EAAlB,KAEA,OACI,oCACI,kBAAC,EAAAC,kBAAD,CACIrM,UAAU,sBACVsM,WAAa,kBAAC,EAAAlM,MAAD,CAAOC,aAAa,MAApB,gCACbkM,SAAW,kBAAMH,GAAaD,IAC9BK,WAAaL,GACb,kBAAC,EAAAxM,KAAD,gPAGuD,8BAEvD,+BACI,kBAAC,EAAAG,OAAD,CACIhC,UAAU,IACVkO,OAAO,SACPjM,QAAQ,OACRuE,KAAO,kBAAC,MAAD,MACPmI,aAAa,QACbC,UAAQ,EACRR,KAAK,4FAPT,kCCfpB,IAAMS,GAAiB,SAAC,GAA0B,IAAxB3O,EAAwB,EAAxBA,MAAOS,EAAiB,EAAjBA,WACrB4D,GAAWD,EAAAA,EAAAA,WAAXC,OACR,GAA8CR,EAAAA,EAAAA,UAAS,IAAvD,eAAQ+K,EAAR,KAAwBC,EAAxB,KACA,GAA8BhL,EAAAA,EAAAA,WAAS,GAAvC,eAAQiL,EAAR,KAAgBC,EAAhB,KACA,GAAoClL,EAAAA,EAAAA,WAAS,GAA7C,eAAQmL,EAAR,KAAmBC,EAAnB,KACA,GAAuDpL,EAAAA,EAAAA,YAAvD,eAAQqL,EAAR,KAA+BC,EAA/B,KAsBA,OApBA5K,EAAAA,EAAAA,YAAU,WACN0K,GAAa,GACAnE,EAAAA,EAAAA,oBACRsE,MAAK,SAAAC,GACNR,EAAkBQ,GAClBJ,GAAa,QAElB,IAcC,kBAAC,EAAAtH,UAAD,CAAWlH,WAAaA,EAAaT,MAAQA,EAAQ,cAAY,+BAC7D,kBAAC,EAAAsP,OAAD,CACIvN,QAAUwN,EAAAA,cAAAA,UACVhB,SAAW,kBAAMQ,GAAWD,IAC5BlJ,SAhBa,SAAC4J,EAAGC,GACzBN,EAAoBM,GACpBV,GAAU,GACV1K,EAAO,8BAA+BoL,IAc9BC,QAXQ,WAChBP,IACA9K,EAAO,mCAA+BwC,IAU9B8I,WAAaT,EACbJ,OAASA,EACTc,gBAAgB,wBAChBC,mBAAmB,yBAClBb,GACG,kBAAC,EAAAc,aAAD,CAAcC,mBAAoB,EAAO,cAAY,2BACjD,kBAAC,EAAAjJ,QAAD,CAASkJ,OAAK,EAAC1N,KAAK,QAG3BsM,EAAetO,KAAI,SAACC,EAAK+L,GAAN,OAChB,kBAAC,EAAAwD,aAAD,CACIvP,IAAM+L,EACN9L,MAAQD,EAAId,aAMpCkP,GAAe1M,UAAY,CACvBjC,MAAOkC,IAAAA,KACPzB,WAAYyB,IAAAA,MAGhByM,GAAevG,aAAe,CAC1BpI,MAAO,GACPS,YAAY,GAGhB,Y,iMCvDA,IAAMwP,GAAa,SAAC,GAAiB,IAAZlN,GAAY,aAE3BmN,EAAgB,CAAE,QAAS,OAAQ,OAAQ,aAAc,OAAQ,QAAS,KAChF,GAA8BrM,EAAAA,EAAAA,WAAS,GAAvC,eAAQiL,EAAR,KAAgBC,EAAhB,KACA,GAA8BlL,EAAAA,EAAAA,UAAS,KAAvC,eAAQsM,EAAR,KAAgBC,EAAhB,KACA,GAA8BvM,EAAAA,EAAAA,UAAS,IAAvC,eAAQwM,EAAR,KAAgBC,EAAhB,KAoCA,OAjCA/L,EAAAA,EAAAA,YAAU,WAAM,Q,65BAAA,CACE2L,GADF,IACZ,2BAA6B,KAApBK,EAAoB,QACzB,GAAIxN,EAAMU,WAAWuG,WAAWuG,GAG5B,OAFAH,EAAUG,QACVD,EAAUvN,EAAMU,WAAW+M,UAAUD,EAAEtJ,UAJnC,iCAQb,KAEH1C,EAAAA,EAAAA,YAAU,WACN,IAAIkM,EAAMJ,EACNK,EAAKP,EACLM,IACW,MAAPC,GAAyB,MAAXD,EAAI,KAClBA,EAAM,IAAMA,GAGhBC,GAAMD,GAGV1N,EAAMoF,SAASwI,KAAAA,UAAeD,MAC/B,CAAEP,EAAQE,IAYT,oCACI,kBAAC,EAAAf,OAAD,CACItN,UAAU,YACV8M,OAASA,EACTP,SAdK,SAACO,GACdC,EAAUD,IAcFlJ,SAXK,SAACC,EAAO4J,GACrBW,EAAUX,GACVV,GAAU,IAUFY,WAAaQ,EACbpO,QAAUwN,EAAAA,cAAAA,QACTW,EAAc5P,KAAI,SAACsQ,EAAKtE,GACrB,OAAO,kBAAC,EAAAwD,aAAD,CAAcvP,IAAM+L,EAAQ9L,MAAQoQ,QAInD,kBAAC,EAAAC,UAAD,CACI7O,UAAU,YACVrB,KAAK,OACLH,MAAQ6P,EACR,aAAW,gCACXlI,SAAW,SAAA2I,GAAC,OAAIR,EAAUQ,QAK1Cb,GAAWhO,UAAY,CACnBwB,WAAYvB,IAAAA,OAAAA,WACZiG,SAAUjG,IAAAA,KAAAA,YAGd,YCrEA,IAAM6O,GAAW,SAAC,GAAiB,IAAZhO,GAAY,aAC/B,GAA8Bc,EAAAA,EAAAA,WAAS,GAAvC,eAAQiL,EAAR,KAAgBC,EAAhB,KACA,GAA0BlL,EAAAA,EAAAA,UAASd,EAAMW,MAAQC,EAAAA,IAAjD,eAAQD,EAAR,KAAcsN,EAAd,KACA,GAA0BnN,EAAAA,EAAAA,UAASd,EAAMT,MAAQ,GAAjD,eAAQA,EAAR,KAAc2O,EAAd,KA0BA,OAxBA1M,EAAAA,EAAAA,YAAU,WACNxB,EAAMoF,SAAS7F,EAAMoB,KACtB,CAAEA,EAAMpB,IAuBP,oCACI,kBAAC,EAAAuO,UAAD,CACI7O,UAAU,YACVrB,KAAK,OACLH,MAAQ8B,EACR,aAAW,kBACX6F,SAAW,SAAA2I,GAAC,OAAIG,EAAQC,MAAMC,SAASL,IAAM,GAAKK,SAASL,OAC/D,kBAAC,EAAAxB,OAAD,CACItN,UAAU,YACV8M,OAASA,EACTP,SA/BK,SAACO,GACdC,EAAUD,IA+BFlJ,SA5BK,SAACC,EAAO4J,GACrB,OAAQA,GACJ,IAAK,MACDuB,EAAQI,EAAAA,IACR,MACJ,IAAK,MACDJ,EAAQpN,EAAAA,IACR,MACJ,IAAK,MACDoN,EAAQrN,EAAAA,IAIhBoL,GAAU,IAgBFY,WAAajM,IAAS0N,EAAAA,GAAW,MAAQ1N,IAASE,EAAAA,GAAW,MAAQ,MACrE7B,QAAUwN,EAAAA,cAAAA,OACV,aAAW,eACV,CAAE,MAAO,MAAO,OAAQjP,KAAI,SAAC+Q,EAAG/E,GAC7B,OAAO,kBAAC,EAAAwD,aAAD,CAAcvP,IAAM+L,EAAQ9L,MAAQ6Q,UAO/DN,GAAS9O,UAAY,CACjBK,KAAMJ,IAAAA,OAAAA,WACNwB,KAAMxB,IAAAA,OAAAA,WACNiG,SAAUjG,IAAAA,KAAAA,YAGd,Y,orBC1CA,IAAIoP,GAAa,CACbxM,IAAIyM,EAAAA,GAAAA,KACJ9N,WAAY,IACZ+N,OAAQ,MACRlP,KAAM,GACNoB,KAAMC,EAAAA,IAwSV,SArSgC,SAAC,GAAiB,gBAAZZ,GAAY,aAC9C,GAA6BqB,EAAAA,EAAAA,WAArBC,EAAR,EAAQA,OAAQC,EAAhB,EAAgBA,SACR6C,GAAUC,EAAAA,EAAAA,GAAYrE,GAAtBoE,MACR,GAA4CtD,EAAAA,EAAAA,UAAS,MAArD,eAAQ4N,EAAR,KAAuBC,EAAvB,KACA,GAAwD7N,EAAAA,EAAAA,UAAS,MAAjE,eAAQ8N,EAAR,KAA6BC,EAA7B,KACA,GAAsC/N,EAAAA,EAAAA,WAAS,GAA/C,eAAQgO,EAAR,KAAoBC,EAApB,KACA,GAAoCjO,EAAAA,EAAAA,UAAS,CAAEyN,GAAWxM,KAA1D,eAAQiN,EAAR,KAAmBC,EAAnB,KACA,GAA4CnO,EAAAA,EAAAA,UAAS,IAArD,eAAQoO,EAAR,KAAuBC,EAAvB,KACMC,GAAUvJ,EAAAA,EAAAA,UAChB,GAA0B/E,EAAAA,EAAAA,UAAS,CAAEyN,KAArC,eAAQc,EAAR,KAAcC,EAAd,MAEA9N,EAAAA,EAAAA,YAAU,WAAM,QACNlB,EAAG,UAAGiB,WAAH,iBAAG,EAAY3E,cAAf,aAAG,EAAqB,6BACjC,GAAK0D,EAAL,CAIA,IAAMiP,EAAU,GACVC,EAAW,GACjBlP,EAAI/C,KAAI,SAAAgD,GACJ,IAAMwB,GAAKyM,EAAAA,GAAAA,KACXe,EAAQpG,KAAK,CACTpH,GAAAA,EACArB,WAAYH,EAAEG,WACd+N,OAAQ,MACRlP,KAAMgB,EAAEhB,KACRoB,KAAMJ,EAAEI,OAEZ6O,EAASrG,KAAKpH,MAElBuN,EAAQC,GACRN,EAAaO,MACd,KAEHhO,EAAAA,EAAAA,YAAU,WACNF,EAAO8C,EAAM1H,KAAMsS,EAAUzR,KAAI,SAAAgD,GAAK,Q,65BAAA,CACjB8O,GADiB,IAClC,2BAAuB,KAAZI,EAAY,QACnB,GAAIA,EAAG1N,KAAOxB,EACV,MAAO,CACHG,WAAY+O,EAAG/O,WACfnB,KAAMkQ,EAAGlQ,KACToB,KAAM8O,EAAG9O,OANa,qCAWvC,CAAE0O,EAAML,IAEX,IAoCMU,EAAO,SAAAV,GACT,IAAMW,EAASP,EAAQ9H,QACjBsI,EAAQC,MAAMC,KAAKH,EAAOI,UAChC,IAAIH,EAAMrS,KAAI,SAAAyS,GAAI,OAAIA,EAAKjO,MAAIkO,OAAM,SAAClO,EAAImO,GAAL,OAAWnO,IAAOiN,EAAUkB,MAAjE,CAIA,KAAOP,EAAOQ,YACVR,EAAOS,YAAYT,EAAOU,WAG9BrB,EAAUsB,SAAQ,SAAAvO,GACd4N,EAAOY,YAAYX,EAAMY,MAAK,SAAAC,GAAC,OAAIA,EAAE1O,KAAOA,WAI9C2O,EAAa,SAAAC,GACfA,EAAIC,iBAEJ,IAAMC,EAAcF,EAAI1F,OAAO6F,QAAQ,MACvC,IAAKD,IAAgBzB,EAAQ9H,QAAQyJ,SAASF,IAAgBA,EAAY9O,KAAO2M,EAC7E,OAAO,KAGX,IAAMsC,EAASH,EAAY9O,GACrBkP,EAAyBpB,MAAMC,KAAKV,EAAQ9H,QAAQyI,UAAUmB,WAAU,SAAAC,GAAI,OAAIA,EAAKpP,KAAOiP,KAClG,GAAIC,IAA2BrC,EAAqB,CAChD,IAAMM,EAtCG,SAACkC,EAAKC,EAAIC,GACvB,IAAMC,EAAYH,EAAII,QAAQH,GAC9B,GAAIE,IAAcD,EACd,OAAOF,EAGX,IAAMK,EAAOL,EAAIM,OAAOH,EAAW,GAEnC,OADAH,EAAIM,OAAOJ,EAAS,EAAGG,EAAK,IACrBL,EA8BmBO,EAAS,OAAK3C,GAAaN,EAAeuC,GAChEvB,EAAKR,GACLL,EAAuBoC,GACvB9B,EAAiBD,KAInB0C,EAAc,SAAAjB,GAChB,IAAMkB,EAASzC,EAAQ9H,QAAQwK,wBAC/B,OACInB,EAAIoB,QAAUF,EAAOG,GACjBrB,EAAIoB,QAAUF,EAAOG,EAAIH,EAAOI,OAChCtB,EAAIuB,QAAUL,EAAOM,GACrBxB,EAAIuB,QAAUL,EAAOM,EAAIN,EAAOO,QAWtCC,EAAS,SAAA1B,GACPiB,EAAYjB,GACZ1B,EAAaC,IAEbyB,EAAI2B,cAAcC,UAAUC,OAAOC,GAAAA,EAAAA,UAAAA,UACnC9B,EAAI2B,cAAcI,aAAa,eAAgB,SAC/C/D,EAAiB,MACjBE,EAAuB,MACvBE,GAAc,KAIhB4D,EAAc,SAAAhC,GAChBA,EAAIiC,aAAaC,cAAgB,OACjClC,EAAIiC,aAAaE,QAAQ,aAAcnC,EAAI2B,cAAcvQ,IACzD4O,EAAI2B,cAAcC,UAAUQ,IAAIN,GAAAA,EAAAA,UAAAA,UAChC9B,EAAI2B,cAAcI,aAAa,eAAgB,QAC/C/D,EAAiBgC,EAAI2B,cAAcvQ,IACnCgN,GAAc,IAGZiE,EAAY,SAAArC,GACdA,EAAI1F,OAAOsH,UAAUC,OAAOC,GAAAA,EAAAA,UAAAA,UAC5B9B,EAAI1F,OAAOyH,aAAa,eAAgB,SACxC/D,EAAiB,MACjBE,EAAuB,MACvBE,GAAc,IAgClB,OACI,oCACI,kBAAC,EAAApQ,YAAD,KACI,kBAAC,EAAAC,KAAD,CAAM7B,UAAY0G,EAAAA,aAAAA,IAAlB,yBAEF4L,EAAKnL,OAAS,IAAd,UAAmB3C,WAAnB,iBAAmB,EAAY0R,cAA/B,iBAAmB,EAAqB,oCAAxC,aAAmB,EAAmDC,aACtE,kBAAC,EAAAC,MAAD,CAAOnU,QAAQ,SAAS2M,UAAQ,EAC5BlP,MAAM,+GAEV4S,EAAKnL,QAAU,IAAiE,KAApD,QAAR,EAAA3C,WAAA,mBAAY0R,cAAZ,mBAAqB,oCAArB,eAAmDG,OACvE,kBAAC,EAAAD,MAAD,CAAOnU,QAAQ,SAAS2M,UAAQ,EAC5BlP,MAAM,kCAEZ,kBAAC,EAAAkC,YAAD,KACI,kBAAC,EAAAC,KAAD,4JAKJ,kBAAC,EAAAqB,gBAAD,CAAiB,aAAW,oBAAoBhB,UAAY6P,GAAc2D,GAAAA,EAAAA,UAAAA,SAA4BzT,QAAQ,WAC1G,kBAAC,EAAAkB,MAAD,KACI,kBAAC,EAAAC,GAAD,KACI,kBAAC,EAAAC,GAAD,MACA,kBAAC,EAAAA,GAAD,oBACA,kBAAC,EAAAA,GAAD,aACA,kBAAC,EAAAA,GAAD,oBACI,kBAAC,EAAA/B,QAAD,CACIC,cAAY,EACZI,YAAc,kBAAC,EAAAC,YAAD,KACV,kBAAC,EAAAC,KAAD,2GAIJ,kBAAC,EAAAG,OAAD,CACIC,QAAQ,QACR,aAAW,iCACX,mBAAiB,iCACjBC,UAAU,+BACV,kBAAC,KAAD,SAIZ,kBAAC,EAAAmB,GAAD,QAGR,kBAAC,EAAAC,MAAD,CACIwK,IAAMuE,EACNsB,WAAaA,EACb2B,OAAS3B,EACT2C,YAlHI,SAAA1C,GACXiB,EAAYjB,KACbjB,EAAKV,GACLH,EAAuB,QAgHf,cAAY,mCACXQ,EAAK9R,KAAI,SAAC+V,EAAKC,GAAN,eACN,kBAAC,EAAApT,GAAD,CAAI3C,IAAM+V,EAAWxR,GAAKuR,EAAIvR,GAAKyR,WAAS,EAACnB,OAASA,EAASW,UAAYA,EAAYL,YAAcA,GACjG,kBAAC,EAAAlS,GAAD,CAAIgT,aAAe,CACf1R,GAAI,iBAAF,OAAmBuR,EAAIvR,OAE7B,kBAAC,EAAAtB,GAAD,CAAIxB,UAAU,iBACV,kBAAC,GAAD,CACIzB,IAAM8V,EAAIvR,GAAK,cACfrB,WAAa4S,EAAI5S,WACjB0E,SAAW,SAAAuI,GAAE,OAzFvB,SAAC5L,EAAI4L,GAEvB,IADA,IAAI4B,GAAU,OAAKF,GACVa,EAAI,EAAGA,EAAIX,EAAQrL,OAAQgM,IAChC,GAAIX,EAAQW,GAAGnO,KAAOA,EAAI,CACtB,IAAI2R,EAAS,MAAKnE,EAAQW,IAC1BwD,EAAOhT,WAAaiN,EACpB4B,EAAQmC,OAAOxB,EAAG,EAAGwD,GACrB,MAIRpE,EAAQC,GA8EqCoE,CAAcL,EAAIvR,GAAI4L,OACzC,UAAApM,IAAW0R,OAAO,oCAAlB,eAAgDC,cACwC,KAAxF,UAAA3R,IAAW0R,OAAO,oCAAlB,eAAgDC,WAAW1B,QAAQ8B,EAAI5S,cACvE,kBAAC,EAAAyS,MAAD,CAAOnU,QAAQ,SAAS2M,UAAQ,EAACvI,SAAO,EAAC3G,MAAM,4BAErD,kBAAC,EAAAgE,GAAD,CAAIxB,UAAU,iBAETqU,EAAI7E,QAET,kBAAC,EAAAhO,GAAD,CAAIxB,UAAU,iBACV,kBAAC,GAAD,CACIzB,IAAM8V,EAAIvR,GAAK,YACfxC,KAAO+T,EAAI/T,KACXoB,KAAO2S,EAAI3S,KACXyE,SAAW,SAACwO,EAAGtF,GAAJ,OAzF3B,SAACvM,EAAI6R,EAAGtF,GAEpB,IADA,IAAIiB,GAAU,OAAKF,GACVa,EAAI,EAAGA,EAAIX,EAAQrL,OAAQgM,IAChC,GAAIX,EAAQW,GAAGnO,KAAOA,EAAI,CACtB,IAAI2R,EAAS,MAAKnE,EAAQW,IAC1BwD,EAAOnU,KAAOqU,EACdF,EAAO/S,KAAO2N,EACdiB,EAAQmC,OAAOxB,EAAG,EAAGwD,GACrB,MAIRpE,EAAQC,GA6EyCrB,CAAQoF,EAAIvR,GAAI6R,EAAGtF,OAEhD,kBAAC,EAAA7N,GAAD,CAAIxB,UAAU,iBACV,kBAAC,EAAAF,OAAD,CACIC,QAAQ,OACRuE,KAAO,kBAAC,MAAD,MACPuB,QAAU,kBArNxB,SAAA/C,GACd,IAAI8R,EAAcxE,EAAK9R,KAAI,SAAA+M,GAAC,OAAIA,EAAEvI,MAAIyP,QAAQzP,GAC1CwN,GAAU,OAAKF,GACnBE,EAAQmC,OAAOmC,EAAa,GAE5B,IAAIC,EAAmB9E,EAAUwC,QAAQzP,GACrCyN,GAAW,OAAKR,GACpBQ,EAASkC,OAAOoC,EAAkB,GAElCxE,EAAQC,GACRN,EAAaO,GA2M+BuE,CAAUT,EAAIvR,cAMtD,kBAAC,EAAApD,YAAD,KACI,kBAAC,EAAAI,OAAD,CACI,cAAY,4BACZE,UAAU,uBACVD,QAAQ,OACRuE,KAAO,kBAAC,MAAD,MACPuB,QA7OD,WACX,IAAM/C,GAAKyM,EAAAA,GAAAA,KACXc,EAAQD,EAAK2E,OAAO,CAAC,CACjBjS,GAAAA,EACArB,WAAY,QACZ+N,OAAQ,MACRlP,KAAM,EACNoB,KAAMC,EAAAA,OAEVqO,EAAaD,EAAUgF,OAAO,CAAEjS,OA+NxB,oBChRhB,GAnC+B,SAAC,GAAiB,QAAZ/B,GAAY,aAC7C,GAA6BqB,EAAAA,EAAAA,WAArBC,EAAR,EAAQA,OAAQC,EAAhB,EAAgBA,SACR6C,GAAUC,EAAAA,EAAAA,GAAYrE,GAAtBoE,MACR,GACMtD,EAAAA,EAAAA,WAAiB,QAAR,EAAAS,WAAA,mBAAY3E,cAAZ,eAAqB,+BAAgC,QADpE,eAAQsM,EAAR,KAAkB+K,EAAlB,MAGAzS,EAAAA,EAAAA,YAAU,WACNF,EAAO8C,EAAM1H,KAAMwM,KACpB,CAAEA,IAEL,IAAMpE,EAAU,SAAC2H,EAAGkE,GAChBsD,EAAYtD,EAAI2B,cAAcvQ,KAGlC,OACI,oCACI,kBAAC,EAAAmS,YAAD,CACI,cAAY,yBACZ,aAAW,iCACX,kBAAC,EAAAC,gBAAD,CACI/O,SAAWN,EACXsP,KAAK,6BACLC,SAAS,OACTtP,WAA0B,SAAbmE,IACjB,kBAAC,EAAAiL,gBAAD,CACI/O,SAAWN,EACXsP,KAAK,gCACLC,SAAS,SACTtP,WAA0B,WAAbmE,EACb,cAAY,wC,0rBCxBhC,IAAMoL,GAAe,SAAC,GAAkH,IAAhHC,EAAgH,EAAhHA,OAAQC,EAAwG,EAAxGA,SAAUC,EAA8F,EAA9FA,QAASC,EAAqF,EAArFA,sBAAuBC,EAA8D,EAA9DA,sBAAuBhP,EAAuC,EAAvCA,YAAa1G,EAA0B,EAA1BA,UAAce,GAAY,aACpI,OAAOuU,EAAS,kBAAC,KAAD,QACZA,OAASA,EACTtV,UAAS,uBAAmBA,EAAY,IAAH,OAAOA,GAAc,IAC1D2V,aAAe,CAAEhY,QAAQ,GACzBiY,aAAe,SAAC7U,GAAD,OAAW,kBAAC,MAAD,UAAsBA,EAAtB,CAA8B8U,kBAAmB,MAC3EN,SAAW,SAACO,GAAD,OAAgBP,EAASO,IACpCC,gBAAe,MAAQL,GACvBM,gBAAe,SACRA,EAAAA,IADQ,IAEXC,OAAQC,EACRC,OAAQjR,EACRkR,OAAQ9I,GAAAA,EACR,mBAAoB,CAChBxP,UAAW2I,EACXC,YAAAA,GAEJ,gBAAiBiF,EACjB,wBAAyB0K,GACzB,oBAAqBC,GACrB,kBAAmB3J,GACnB,4BAA6B4J,GAC7B,4BAA6BC,IAC1Bf,GAEPgB,SAAWjB,GACNzU,IAAa,kBAAC,EAAA+D,QAAD,OAG1BuQ,GAAapV,UAAY,CACrBqV,OAAQpV,IAAAA,OACRqV,SAAUrV,IAAAA,KAAAA,WACVsV,QAAStV,IAAAA,KAAAA,WACTuV,sBAAuBvV,IAAAA,OAAA,UAClBA,IAAAA,OAAmBA,IAAAA,UAAoB,CAAEA,IAAAA,KAAgBA,IAAAA,MAAgB,CACtEpC,UAAWoC,IAAAA,WAGnBwV,sBAAuBxV,IAAAA,OAAA,UAClBA,IAAAA,OAAmBA,IAAAA,OAExBwG,YAAaxG,IAAAA,OACbF,UAAWE,IAAAA,QAGf,Y,oDCxDA,UACI1C,MAAO,sBACP2C,YAAa,kBAAC,EAAAC,MAAD,CAAOC,aAAa,KAAKC,KAAK,MAA9B,2CACb7C,KAAM,iBACN8C,UAAW,qBACX7C,SAAU,gBAAGC,EAAH,EAAGA,OAAH,OAAgBC,EAAeD,EAAQ,CAAEX,SAAS,KAC5Da,OAAQ,CACJ,CACIC,UAAWC,EAAAA,EAAAA,WACXN,KAAM,uBACNO,MAAO,gHAC+E,6BAD/E,+DAKX,CACIF,UAAWC,EAAAA,EAAAA,WACXN,KAAM,iBACNuC,UAAW,YACX,cAAe,iBACfrB,KAAM,OACNX,MAAO,iBACPS,YAAY,EACZC,SAAU,CACN,CACIC,KAAMC,EAAAA,EAAAA,UAEV,CACID,KAAMC,EAAAA,EAAAA,aACN8X,UAAW,QC7B/B,IACIlZ,MAAO,kBACP2C,YAAa,kBAAC,EAAAC,MAAD,CAAOC,aAAa,KAAKC,KAAK,MAA9B,wCACb7C,KAAM,sBACN8C,UAAW,qBACX7C,SAAU,gBAAGC,EAAH,EAAGA,OAAH,OAAgBC,EAAeD,EAAQ,CAAEX,SAAS,EAAMC,YAAY,EAAMC,WAAW,KAC/FW,OAAQ,CACJ,CACIC,UAAWC,EAAAA,EAAAA,WACXN,KAAM,oBACNO,MAAO,kBAAC,EAAA2B,KAAD,sEAIX,CACI7B,UAAW,wBACXL,KAAM,yBAEV,CACIK,UAAWC,EAAAA,EAAAA,WACXN,KAAM,oBACNO,MAAO,oCACH,kBAAC,EAAAoC,MAAD,CAAOC,aAAa,MAApB,eACA,kBAAC,EAAAV,KAAD,6FAMR,CACI7B,UAAWC,EAAAA,EAAAA,WACXN,KAAM,kBACNuC,UAAW,YACX,cAAe,kBACfrB,KAAM,OACNX,MAAO,YACP2Y,UAAU,EACVlY,YAAY,EACZC,SAAU,CACN,CACIC,KAAMC,EAAAA,EAAAA,UAEV,CACID,KAAMC,EAAAA,EAAAA,QACNgC,QAAS,6EACTC,QAAS,oCAIrB,CACI/C,UAAW,oBACXL,KAAM,oBACN,cAAe,oBACfkZ,UAAU,EACVlY,YAAY,GAEhB,CACIX,UAAWC,EAAAA,EAAAA,WACXN,KAAM,wBACNuC,UAAW,YACX,cAAe,wBACfrB,KAAM,OACNX,MAAO,kBACPS,YAAY,EACZC,SAAU,CACN,CACIC,KAAMC,EAAAA,EAAAA,UAEV,CACID,KAAMC,EAAAA,EAAAA,QACNgC,QAAS,6EACTC,QAAS,0CAIrB,CACI/C,UAAWC,EAAAA,EAAAA,WACXN,KAAM,uBACNuC,UAAW,YACX,cAAe,uBACfrB,KAAM,OACNX,MAAO,iBACPS,YAAY,EACZC,SAAU,CACN,CACIC,KAAMC,EAAAA,EAAAA,UAEV,CACID,KAAMC,EAAAA,EAAAA,QACNgC,QAAS,uBACTC,QAAS,0IC5F7B,IACIrD,MAAO,WACPC,KAAM,WACN8C,UAAW,uBACX7C,SAAU,SACVG,OAAQ,CACJ,CACIC,UAAWC,EAAAA,EAAAA,WACXN,KAAM,0BACNO,MAAO,kBAAC,EAAA2B,KAAD,yFAEX,CACI7B,UAAW,mBACXL,KAAM,oBACNO,MAAO,uBCZnB,IAAM4Y,GAAoB,WACtB,OAAO,kBAAC,EAAAxX,QAAD,CACHC,cAAY,EACZC,SAAS,QACTG,YAAc,kBAAC,EAAAC,YAAD,KACV,kBAAC,EAAAC,KAAD,qHAKJ,kBAAC,EAAAG,OAAD,CACIC,QAAQ,QACR,aAAW,yBACX,mBAAiB,8BACjBC,UAAU,+BACV,kBAAC,KAAD,SAKZ,UACIxC,MAAO,eACPC,KAAM,eACNC,SAAU,4BACVG,OAAQ,CACJ,CACIC,UAAWC,EAAAA,EAAAA,MACXC,MAAO,+BACPP,KAAM,kBACNS,aAAc,wBACdC,QAAS,CACL,CACIH,MAAO,oDACP6Y,YAAa,8CACbrY,MAAO,wBACP,cAAe,+BAEnB,CACIR,MAAO,gCACP6Y,YAAa,8BACbrY,MAAO,eACPwB,UAAW,aACX,cAAe,sBAEnB,CACIhC,MAAO,iBACPQ,MAAO,iBACPwB,UAAW,aACX,cAAe,0BAI3B,CACIlC,UAAW,kBACXL,KAAM,8BACNkZ,UAAU,EACV3Y,MACI,2EAEI,kBAAC4Y,GAAD,OAGRpW,UAAW,CACPC,GAAI,CACA,CAAEC,KAAM,kBAAmBC,GAAI,yBAC/B,CAAED,KAAM,kBAAmBC,GAAI,kBAGvClC,YAAY,EACZC,SAAU,CACN,CACIC,KAAMC,EAAAA,EAAAA,YAIlB,CACId,UAAWC,EAAAA,EAAAA,WACXN,KAAM,sCACNO,MACI,gFAEI,kBAAC,EAAA8B,OAAD,CACIhC,UAAU,IACVkO,OAAO,SACPjM,QAAQ,OACRuE,KAAO,kBAAC,MAAD,MACPmI,aAAa,QACbC,UAAQ,EACRR,KAAK,8BAPT,oBAYR1L,UAAW,CACPC,GAAI,CACA,CAAEC,KAAM,kBAAmBC,GAAI,yBAC/B,CAAED,KAAM,kBAAmBC,GAAI,mBAI3C,CACI7C,UAAWC,EAAAA,EAAAA,WACXN,KAAM,8BACNO,MACI,kBAAC,EAAA0B,YAAD,KACI,kBAAC,EAAAC,KAAD,CAAM7B,UAAY0G,EAAAA,aAAAA,IAAlB,kBACA,kBAAC,EAAA7E,KAAD,0HAIA,kBAAC,EAAAA,KAAD,yCAKRa,UAAW,CACPC,GAAI,CACA,CAAEC,KAAM,kBAAmBC,GAAI,uB,2BCrH7CmW,GAAgB,SAAC,GAA8C,QAA5CC,aAAgBC,EAA4B,EAA5BA,OAAQC,EAAoB,EAApBA,OAAQC,EAAY,EAAZA,KACrD,GAAkCrV,EAAAA,EAAAA,WAAS,GAA3C,eAAQsV,EAAR,KAAkBC,EAAlB,KACA,GAAoCC,EAAAA,EAAAA,YAAWC,GAAAA,SAAvCC,EAAR,EAAQA,WAAYC,EAApB,EAAoBA,YACpB,OAAO,kBAAC,MAAD,MACF,kBACG,kBAAC,aAAD,KACI,kBAAC,EAAA1X,OAAD,CACIC,QAAQ,UACRpB,KAAK,SACL6M,YAAcgM,EAAYC,OAASD,EAAYlV,WAAWoV,YAAcP,EACxEnK,UAAYmK,EACZtR,QAAU,WACN2R,EAAYjC,SAAS,CACjB5X,OAAQ6Z,EAAYlV,WAAW3E,OAC/ByZ,YAAAA,MAGND,EAAW,iBAAmBF,GAEpC,kBAAC,EAAAnX,OAAD,CAAQnB,KAAK,SAASoB,QAAQ,YAAY8F,QAAU0R,EAAa/L,WAAa2L,GACzED,GAEL,yBAAKlX,UAAU,8BACX,kBAAC,EAAAF,OAAD,CAAQnB,KAAK,SAASoB,QAAQ,OAAO8F,QAAU2R,EAAYf,SAAWjL,WAAa2L,GAC9EH,SAQzBF,GAAc7W,UAAY,CACtB8W,aAAc7W,IAAAA,MAAgB,CAC1B8W,OAAQ9W,IAAAA,KACR+W,OAAQ/W,IAAAA,KACRgX,KAAMhX,IAAAA,OAEViX,SAAUjX,IAAAA,MAGd,MC7CA,IACIzC,KAAM,SACND,MAAO,SACPma,QD0CJ,GCzCI9Z,OAAQ,CACJ,CACIJ,KAAM,SACNK,UAAW,YCJvB,IACIN,MAAO,4BACPC,KAAM,4BACN8C,UAAW,uBACX7C,SAAU,WACVG,OAAQ,CACJ,CACIC,UAAWC,EAAAA,EAAAA,WACXN,KAAM,2CACNO,MAAO,oCACH,kBAAC,EAAA2B,KAAD,gFACA,kBAAC,EAAAA,KAAD,+HAKR,CACI7B,UAAW,4BACXL,KAAM,4BACNO,MAAO,qCAEX,CACIF,UAAW,4BACXL,KAAM,4BACNO,MAAO,6BACPU,SAAU,CAAC,CAAEC,KAAM,oCAAsC,CAAEA,KAAMC,EAAAA,EAAAA,WACjE4B,UAAW,CACPE,KAAM,4BACNC,GAAI,aC7BpB,IACIlD,KAAM,UACND,MAAO,UACPE,SAAU,eACVG,OAAQ,CACJ,CACIC,UAAWC,EAAAA,EAAAA,WACXN,KAAM,uBACNO,MAAO,oIAIX,CACIF,UAAWC,EAAAA,EAAAA,WACXN,KAAM,aACNkB,KAAM,OACNX,MAAO,aACPU,SAAU,CACN,CACIC,KAAMC,EAAAA,EAAAA,QACNgC,QAAS,YACTC,QAAS,2E,2GCI7B,SA7ByC,kBAAM,SAAAQ,GAC3C,GAAKA,EAAL,CAIA,IALkD,EAK9CuW,EAAU,GALoC,E,65BAAA,CAMjCvW,GANiC,IAMlD,2BAAsB,KACZqN,EADY,QACJjN,WACViN,KAAMkJ,EACNA,EAAQlJ,KAERkJ,EAAQlJ,GAAM,GAX4B,8BAgBlD,IADA,IAAIuF,EAAa,GACjB,MAAuB7V,OAAOC,QAAQuZ,GAAtC,eAAgD,CAA3C,sBAAQC,EAAR,UACO,GACJ5D,EAAW/J,KAAK2N,GAIxB,IAAI1D,EAAOyD,EAAQ,MAAQ,EAC3B,OAA6B,IAAtB3D,EAAWhP,QAAgBkP,OAAOtP,EAAY,CACjDoP,WAAYA,IAAe,QAAKpP,EAAYoP,EAC5CE,KAAAA,M,orBC6PR,SAhF0B,WACtB,IAAM2D,GAAWC,EAAAA,GAAAA,MACXC,GAAWC,EAAAA,GAAAA,eACjB,OAAO,kBAAC,GAAD,CACHzC,QAAU,kBAAMwC,EAAS,MACzBzC,SAAW,YAA6B,IAA1B5X,EAA0B,EAA1BA,OAAQyZ,EAAkB,EAAlBA,YAClBA,GAAY,kBAAM,KAClB,IAAMc,EAjLH,SAACva,GAAW,kBACnBwa,EAAiB,CACjB7R,SAAQ,UAAE3I,EAAO,4BAAT,aAAE,EAA6BW,KAAI,SAAAiQ,GAAC,OAAIA,EAAE9Q,SAqBtD,GAlBkC,0BAA9BE,EAAO,mBACPwa,EAAexC,aAAe,CAC1B,iBAAkBhY,EAAO,+BACzB8E,UAAU,EACV2V,aAAcC,OAAO1a,EAAO,iCAC5B,aAAc,+BACd,WAAY,2BAEqB,iBAA9BA,EAAO,qBACdwa,EAAexC,aAAe,CAC1B,iBAAkBhY,EAAO,+BACzB8E,UAAU,EACV2V,aAAcC,OAAO1a,EAAO,iCAC5B,aAAc,+BACd,WAAY,4BAIwB,WAAxCA,EAAO,6BAA2C,CAClDwa,EAAeG,WAAa,GADsB,Q,65BAAA,CAElC3a,EAAO,8BAF2B,IAElD,2BAAqD,KAA5C0D,EAA4C,QACjD8W,EAAeG,WAAWpO,KAAK,CAC3BzI,WAAYJ,EAAII,WAChB8W,SAAUlX,EAAIf,KAAOe,EAAIK,QALiB,+BAUtD,IAAIwW,EAAW,GACf,aAAIva,EAAO,6BAAX,OAAI,EAA8BR,IAAK,CACnC,IAAIqb,EAAU,CACVC,aAAc9a,EAAOZ,QACrB2b,WAAY/a,MAAAA,OAAF,EAAEA,EAAS,cACrBgb,eAAgB,CACZ,CACI9P,aAAc,SACd+P,WAAY,MACZC,eAAgB,CACZla,KAAM,MACNR,QAAS,CACL2a,oBAAqB,CAAEnb,EAAO,uBAI9Cwa,eAAAA,GAEJD,EAAShO,KAAKsO,GAGlB,aAAI7a,EAAO,6BAAX,OAAI,EAA8BP,OAAQ,CACtC,IAAI2b,EAAQ,GACZ,OAAQpb,EAAO,wBACX,IAAK,gBACDob,EAAQ,QAAH,OAAWpb,EAAO,iBACvB,MACJ,IAAK,iBACDob,EAAQ,kBAAH,OAAqBpb,EAAO,iBACjC,MACJ,IAAK,cACDob,EAAQ,SAAH,OAAYpb,EAAO,iBACxB,MACJ,IAAK,SACDob,EAAQ,UAAH,OAAapb,EAAO,kBAIjC,IAAI6a,EAAU,CACVC,aAAc9a,EAAOZ,QACrB2b,WAAY/a,MAAAA,OAAF,EAAEA,EAAS,cACrBgb,eAAgB,CACZ,CACI9P,aAAc,SACd+P,WAAY,MACZC,eAAgB,CACZla,KAAM,MACNR,QAAS,CACL2a,oBAAqB,CAAEC,OAIvCZ,eAAAA,GAGJD,EAAShO,KAAKsO,GAGlB,aAAI7a,EAAO,6BAAX,OAAI,EAA8BN,MAAO,CACrC,IAAImb,EAAU,CACVC,aAAc9a,EAAOZ,QACrB2b,WAAY/a,MAAAA,OAAF,EAAEA,EAAS,cACrBgb,eAAgB,CACZ,CACI9P,aAAc,SACd+P,WAAY,MACZC,eAAgB,CACZla,KAAM,QACNR,QAAS,CACL6a,UAAWrb,EAAO,mBAClBsb,gBAAiBtb,EAAO,yBACxBub,eAAgBvb,EAAO,4BAIvCwa,eAAAA,GAEJD,EAAShO,KAAKsO,GAGlB,aAAI7a,EAAO,6BAAX,OAAI,EAA8BgH,QAAS,CACvC,IAAI6T,EAAU,CACVC,aAAc9a,EAAOZ,QACrB2b,WAAY/a,MAAAA,OAAF,EAAEA,EAAS,cACrBgb,eAAgB,CACZ,CACI9P,aAAc,SACd+P,WAAY,UACZC,eAAgB,CACZla,KAAM,SACNR,QAAS,MAGrBga,eAAAA,GAEJD,EAAShO,KAAKsO,GAGlB,aAAI7a,EAAO,6BAAX,OAAI,EAA+B,eAAgB,CAC/C,IAAI6a,EAAU,CACVC,aAAc9a,EAAOZ,QACrB2b,WAAY/a,MAAAA,OAAF,EAAEA,EAAS,cACrBgb,eAAgB,CACZ,CACI9P,aAAc,SACd+P,WAAY,cACZC,eAAgB,CACZla,KAAM,SACNR,QAAS,MAGrBga,eAAAA,GAEJD,EAAShO,KAAKsO,GAGlB,aAAI7a,EAAO,6BAAX,OAAI,EAA+B,mBAAoB,CACnD,IAAI6a,EAAU,CACVC,aAAc9a,EAAOZ,QACrB2b,WAAY/a,MAAAA,OAAF,EAAEA,EAAS,cACrBgb,eAAgB,CACZ,CACI9P,aAAc,SACd+P,WAAY,kBACZC,eAAgB,CACZla,KAAM,SACNR,QAAS,MAGrBga,eAAAA,GAEJD,EAAShO,KAAKsO,GAGlB,OAAON,EAUkBiB,CAAOxb,GACxByb,QAAQC,IAAInB,EAAS5Z,KAAI,SAAAka,GAAO,OAAI1P,EAAAA,EAAAA,aAAiB0P,GAASpL,MAAK,SAACkM,GAChExB,GAASyB,EAAAA,GAAAA,IAAa,SACfD,GADc,IAEjBd,QAAAA,EACAgB,aAAc,CAAEC,OAAQ,cACzB,WAEFrM,MAAK,WACF4K,EAAS,KACTF,GAAS4B,EAAAA,GAAAA,IAAgB,CACrB3Z,QAAS,UACTvC,MAAO,iCAGX4Z,GAAY,MAdpB,OAgBW,SAACuC,GACJ7B,GAAS4B,EAAAA,GAAAA,IAAgB,CACrB3Z,QAAS,SACTvC,MAAO,kCACPqZ,YAAa,eAAiB8C,EAAIL,SAASG,OAAS,KAAOE,EAAIL,SAASM,cAG5ExC,GAAY,OAGxB1Q,YAAY,SACZgP,sBAAwB,CAAEmE,iCAAAA,IAC1BvE,OAAS,CACLzX,OAAQ,CACJ,CACIC,UAAWC,EAAAA,EAAAA,OACXN,KAAM,uBACNuC,UAAW,gBACX8Z,WAAW,EACXC,SAAS,EACThD,aAAc,CACVE,OAAQ,gBAEZ+C,YAAY,EACZxc,MAAO,eACPyc,WAAY,CAAE,qBAAsB,WACpCpD,YAAa,2FAAsD,kBAAC,EAAA/W,OAAD,CAC/DhC,UAAU,IACVkO,OAAO,SACPjM,QAAQ,OACRuE,KAAO,kBAAC,MAAD,MACPmI,aAAa,QACbC,UAAQ,EACRR,KAAK,yJAP0D,kBAcnErO,OAAQ,CACJqc,GACAC,EACAC,GACAC,EACAC,GACAC,GACAjU,GACAkU,GACAvE,W,+GCzQlBwE,EAAc,CAAEC,QAAS,CAAE,eAAgB,qB,wCAEjD,WAA4BC,GAA5B,uFAE0BC,IAAAA,KAAWC,EAAAA,GAAAA,OADtB,YACsDF,EAAMF,GAF3E,cAEUjC,EAFV,yBAGWA,EAAQzP,MAHnB,4C,8DAMA,WAA2B+R,EAAOC,GAAlC,kFACUC,EAAS,IAAIC,gBAAgB,CAC/BH,MAAAA,EACAC,OAAAA,IAEApM,EAAO,aAAeqM,EAAOE,WALrC,SAM0BN,IAAAA,IAAUC,EAAAA,GAAAA,OAAyBlM,IAN7D,cAMU6J,EANV,yBAOWA,EAAQzP,MAPnB,4C,8DAUA,WAAgCjG,GAAhC,gFACQ6L,EAAO,aAAe7L,EAD9B,SAE0B8X,IAAAA,IAAUC,EAAAA,GAAAA,OAAyBlM,IAF7D,cAEU6J,EAFV,yBAGWA,EAAQzP,MAHnB,4C,8DAMA,WAA2B0P,EAAc5P,EAAcsS,EAAQL,GAA/D,kFACUE,EAAS,IAAIC,gBAAgB,CAC/BxC,aAAAA,EACA5P,aAAAA,EACAsS,OAAAA,IAEJL,GAASE,EAAOI,OAAO,QAASN,GAC5BnM,EAAO,aAAeqM,EAAOE,WAPrC,SAQ0BN,IAAAA,IAAUC,EAAAA,GAAAA,OAAyBlM,IAR7D,cAQU6J,EARV,yBASWA,EAAQzP,MATnB,4C,8DAYA,oGAE0B6R,IAAAA,IAAUC,EAAAA,GAAAA,OADrB,aADf,cAEUrC,EAFV,yBAGWA,EAAQzP,MAHnB,4C,8DAMA,oGAE0B6R,IAAAA,IAAUS,EAAAA,GAAAA,OADnB,qBADjB,cAEU7C,EAFV,yBAGWA,EAAQzP,KAAK4R,MAHxB,4C,sBAMA,SACIW,a,SA/CwB,G,gCAgDxBC,Y,SA1CuB,EAAZA,G,gCA2CXC,iB,SAjC4B,G,gCAkC5BC,Y,SA5BuB,EAAZA,EAAAA,EAAAA,G,gCA6BXC,W,2CACAC,kB,yIC5DG,IAAMd,EAAoB,wBACpBQ,EAAW,eACX/d,EAAS,UAET8R,EAAW,KAAH,IAAG,KAAQ,GACnBxN,EAAW,KAAH,IAAG,KAAQ,GACnBD,EAAW,KAAH,IAAG,KAAQ,I,iHCInBia,EAAgB,SAACC,GAAD,MAAY,CACrCld,KAAMmd,EAAAA,EAAAA,eACNC,QAAS,CAAEF,MAAAA,KAGFtC,EAAe,SAACyC,EAASC,GAAV,MAAsB,CAC9Ctd,KAAMmd,EAAAA,EAAAA,cACNC,QAAS,CAAEC,QAAAA,EAASC,OAAAA,KAoBXC,EAAuB,SAACpZ,EAAI2W,GAAL,MAAiB,CACjD9a,KAAMmd,EAAAA,EAAAA,uBACNC,QAAS,CAAEjZ,GAAAA,EAAI2W,OAAAA,KAGN0C,EAAmB,SAACrZ,GAAD,0CAAQ,WAAMgV,GAAN,uFACdhP,EAAAA,EAAAA,iBAAqBhG,GADP,OAC9B0V,EAD8B,OAEpCV,EAASoE,EAAqBpZ,EAAI0V,EAAQgB,eAFN,2CAAR,uDA+FhC,SACI4C,YAtFuB,SAACtB,EAAOC,GAAR,0CAAmB,WAAMjD,GAAN,uFACpBhP,EAAAA,EAAAA,YAAgBgS,EAAOC,GADH,QACpCvC,EADoC,QAElCzP,KAAKzK,KAAI,SAAA0d,GACblE,EAASyB,EAAayC,GAAS,IAC/BlE,EAASqE,EAAiBH,EAAQlZ,QAEtCgV,GAXiC7O,EAWHuP,EAAQxP,KAAKC,MAXC,CAC5CtK,KAAMmd,EAAAA,EAAAA,uBACNC,QAAS,CAAE9S,MAAAA,MAG+B,iCALV,IAACA,IAKS,OAAnB,uDAuFvBoT,aAvHwB,SAACC,GAAD,0CAAoB,WAAMxE,GAAN,8EAEtCU,EAAU1P,EAAAA,EAAAA,aAAiBwT,GAFW,kBAGrC9D,EAAQpL,MAAK,SAAAkM,GAGhB,IAAM0C,EAAU5d,OAAOme,OAAO,GAAIjD,EAAU,CAAEd,QAAS8D,GAAmB,CAAE9C,aAAc,CAAEC,OAAQ,aACpG3B,EAASyB,EAAayC,GAAS,OAJ5B,OAKE,SAAArC,GACuB,MAAxBA,EAAIL,SAASG,OACb3B,EAAS8D,EAAc,2CAEvB9D,EAAS8D,EAAc,qDAZa,2CAApB,uDAwHxBY,eAzIJ,SAAwBR,GACpB,MAAO,CACHrd,KAAMmd,EAAAA,EAAAA,gBACNC,QAAS,CAAEC,QAAAA,KAuIfG,iBAAAA,EACAM,WAjFJ,YAAsC,IAAhBC,EAAgB,EAAhBA,KAAMC,EAAU,EAAVA,OACxB,MAAO,CACHhe,KAAMmd,EAAAA,EAAAA,YACNC,QAAS,CACLW,KAAAA,EACAC,OAAAA,KA6ERC,sBAxEJ,YAAuD,IAAtBzf,EAAsB,EAAtBA,IAAKE,EAAiB,EAAjBA,MAAOD,EAAU,EAAVA,OACzC,MAAO,CACHuB,KAAMmd,EAAAA,EAAAA,wBACNC,QAAS,CACL5e,IAAAA,EACAE,MAAAA,EACAD,OAAAA,KAmERyf,aA9DJ,YAA6C,IAArBC,EAAqB,EAArBA,kBACpB,MAAO,CACHne,KAAMmd,EAAAA,EAAAA,eACNC,QAAS,CACLe,kBAAAA,KA2DRC,eAtDJ,YAAqE,IAA3ClR,EAA2C,EAA3CA,SAAUmR,EAAiC,EAAjCA,eAAgBC,EAAiB,EAAjBA,cAChD,MAAO,CACHte,KAAMmd,EAAAA,EAAAA,iBACNC,QAAS,CACLlQ,SAAAA,EACAmR,eAAAA,EACAC,cAAAA,KAiDRC,gBA5CJ,YAA6D,IAAlCC,EAAkC,EAAlCA,YAAaL,EAAqB,EAArBA,kBACpC,MAAO,CACHne,KAAMmd,EAAAA,EAAAA,kBACNC,QAAS,CACLoB,YAAAA,EACAL,kBAAAA,KAwCRM,oBAnCJ,SAA6B3V,GACzB,MAAO,CACH9I,KAAMmd,EAAAA,EAAAA,sBACNC,QAAStU,IAiCb4V,gBA7BJ,YAAoE,IAAzCC,EAAyC,EAAzCA,cAAe7a,EAA0B,EAA1BA,SAAU2V,EAAgB,EAAhBA,aAChD,MAAO,CACHzZ,KAAMmd,EAAAA,EAAAA,iBACNC,QAAS,CACLuB,cAAAA,EACA7a,SAAAA,EACA2V,aAAAA,KAwBRmF,gBAnBJ,SAAyBC,GACrB,MAAO,CACH7e,KAAMmd,EAAAA,EAAAA,kBACNC,QAASyB,M","sources":["webpack:///./src/Components/CreateImageWizard/steps/imageOutputStepMapper.js","webpack:///./src/Components/CreateImageWizard/steps/imageOutput.js","webpack:///./src/Components/CreateImageWizard/steps/googleCloud.js","webpack:///./src/Components/CreateImageWizard/formComponents/ReviewStep.js","webpack:///./src/Components/CreateImageWizard/formComponents/TargetEnvironment.js","webpack:///./src/Components/CreateImageWizard/formComponents/Packages.js","webpack:///./src/Components/CreateImageWizard/formComponents/RadioWithPopover.js","webpack:///./src/Components/CreateImageWizard/formComponents/AzureAuthButton.js","webpack:///./src/Components/CreateImageWizard/formComponents/AzureAuthExpandable.js","webpack:///./src/Components/CreateImageWizard/formComponents/ActivationKeys.js","webpack:///./src/Components/CreateImageWizard/formComponents/MountPoint.js","webpack:///./src/Components/CreateImageWizard/formComponents/SizeUnit.js","webpack:///./src/Components/CreateImageWizard/formComponents/FileSystemConfiguration.js","webpack:///./src/Components/CreateImageWizard/formComponents/FileSystemConfigToggle.js","webpack:///./src/Components/CreateImageWizard/ImageCreator.js","webpack:///./src/Components/CreateImageWizard/steps/aws.js","webpack:///./src/Components/CreateImageWizard/steps/msAzure.js","webpack:///./src/Components/CreateImageWizard/steps/packages.js","webpack:///./src/Components/CreateImageWizard/steps/registration.js","webpack:///./src/Components/CreateImageWizard/formComponents/CustomSubmitButtons.js","webpack:///./src/Components/CreateImageWizard/steps/review.js","webpack:///./src/Components/CreateImageWizard/steps/fileSystemConfiguration.js","webpack:///./src/Components/CreateImageWizard/steps/details.js","webpack:///./src/Components/CreateImageWizard/validators/fileSystemConfigurationValidator.js","webpack:///./src/Components/CreateImageWizard/CreateImageWizard.js","webpack:///./src/api.js","webpack:///./src/constants.js","webpack:///./src/store/actions/actions.js"],"sourcesContent":["import { RHEL_8 } from '../../../constants.js';\n\nexport default ({ 'target-environment': targetEnv, release } = {}, { skipAws, skipGoogle, skipAzure } = {}) => {\n    if (!skipAws && targetEnv?.aws) {\n        return 'aws-target-env';\n    }\n\n    if (!skipGoogle && targetEnv?.google) {\n        return 'google-cloud-target-env';\n    }\n\n    if (!skipAzure && targetEnv?.azure) {\n        return 'ms-azure-target-env';\n    }\n\n    return release === RHEL_8 ? 'registration' : 'File system configuration';\n};\n","import componentTypes from '@data-driven-forms/react-form-renderer/component-types';\nimport validatorTypes from '@data-driven-forms/react-form-renderer/validator-types';\nimport nextStepMapper from './imageOutputStepMapper';\nimport { RHEL_8 } from '../../../constants.js';\n\nexport const releaseValues = {\n    [RHEL_8]: 'Red Hat Enterprise Linux (RHEL) 8',\n    'centos-8': 'CentOS Stream 8',\n    'centos-9': 'CentOS Stream 9',\n};\n\nexport default {\n    title: 'Image output',\n    name: 'image-output',\n    nextStep: ({ values }) => nextStepMapper(values),\n    fields: [\n        {\n            component: componentTypes.SELECT,\n            label: 'Release',\n            name: 'release',\n            simpleValue: true,\n            initialValue: RHEL_8,\n            options: Object.entries(releaseValues).map(([ key, title ]) => ({\n                label: title,\n                value: key\n            })),\n            isRequired: true,\n            validate: [\n                {\n                    type: validatorTypes.REQUIRED\n                }\n            ],\n        },\n        {\n            component: 'output',\n            name: 'target-environment',\n            label: 'Select target environments',\n            isRequired: true,\n            validate: [\n                {\n                    type: validatorTypes.REQUIRED\n                }\n            ],\n        }\n    ]\n};\n","import React from 'react';\nimport componentTypes from '@data-driven-forms/react-form-renderer/component-types';\nimport validatorTypes from '@data-driven-forms/react-form-renderer/validator-types';\nimport { HelpIcon } from '@patternfly/react-icons';\nimport nextStepMapper from './imageOutputStepMapper';\nimport { Title, Text, Popover, TextContent, TextList, TextListItem, Button } from '@patternfly/react-core';\nimport PropTypes from 'prop-types';\n\nexport const googleAccType = {\n    googleAccount: 'Google account',\n    serviceAccount: 'Service account',\n    googleGroup: 'Google group',\n    domain: 'Domain'\n};\n\nconst PopoverInfo = ({ appendTo }) => {\n    return <Popover\n        appendTo={ appendTo }\n        hasAutoWidth\n        maxWidth='35rem'\n        headerContent={ 'Valid account types' }\n        flipBehavior={ [ 'right', 'bottom', 'top', 'left' ] }\n        bodyContent={ <TextContent>\n            <Text>The following account types can have an image shared with them:</Text>\n            <TextList>\n                <TextListItem>\n                    <strong>Google account:</strong> A Google account represents a developer, an administrator,\n    or any other person who interacts with Google Cloud. e.g., <em>`alice@gmail.com`</em>.\n                </TextListItem>\n                <TextListItem>\n                    <strong>Service account:</strong> A service account is an account for an application instead\n    of an individual end user. e.g., <em>`myapp@appspot.gserviceaccount.com`</em>.\n                </TextListItem>\n                <TextListItem>\n                    <strong>Google group:</strong> A Google group is a named collection of Google accounts and\n    service accounts. e.g., <em>`admins@example.com`</em>.\n                </TextListItem>\n                <TextListItem>\n                    <strong>Google Workspace domain/Cloud Identity domain:</strong> A Google workspace or cloud identity\n    domain represents a virtual group of all the Google accounts in an organization. These domains\n    represent your organization&apos;s internet domain name. e.g., <em>`mycompany.com`</em>.\n                </TextListItem>\n            </TextList>\n        </TextContent> }>\n        <Button\n            variant=\"plain\"\n            aria-label=\"Account info\"\n            aria-describedby=\"google-account-type\"\n            className=\"pf-c-form__group-label-help\">\n            <HelpIcon />\n        </Button>\n    </Popover>;\n};\n\nPopoverInfo.propTypes = {\n    appendTo: PropTypes.any\n};\n\nexport default {\n    title: 'Google Cloud Platform',\n    customTitle: <Title headingLevel=\"h1\" size=\"xl\">Target environment - Google Cloud Platform</Title>,\n    name: 'google-cloud-target-env',\n    substepOf: 'Target environment',\n    nextStep: ({ values }) => nextStepMapper(values, { skipGoogle: true, skipAws: true }),\n    fields: [\n        {\n            component: componentTypes.PLAIN_TEXT,\n            name: 'google-cloud-text-component',\n            label: <Text>\n            Your image will be uploaded to Google Cloud Platform and shared with the email you provide below. <br />\n            The image should be copied to your account within 14 days.\n            </Text>\n        },\n        {\n            component: 'radio-popover',\n            label: 'Type',\n            Popover: PopoverInfo,\n            name: 'google-account-type',\n            initialValue: 'googleAccount',\n            options: Object.entries(googleAccType).map(([ value, label ]) => ({\n                label: value === 'domain' ? 'Google Workspace domain or Cloud Identity domain' : label,\n                value\n            })),\n            isRequired: true,\n            validate: [\n                {\n                    type: validatorTypes.REQUIRED,\n                },\n            ],\n        },\n        {\n            component: componentTypes.TEXT_FIELD,\n            name: 'google-email',\n            'data-testid': 'input-google-email',\n            type: 'text',\n            label: 'Email address',\n            condition: {\n                or: [\n                    { when: 'google-account-type', is: 'googleAccount' },\n                    { when: 'google-account-type', is: 'serviceAccount' },\n                    { when: 'google-account-type', is: 'googleGroup' },\n                    { when: 'google-account-type', is: null },\n                ]\n            },\n            isRequired: true,\n            validate: [\n                {\n                    type: validatorTypes.REQUIRED,\n                },\n                {\n                    type: validatorTypes.PATTERN,\n                    pattern: '[a-z0-9._%+-]+@[a-z0-9.-]+.[a-z]{2,}$',\n                    message: 'Please enter a valid email address'\n                }\n            ],\n        },\n        {\n            component: componentTypes.TEXT_FIELD,\n            name: 'google-domain',\n            type: 'text',\n            label: 'Domain',\n            condition: {\n                when: 'google-account-type',\n                is: 'domain'\n            },\n            isRequired: true,\n            validate: [\n                {\n                    type: validatorTypes.REQUIRED,\n                },\n            ],\n        }\n    ]\n};\n","import React, { useEffect, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport {\n    Button,\n    DescriptionList, DescriptionListTerm, DescriptionListGroup, DescriptionListDescription,\n    List, ListItem,\n    Popover,\n    Spinner,\n    Tabs, Tab, TabTitleText,\n    Text, TextContent, TextVariants, TextList, TextListVariants, TextListItem, TextListItemVariants,\n} from '@patternfly/react-core';\nimport {\n    TableComposable,\n    Thead,\n    Tbody,\n    Tr,\n    Th,\n    Td,\n} from '@patternfly/react-table';\nimport { HelpIcon } from '@patternfly/react-icons';\nimport useFormApi from '@data-driven-forms/react-form-renderer/use-form-api';\nimport { releaseValues } from '../steps/imageOutput';\nimport { googleAccType } from '../steps/googleCloud';\nimport { UNIT_GIB, UNIT_MIB } from '../../../constants';\n\nconst FSReviewTable = ({ ...props }) => {\n    return (\n        <TableComposable\n            aria-label=\"File system configuration table\"\n            variant=\"compact\">\n            <Thead>\n                <Tr>\n                    <Th>Mount point</Th>\n                    <Th>Type</Th>\n                    <Th>Minimum size</Th>\n                </Tr>\n            </Thead>\n            <Tbody data-testid=\"file-system-configuration-tbody-review\">\n                {props.fsc.map((r, ri) =>\n                    <Tr key={ ri }>\n                        <Td className=\"pf-m-width-60\">{ r.mountpoint }</Td>\n                        <Td className=\"pf-m-width-10\">xfs</Td>\n                        <Td className=\"pf-m-width-30\">{ r.size } { r.unit === UNIT_GIB ? 'GiB' : r.unit === UNIT_MIB ? 'MiB' : 'KiB' }</Td>\n                    </Tr>\n                )}\n            </Tbody>\n        </TableComposable>\n    );\n};\n\nFSReviewTable.propTypes = {\n    fsc: PropTypes.arrayOf(PropTypes.object).isRequired,\n};\n\nconst ReviewStep = () => {\n    const [ activeTabKey, setActiveTabKey ] = useState(0);\n    const [ orgId, setOrgId ] = useState();\n    const [ minSize, setMinSize ] = useState();\n    const { change, getState } = useFormApi();\n\n    useEffect(() => {\n        const registerSystem = getState()?.values?.['register-system'];\n        if (registerSystem === 'register-now' || registerSystem === 'register-now-insights') {\n            (async () => {\n                const userData = await insights?.chrome?.auth?.getUser();\n                const id = userData?.identity?.internal?.org_id;\n                setOrgId(id);\n                change('subscription-organization-id', id);\n            })();\n        }\n\n        if (getState()?.values?.['file-system-config-toggle'] === 'manual' &&\n            getState()?.values?.['file-system-configuration']) {\n            let size = 0;\n            for (const fsc of getState().values['file-system-configuration']) {\n                size += (fsc.size * fsc.unit);\n            }\n\n            size = (size / UNIT_GIB).toFixed(1);\n            if (size < 1) {\n                setMinSize(`Less than 1 GiB`);\n            } else {\n                setMinSize(`${size} GiB`);\n            }\n        }\n    });\n\n    const handleTabClick = (event, tabIndex) => {\n        setActiveTabKey(tabIndex);\n    };\n\n    return (\n        <>\n            <Text>\n                    Review the information and click &quot;Create image&quot;\n                    to create the image using the following criteria.\n            </Text>\n            <DescriptionList isCompact isHorizontal>\n                <DescriptionListGroup>\n                    {getState()?.values?.['image-name'] &&\n                        <>\n                            <DescriptionListTerm>Image name</DescriptionListTerm>\n                            <DescriptionListDescription>\n                                {getState()?.values?.['image-name']}\n                            </DescriptionListDescription>\n                        </>\n                    }\n                    <DescriptionListTerm>Release</DescriptionListTerm>\n                    <DescriptionListDescription>\n                        {releaseValues?.[getState()?.values?.release]}\n                    </DescriptionListDescription>\n                </DescriptionListGroup>\n            </DescriptionList>\n            <Tabs isFilled activeKey={ activeTabKey } onSelect={ handleTabClick } className=\"pf-u-w-75\">\n                <Tab eventKey={ 0 } title={ <TabTitleText>Target environment</TabTitleText> } data-testid='tab-target'>\n                    <List isPlain iconSize=\"large\">\n                        {getState()?.values?.['target-environment']?.aws &&\n                            <ListItem icon={ <img className='provider-icon' src='/apps/frontend-assets/partners-icons/aws.svg' /> }>\n                                <TextContent>\n                                    <Text component={ TextVariants.h3 }>\n                                    Amazon Web Services\n                                    </Text>\n                                    <TextList component={ TextListVariants.dl }>\n                                        <TextListItem component={ TextListItemVariants.dt }>Account ID</TextListItem>\n                                        <TextListItem component={ TextListItemVariants.dd }>\n                                            {getState()?.values?.['aws-account-id']}\n                                        </TextListItem>\n                                    </TextList>\n                                </TextContent>\n                            </ListItem>\n                        }\n                        {getState()?.values?.['target-environment']?.google &&\n                            <ListItem\n                                className='pf-c-list__item pf-u-mt-md'\n                                icon={ <img className='provider-icon' src='/apps/frontend-assets/partners-icons/google-cloud-short.svg' /> }>\n                                <TextContent>\n                                    <Text component={ TextVariants.h3 }>Google Cloud Platform</Text>\n                                    <TextList component={ TextListVariants.dl }>\n                                        <TextListItem component={ TextListItemVariants.dt }>\n                                            {googleAccType?.[getState()?.values?.['google-account-type']]}\n                                        </TextListItem>\n                                        <TextListItem component={ TextListItemVariants.dd }>\n                                            {getState()?.values?.['google-email'] || getState()?.values?.['google-domain']}\n                                        </TextListItem>\n                                    </TextList>\n                                </TextContent>\n                            </ListItem>\n                        }\n                        {getState()?.values?.['target-environment']?.azure &&\n                            <ListItem\n                                className='pf-c-list__item pf-u-mt-md'\n                                icon={ <img className='provider-icon' src='/apps/frontend-assets/partners-icons/microsoft-azure-short.svg' /> }>\n                                <TextContent>\n                                    <Text component={ TextVariants.h3 }>Microsoft Azure</Text>\n                                    <TextList component={ TextListVariants.dl }>\n                                        <TextListItem component={ TextListItemVariants.dt }>\n                                        Subscription ID\n                                        </TextListItem>\n                                        <TextListItem component={ TextListItemVariants.dd }>\n                                            {getState()?.values?.['azure-subscription-id']}\n                                        </TextListItem>\n                                        <TextListItem component={ TextListItemVariants.dt }>\n                                    Tenant ID\n                                        </TextListItem>\n                                        <TextListItem component={ TextListItemVariants.dd }>\n                                            {getState()?.values?.['azure-tenant-id']}\n                                        </TextListItem>\n                                        <TextListItem component={ TextListItemVariants.dt }>\n                                        Resource group\n                                        </TextListItem>\n                                        <TextListItem component={ TextListItemVariants.dd }>\n                                            {getState()?.values?.['azure-resource-group']}\n                                        </TextListItem>\n                                    </TextList>\n                                </TextContent>\n                            </ListItem>\n                        }\n                        {getState()?.values?.['target-environment']?.vsphere &&\n                            <ListItem>\n                                <TextContent>\n                                    <Text component={ TextVariants.h3 }>\n                                        VMWare\n                                    </Text>\n                                </TextContent>\n                            </ListItem>\n                        }\n                        {getState()?.values?.['target-environment']?.['guest-image'] &&\n                            <ListItem>\n                                <TextContent>\n                                    <Text component={ TextVariants.h3 }>\n                                        Virtualization - Guest image\n                                    </Text>\n                                </TextContent>\n                            </ListItem>\n                        }\n                        {getState()?.values?.['target-environment']?.['image-installer'] &&\n                            <ListItem>\n                                <TextContent>\n                                    <Text component={ TextVariants.h3 }>\n                                        Bare metal - Installer\n                                    </Text>\n                                </TextContent>\n                            </ListItem>\n                        }\n                    </List>\n                </Tab>\n                {getState()?.values?.release.includes('rhel') &&\n                    <Tab eventKey={ 1 } title={ <TabTitleText>Registration</TabTitleText> } data-testid='tab-registration'>\n                        {getState()?.values?.['register-system'] === 'register-later' &&\n                            <TextContent>\n                                <TextList component={ TextListVariants.dl }>\n                                    <TextListItem component={ TextListItemVariants.dt }>\n                                        Subscription\n                                    </TextListItem>\n                                    <TextListItem component={ TextListItemVariants.dd }>\n                                        Register the system later\n                                    </TextListItem>\n                                </TextList>\n                            </TextContent>\n                        }\n                        {(getState()?.values?.['register-system'] === 'register-now' ||\n                            getState()?.values?.['register-system'] === 'register-now-insights') &&\n                            <TextContent>\n                                <TextList component={ TextListVariants.dl }>\n                                    <TextListItem component={ TextListItemVariants.dt }>\n                                        Subscription\n                                    </TextListItem>\n                                    <TextListItem component={ TextListItemVariants.dd }>\n                                        {getState()?.values?.['register-system'] === 'register-now-insights' &&\n                                            'Register with Subscriptions and Red Hat Insights'\n                                        }\n                                        {getState()?.values?.['register-system'] === 'register-now' &&\n                                            'Register with Subscriptions'\n                                        }\n                                    </TextListItem>\n                                    <TextListItem component={ TextListItemVariants.dt }>\n                                        Activation key\n                                    </TextListItem>\n                                    <TextListItem component={ TextListItemVariants.dd }>\n                                        {getState()?.values?.['subscription-activation-key']}\n                                    </TextListItem>\n                                    <TextListItem component={ TextListItemVariants.dt }>\n                                        Organization ID\n                                    </TextListItem>\n                                    {orgId !== undefined ? (\n                                        <TextListItem component={ TextListItemVariants.dd } data-testid='organization-id'>\n                                            {orgId}\n                                        </TextListItem>\n                                    ) : (\n                                        <TextListItem component={ TextListItemVariants.dd }>\n                                            <Spinner />\n                                        </TextListItem>\n                                    )}\n                                </TextList>\n                            </TextContent>\n                        }\n                    </Tab>\n                }\n                <Tab eventKey={ 2 } title={ <TabTitleText>System configuration</TabTitleText> } data-testid='tab-system'>\n                    <TextContent>\n                        <Text component={ TextVariants.h3 }>File system configuration</Text>\n                        <TextList component={ TextListVariants.dl }>\n                            <TextListItem component={ TextListItemVariants.dt }>\n                                Partitioning\n                            </TextListItem>\n                            <TextListItem component={ TextListItemVariants.dd } data-testid='partitioning-auto-manual'>\n                                {getState()?.values?.['file-system-config-toggle'] === 'manual' ? 'Manual' : 'Automatic'}\n                                {getState()?.values?.['file-system-config-toggle'] === 'manual' &&\n                                 <>\n                                     {' '}\n                                     <Popover\n                                         position=\"bottom\"\n                                         headerContent=\"Partitions\"\n                                         hasAutoWidth\n                                         minWidth=\"30rem\"\n                                         bodyContent={ <FSReviewTable fsc={ getState().values['file-system-configuration'] } /> }>\n                                         <Button\n                                             data-testid='file-system-configuration-popover'\n                                             variant=\"link\"\n                                             aria-label=\"File system configuration info\"\n                                             aria-describedby=\"file-system-configuration-info\">\n                                             View partitions\n                                         </Button>\n                                     </Popover>\n                                 </>\n                                }\n                            </TextListItem>\n                            {getState()?.values?.['file-system-config-toggle'] === 'manual' &&\n                             <>\n                                 <TextListItem component={ TextListItemVariants.dt }>\n                                     Image size (minimum)\n                                     <Popover\n                                         hasAutoWidth\n                                         bodyContent={ <TextContent>\n                                             <Text>\n                                                     Image Builder may extend this size based on requirements,\n                                                     selected packages, and configurations.\n                                             </Text>\n                                         </TextContent> }>\n                                         <Button\n                                             variant=\"plain\"\n                                             aria-label=\"File system configuration info\"\n                                             aria-describedby=\"file-system-configuration-info\"\n                                             className=\"pf-c-form__group-label-help\">\n                                             <HelpIcon />\n                                         </Button>\n                                     </Popover>\n                                 </TextListItem>\n                                 <TextListItem component={ TextListItemVariants.dd }>\n                                     { minSize }\n                                 </TextListItem>\n                             </>\n                            }\n                        </TextList>\n                        <Text component={ TextVariants.h3 }>Packages</Text>\n                        <TextList component={ TextListVariants.dl }>\n                            <TextListItem component={ TextListItemVariants.dt }>\n                                Chosen\n                            </TextListItem>\n                            <TextListItem component={ TextListItemVariants.dd } data-testid='chosen-packages-count'>\n                                {getState()?.values?.['selected-packages']?.length || 0}\n                            </TextListItem>\n                        </TextList>\n                    </TextContent>\n                </Tab>\n            </Tabs>\n        </>\n    );\n};\n\nexport default ReviewStep;\n","import React, { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport useFormApi from '@data-driven-forms/react-form-renderer/use-form-api';\nimport useFieldApi from '@data-driven-forms/react-form-renderer/use-field-api';\nimport { Checkbox, FormGroup, Text, TextVariants, Tile } from '@patternfly/react-core';\nimport './TargetEnvironment.scss';\n\nconst TargetEnvironment = ({ label, isRequired, ...props }) => {\n    const { getState, change } = useFormApi();\n    const { input } = useFieldApi({ label, isRequired, ...props });\n    const [ environment, setEnvironment ] = useState({\n        aws: false,\n        azure: false,\n        google: false,\n        vsphere: false,\n        'guest-image': false,\n        'image-installer': false,\n    });\n\n    useEffect(() => {\n        if (getState()?.values?.[input.name]) {\n            setEnvironment(getState().values[input.name]);\n        }\n    }, []);\n\n    const handleSetEnvironment = (env) => setEnvironment((prevEnv) => {\n        const newEnv = ({\n            ...prevEnv,\n            [env]: !prevEnv[env]\n        });\n        change(input.name, newEnv);\n        return newEnv;\n    });\n\n    return (\n        <>\n            <FormGroup isRequired={ isRequired } label={ label } data-testid=\"target-select\">\n                <FormGroup label={ <Text component={ TextVariants.small }>Public cloud</Text> } data-testid=\"target-public\">\n                    <div className=\"tiles\">\n                        <Tile\n                            className=\"tile pf-u-mr-sm\"\n                            data-testid=\"upload-aws\"\n                            title=\"Amazon Web Services\"\n                            icon={ <img\n                                className='provider-icon'\n                                src={ '/apps/frontend-assets/partners-icons/aws.svg' } /> }\n                            onClick={ () => handleSetEnvironment('aws') }\n                            isSelected={ environment.aws }\n                            isStacked\n                            isDisplayLarge />\n                        <Tile\n                            className=\"tile pf-u-mr-sm\"\n                            data-testid=\"upload-google\"\n                            title=\"Google Cloud Platform\"\n                            icon={ <img\n                                className='provider-icon'\n                                src={ '/apps/frontend-assets/partners-icons/google-cloud-short.svg' } /> }\n                            onClick={ () => handleSetEnvironment('google') }\n                            isSelected={ environment.google }\n                            isStacked\n                            isDisplayLarge />\n                        <Tile\n                            className=\"tile pf-u-mr-sm\"\n                            data-testid=\"upload-azure\"\n                            title=\"Microsoft Azure\"\n                            icon={ <img\n                                className='provider-icon'\n                                src={ '/apps/frontend-assets/partners-icons/microsoft-azure-short.svg' } /> }\n                            onClick={ () => handleSetEnvironment('azure') }\n                            isSelected={ environment.azure }\n                            isStacked\n                            isDisplayLarge />\n                    </div>\n                </FormGroup>\n                { /* Disabled until default user or user customization is present */\n                    /* <FormGroup label={ <Text component={ TextVariants.small }>Private cloud</Text> } data-testid=\"target-private\">\n                    <Checkbox\n                        label=\"VMWare\"\n                        isChecked={ environment.vsphere }\n                        onChange={ () => handleSetEnvironment('vsphere') }\n                        aria-label=\"VMWare checkbox\"\n                        id=\"checkbox-vmware\"\n                        name=\"VMWare\"\n                        data-testid=\"checkbox-vmware\" />\n                </FormGroup> */ }\n                <FormGroup label={ <Text component={ TextVariants.small }>Other</Text> } data-testid=\"target-other\">\n                    <Checkbox\n                        label=\"Virtualization - Guest image\"\n                        isChecked={ environment['guest-image'] }\n                        onChange={ () => handleSetEnvironment('guest-image') }\n                        aria-label=\"Virtualization guest image checkbox\"\n                        id=\"checkbox-guest-image\"\n                        name=\"Virtualization guest image\"\n                        data-testid=\"checkbox-guest-image\" />\n                    { /* Disabled until default user or user customization is present */\n                        /* <Checkbox\n                        label=\"Bare metal - Installer\"\n                        isChecked={ environment['image-installer'] }\n                        onChange={ () => handleSetEnvironment('image-installer') }\n                        aria-label=\"Bare metal installer checkbox\"\n                        id=\"checkbox-image-installer\"\n                        name=\"Bare metal installer\"\n                        data-testid=\"checkbox-image-installer\" /> */ }\n                </FormGroup>\n            </FormGroup>\n        </>\n    );\n};\n\nTargetEnvironment.propTypes = {\n    label: PropTypes.node,\n    isRequired: PropTypes.bool\n};\n\nTargetEnvironment.defaultProps = {\n    label: '',\n    isRequired: false\n};\n\nexport default TargetEnvironment;\n","import React, { useState, useRef, useEffect, useCallback } from 'react';\nimport useFormApi from '@data-driven-forms/react-form-renderer/use-form-api';\nimport useFieldApi from '@data-driven-forms/react-form-renderer/use-field-api';\nimport api from '../../../api';\nimport PropTypes from 'prop-types';\nimport {\n    Button,\n    DualListSelector,\n    DualListSelectorPane,\n    DualListSelectorList,\n    DualListSelectorListItem,\n    DualListSelectorControlsWrapper,\n    DualListSelectorControl,\n    SearchInput,\n    TextContent\n} from '@patternfly/react-core';\nimport { AngleDoubleLeftIcon, AngleLeftIcon, AngleDoubleRightIcon, AngleRightIcon } from '@patternfly/react-icons';\n\n// the fields isHidden and isSelected should not be included in the package list sent for image creation\nconst removePackagesDisplayFields = (packages) => packages.map((pack) => ({\n    name: pack.name,\n    summary: pack.summary,\n}));\n\nconst Packages = ({ defaultArch, ...props }) => {\n    const { change, getState } = useFormApi();\n    const { input } = useFieldApi(props);\n    const packagesSearchName = useRef();\n    const [ packagesAvailable, setPackagesAvailable ] = useState([]);\n    const [ packagesAvailableFound, setPackagesAvailableFound ] = useState(true);\n    const [ packagesChosen, setPackagesChosen ] = useState([]);\n    const [ packagesChosenFound, setPackagesChosenFound ] = useState(true);\n    const [ filterChosen, setFilterChosen ] = useState('');\n    const [ focus, setFocus ] = useState('');\n\n    // this effect only triggers on mount\n    useEffect(() => {\n        const selectedPackages = getState()?.values?.['selected-packages'];\n        if (selectedPackages) {\n            setPackagesChosen(selectedPackages);\n        }\n    }, []);\n\n    const searchResultsComparator = useCallback((searchTerm) => {\n        return (a, b) => {\n            a = a.name.toLowerCase();\n            b = b.name.toLowerCase();\n\n            // check exact match first\n            if (a === searchTerm) {\n                return -1;\n            }\n\n            if (b === searchTerm) {\n                return 1;\n            }\n\n            // check for packages that start with the search term\n            if (a.startsWith(searchTerm) && !b.startsWith(searchTerm)) {\n                return -1;\n            }\n\n            if (b.startsWith(searchTerm) && !a.startsWith(searchTerm)) {\n                return 1;\n            }\n\n            // if both (or neither) start with the search term\n            // sort alphabetically\n            if (a < b) {\n                return -1;\n            }\n\n            if (b < a) {\n                return 1;\n            }\n\n            return 0;\n        };\n    });\n\n    const sortPackages = useCallback((packageList) => {\n        const sortResults = packageList.sort(searchResultsComparator(packagesSearchName.current));\n        setPackagesAvailable(sortResults);\n    });\n\n    // filter the packages by name\n    const filterPackagesAvailable = useCallback((packageList) => {\n        return packageList.filter((availablePackage) => {\n            // returns true if no packages in the available or chosen list have the same name\n            return !packagesChosen.some((chosenPackage) => availablePackage.name === chosenPackage.name);\n        });\n    });\n\n    const getAllPackages = async () => {\n        const args = [\n            getState()?.values?.release,\n            getState()?.values?.architecture || defaultArch,\n            packagesSearchName.current\n        ];\n        let { data, meta } = await api.getPackages(...args);\n        if (data?.length === meta.count) {\n            return data;\n        } else if (data) {\n            ({ data } = await api.getPackages(...args, meta.count));\n            return data;\n        }\n    };\n\n    // call api to list available packages\n    const handlePackagesAvailableSearch = async () => {\n        const packageList = await getAllPackages();\n        if (packageList) {\n            const packagesAvailableFiltered = filterPackagesAvailable(packageList);\n            sortPackages(packagesAvailableFiltered);\n            setPackagesAvailableFound(true);\n        } else {\n            setPackagesAvailable([]);\n            setPackagesAvailableFound(false);\n        }\n    };\n\n    // filter displayed selected packages\n    const handlePackagesChosenSearch = () => {\n        let found = false;\n        const filteredPackagesChosen = packagesChosen.map((pack) => {\n            if (!pack.name.includes(filterChosen)) {\n                pack.isHidden = true;\n            } else {\n                pack.isHidden = false;\n                found = true;\n            }\n\n            return pack;\n        });\n        setPackagesChosenFound(found);\n        setPackagesChosen(filteredPackagesChosen);\n    };\n\n    const keydownHandler = (event) => {\n        if (event.key === 'Enter') {\n            if (focus === 'available') {\n                event.stopPropagation();\n                handlePackagesAvailableSearch();\n            } else if (focus === 'chosen') {\n                event.stopPropagation();\n                handlePackagesChosenSearch();\n            }\n        }\n    };\n\n    useEffect(() => {\n        document.addEventListener('keydown', keydownHandler, true);\n\n        return () => {\n            document.removeEventListener('keydown', keydownHandler, true);\n        };\n    });\n\n    // move selected packages\n    const moveSelected = (fromAvailable) => {\n        const sourcePackages = fromAvailable ? packagesAvailable : packagesChosen;\n        const destinationPackages = fromAvailable ? packagesChosen : packagesAvailable;\n\n        const updatedSourcePackages = sourcePackages.filter((pack) => {\n            if (pack.selected) {\n                pack.selected = false;\n                destinationPackages.push(pack);\n                return false;\n            }\n\n            return true;\n        });\n\n        if (fromAvailable) {\n            sortPackages(updatedSourcePackages);\n            setPackagesChosen(destinationPackages);\n            // set the steps field to the current chosen packages list\n            change(input.name, removePackagesDisplayFields(destinationPackages));\n        } else {\n            setPackagesChosen(updatedSourcePackages);\n            sortPackages(packagesAvailable);\n            // set the steps field to the current chosen packages list\n            change(input.name, removePackagesDisplayFields(updatedSourcePackages));\n        }\n    };\n\n    // move all packages\n    const moveAll = (fromAvailable) => {\n        let chosenPackages = [];\n        if (fromAvailable) {\n            chosenPackages = [ ...packagesAvailable.filter(pack => !pack.isHidden), ...packagesChosen ];\n            setPackagesChosen(chosenPackages);\n            sortPackages([ ...packagesAvailable.filter(pack => pack.isHidden) ]);\n        } else {\n            chosenPackages = [ ...packagesChosen.filter(pack => pack.isHidden) ];\n            sortPackages([ ...packagesChosen.filter(pack => !pack.isHidden), ...packagesAvailable ]);\n            setPackagesChosen(chosenPackages);\n        }\n\n        // set the steps field to the current chosen packages list\n        change(input.name, removePackagesDisplayFields(chosenPackages));\n    };\n\n    const onOptionSelect = (event, index, isChosen) => {\n        if (isChosen) {\n            const newChosen = [ ...packagesChosen ];\n            newChosen[index].selected = !packagesChosen[index].selected;\n            setPackagesChosen(newChosen);\n        } else {\n            const newAvailable = [ ...packagesAvailable ];\n            newAvailable[index].selected = !packagesAvailable[index].selected;\n            sortPackages(newAvailable);\n        }\n    };\n\n    return (\n        <DualListSelector>\n            <DualListSelectorPane\n                title=\"Available packages\"\n                searchInput={ <SearchInput\n                    placeholder=\"Search for a package\"\n                    data-testid=\"search-available-pkgs-input\"\n                    value={ packagesSearchName.current }\n                    onFocus={ () => setFocus('available') }\n                    onBlur={ () => setFocus('') }\n                    onChange={ (val) => {\n                        packagesSearchName.current = val;\n                    } } /> }\n                actions={ [\n                    <Button\n                        aria-label=\"Search button for available packages\"\n                        key=\"availableSearchButton\"\n                        data-testid=\"search-available-pkgs-button\"\n                        onClick={ handlePackagesAvailableSearch }>\n                        Search\n                    </Button>\n                ] }>\n                <DualListSelectorList data-testid=\"available-pkgs-list\">\n                    {!packagesAvailable.length ? (\n                        <p className=\"pf-u-text-align-center pf-u-mt-md\">\n                            {!packagesAvailableFound\n                                ? 'No packages found'\n                                : <>Search above to add additional<br />packages to your image</>\n                            }\n                        </p>\n                    ) : (packagesAvailable.map((pack, index) => {\n                        return !pack.isHidden ? (\n                            <DualListSelectorListItem\n                                key={ index }\n                                isSelected={ pack.selected }\n                                onOptionSelect={ (e) => onOptionSelect(e, index, false) }>\n                                <TextContent key={ `${pack.name}-${index}` }>\n                                    <span className=\"pf-c-dual-list-selector__item-text\">{ pack.name }</span>\n                                    <small>{ pack.summary }</small>\n                                </TextContent>\n                            </DualListSelectorListItem>\n                        ) : null;\n                    }))}\n                </DualListSelectorList>\n            </DualListSelectorPane>\n            <DualListSelectorControlsWrapper\n                aria-label=\"Selector controls\">\n                <DualListSelectorControl\n                    isDisabled={ !packagesAvailable.some(option => option.selected) }\n                    onClick={ () => moveSelected(true) }\n                    aria-label=\"Add selected\"\n                    tooltipContent=\"Add selected\">\n                    <AngleRightIcon />\n                </DualListSelectorControl>\n                <DualListSelectorControl\n                    isDisabled={ !packagesAvailable.length }\n                    onClick={ () => moveAll(true) }\n                    aria-label=\"Add all\"\n                    tooltipContent=\"Add all\">\n                    <AngleDoubleRightIcon />\n                </DualListSelectorControl>\n                <DualListSelectorControl\n                    isDisabled={ !packagesChosen.length || !packagesChosenFound }\n                    onClick={ () => moveAll(false) }\n                    aria-label=\"Remove all\"\n                    tooltipContent=\"Remove all\">\n                    <AngleDoubleLeftIcon />\n                </DualListSelectorControl>\n                <DualListSelectorControl\n                    onClick={ () => moveSelected(false) }\n                    isDisabled={ !packagesChosen.some(option => option.selected) || !packagesChosenFound }\n                    aria-label=\"Remove selected\"\n                    tooltipContent=\"Remove selected\">\n                    <AngleLeftIcon />\n                </DualListSelectorControl>\n            </DualListSelectorControlsWrapper>\n            <DualListSelectorPane\n                title=\"Chosen packages\"\n                searchInput={ <SearchInput\n                    placeholder=\"Search for a package\"\n                    data-testid=\"search-chosen-pkgs-input\"\n                    value={ filterChosen }\n                    onFocus={ () => setFocus('chosen') }\n                    onBlur={ () => setFocus('') }\n                    onChange={ (val) => setFilterChosen(val) } /> }\n                actions={ [\n                    <Button\n                        aria-label=\"Search button for selected packages\"\n                        key=\"selectedSearchButton\"\n                        data-testid=\"search-chosen-pkgs-button\"\n                        onClick={ handlePackagesChosenSearch }>\n                        Search\n                    </Button>\n                ] }\n                isChosen>\n                <DualListSelectorList data-testid=\"chosen-pkgs-list\">\n                    {!packagesChosen.length ? (\n                        <p className=\"pf-u-text-align-center pf-u-mt-md\">\n                            No packages added\n                        </p>\n                    ) : !packagesChosenFound ? (\n                        <p className=\"pf-u-text-align-center pf-u-mt-md\">\n                            No packages found\n                        </p>\n                    ) : (packagesChosen.map((pack, index) => {\n                        return !pack.isHidden ? (\n                            <DualListSelectorListItem\n                                key={ index }\n                                isSelected={ pack.selected }\n                                onOptionSelect={ (e) => onOptionSelect(e, index, true) }>\n                                <TextContent key={ `${pack.name}-${index}` }>\n                                    <span className=\"pf-c-dual-list-selector__item-text\">{ pack.name }</span>\n                                    <small>{ pack.summary }</small>\n                                </TextContent>\n                            </DualListSelectorListItem>\n                        ) : null;\n                    }))}\n                </DualListSelectorList>\n            </DualListSelectorPane>\n        </DualListSelector>\n    );\n};\n\nPackages.propTypes = {\n    defaultArch: PropTypes.string,\n};\n\nexport default Packages;\n","import React, { useRef } from 'react';\nimport Radio from '@data-driven-forms/pf4-component-mapper/radio';\nimport PropTypes from 'prop-types';\n\nconst RadioWithPopover = ({ Popover, ...props }) => {\n    const ref = useRef();\n    return <Radio { ...props } label={ <span ref={ ref } className=\"ins-c-image--builder__popover\">{props.label}\n        <Popover />\n    </span> } />;\n};\n\nRadioWithPopover.propTypes = {\n    Popover: PropTypes.elementType.isRequired,\n    label: PropTypes.node\n};\n\nexport default RadioWithPopover;\n","import React from 'react';\nimport { Button, FormGroup } from '@patternfly/react-core';\nimport useFormApi from '@data-driven-forms/react-form-renderer/use-form-api';\n\nconst AzureAuthButton = () => {\n    const { getState } = useFormApi();\n\n    const tenantId = getState()?.values?.['azure-tenant-id'];\n    const guidRegex = new RegExp('^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$', 'i');\n\n    return (\n        <FormGroup>\n            <Button\n                component=\"a\"\n                target=\"_blank\"\n                variant=\"secondary\"\n                isDisabled={ !guidRegex.test(tenantId) }\n                href={ 'https://login.microsoftonline.com/' + tenantId +\n                '/oauth2/v2.0/authorize?client_id=b94bb246-b02c-4985-9c22-d44e66f657f4&scope=openid&' +\n                'response_type=code&response_mode=query&redirect_uri=https://portal.azure.com' }>\n                Authorize Image Builder\n            </Button>\n        </FormGroup>);\n};\n\nexport default AzureAuthButton;\n","import React, { useState } from 'react';\nimport { Button, ExpandableSection, Text, Title } from '@patternfly/react-core';\nimport { ExternalLinkAltIcon } from '@patternfly/react-icons';\nimport './AzureAuthExpandable.scss';\n\nconst AzureAuthExpandable = () => {\n    const [ expanded, setExpanded ] = useState(true);\n\n    return (\n        <>\n            <ExpandableSection\n                className='azureAuthExpandable'\n                toggleText={ <Title headingLevel=\"h3\">Authorizing an Azure account</Title> }\n                onToggle={ () => setExpanded(!expanded) }\n                isExpanded={ expanded }>\n                <Text>\n                To authorize Image Builder to push images to Microsoft Azure, the account owner\n                must configure Image Builder as an authorized application for a specific tenant ID and give it the role of\n                &quot;Contributor&quot; to at least one resource group.<br />\n                </Text>\n                <small>\n                    <Button\n                        component=\"a\"\n                        target=\"_blank\"\n                        variant=\"link\"\n                        icon={ <ExternalLinkAltIcon /> }\n                        iconPosition=\"right\"\n                        isInline\n                        href=\"https://docs.microsoft.com/en-us/azure/active-directory/develop/v2-oauth2-auth-code-flow\">\n                        Learn more about OAuth 2.0\n                    </Button>\n                </small>\n            </ExpandableSection>\n        </>);\n};\n\nexport default AzureAuthExpandable;\n","import React, { useEffect, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { FormGroup, Spinner, Select, SelectOption, SelectVariant } from '@patternfly/react-core';\nimport useFormApi from '@data-driven-forms/react-form-renderer/use-form-api';\nimport api from '../../../api';\n\nconst ActivationKeys = ({ label, isRequired }) => {\n    const { change } = useFormApi();\n    const [ activationKeys, setActivationKeys ] = useState([]);\n    const [ isOpen, setIsOpen ] = useState(false);\n    const [ isLoading, setIsLoading ] = useState(false);\n    const [ activationKeySelected, selectActivationKey ] = useState();\n\n    useEffect(() => {\n        setIsLoading(true);\n        const data = api.getActivationKeys();\n        data.then(keys => {\n            setActivationKeys(keys);\n            setIsLoading(false);\n        });\n    }, []);\n\n    const setActivationKey = (_, selection) => {\n        selectActivationKey(selection);\n        setIsOpen(false);\n        change('subscription-activation-key', selection);\n    };\n\n    const handleClear = () => {\n        selectActivationKey();\n        change('subscription-activation-key', undefined);\n    };\n\n    return (\n        <FormGroup isRequired={ isRequired } label={ label } data-testid='subscription-activation-key'>\n            <Select\n                variant={ SelectVariant.typeahead }\n                onToggle={ () => setIsOpen(!isOpen) }\n                onSelect={ setActivationKey }\n                onClear={ handleClear }\n                selections={ activationKeySelected }\n                isOpen={ isOpen }\n                placeholderText=\"Select activation key\"\n                typeAheadAriaLabel=\"Select activation key\">\n                {isLoading &&\n                    <SelectOption isNoResultsOption={ true } data-testid='activation-keys-loading'>\n                        <Spinner isSVG size=\"lg\" />\n                    </SelectOption>\n                }\n                {activationKeys.map((key, index) => (\n                    <SelectOption\n                        key={ index }\n                        value={ key.name } />\n                ))}\n            </Select>\n        </FormGroup>);\n};\n\nActivationKeys.propTypes = {\n    label: PropTypes.node,\n    isRequired: PropTypes.bool\n};\n\nActivationKeys.defaultProps = {\n    label: '',\n    isRequired: false\n};\n\nexport default ActivationKeys;\n","import React, {\n    useEffect,\n    useState,\n} from 'react';\nimport PropTypes from 'prop-types';\nimport {\n    Select,\n    SelectOption,\n    SelectVariant,\n    TextInput,\n} from '@patternfly/react-core';\nimport path from 'path';\n\nconst MountPoint = ({ ...props }) => {\n    // check '/' last!\n    const validPrefixes = [ '/home', '/opt', '/srv', '/usr/local', '/var', '/boot', '/' ];\n    const [ isOpen, setIsOpen ] = useState(false);\n    const [ prefix, setPrefix ] = useState('/');\n    const [ suffix, setSuffix ] = useState('');\n\n    // split\n    useEffect(() => {\n        for (let p of validPrefixes) {\n            if (props.mountpoint.startsWith(p)) {\n                setPrefix(p);\n                setSuffix(props.mountpoint.substring(p.length));\n                return;\n            }\n        }\n    }, []);\n\n    useEffect(() => {\n        let suf = suffix;\n        let mp = prefix;\n        if (suf) {\n            if (mp !== '/' && suf[0] !== '/') {\n                suf = '/' + suf;\n            }\n\n            mp += suf;\n        }\n\n        props.onChange(path.normalize(mp));\n    }, [ prefix, suffix ]);\n\n    const onToggle = (isOpen) => {\n        setIsOpen(isOpen);\n    };\n\n    const onSelect = (event, selection) => {\n        setPrefix(selection);\n        setIsOpen(false);\n    };\n\n    return (\n        <>\n            <Select\n                className=\"pf-u-w-50\"\n                isOpen={ isOpen }\n                onToggle={ onToggle }\n                onSelect={ onSelect }\n                selections={ prefix }\n                variant={ SelectVariant.single }>\n                {validPrefixes.map((pfx, index) => {\n                    return <SelectOption key={ index } value={ pfx } />;\n                })\n                }\n            </Select>\n            <TextInput\n                className=\"pf-u-w-50\"\n                type=\"text\"\n                value={ suffix }\n                aria-label=\"Mount point suffix text input\"\n                onChange={ v => setSuffix(v) } />\n        </>\n    );\n};\n\nMountPoint.propTypes = {\n    mountpoint: PropTypes.string.isRequired,\n    onChange: PropTypes.func.isRequired,\n};\n\nexport default MountPoint;\n","import React, {\n    useEffect,\n    useState,\n} from 'react';\nimport PropTypes from 'prop-types';\nimport {\n    Select,\n    SelectOption,\n    SelectVariant,\n    TextInput,\n} from '@patternfly/react-core';\n\nimport { UNIT_KIB, UNIT_MIB, UNIT_GIB } from '../../../constants';\n\nconst SizeUnit = ({ ...props }) => {\n    const [ isOpen, setIsOpen ] = useState(false);\n    const [ unit, setUnit ] = useState(props.unit || UNIT_GIB);\n    const [ size, setSize ] = useState(props.size || 1);\n\n    useEffect(() => {\n        props.onChange(size, unit);\n    }, [ unit, size ]);\n\n    const onToggle = (isOpen) => {\n        setIsOpen(isOpen);\n    };\n\n    const onSelect = (event, selection) => {\n        switch (selection) {\n            case 'KiB':\n                setUnit(UNIT_KIB);\n                break;\n            case 'MiB':\n                setUnit(UNIT_MIB);\n                break;\n            case 'GiB':\n                setUnit(UNIT_GIB);\n                break;\n        }\n\n        setIsOpen(false);\n    };\n\n    return (\n        <>\n            <TextInput\n                className=\"pf-u-w-50\"\n                type=\"text\"\n                value={ size }\n                aria-label=\"Size text input\"\n                onChange={ v => setSize(isNaN(parseInt(v)) ? '' : parseInt(v)) } />\n            <Select\n                className=\"pf-u-w-50\"\n                isOpen={ isOpen }\n                onToggle={ onToggle }\n                onSelect={ onSelect }\n                selections={ unit === UNIT_KIB ? 'KiB' : unit === UNIT_MIB ? 'MiB' : 'GiB' }\n                variant={ SelectVariant.single }\n                aria-label=\"Unit select\">\n                {[ 'KiB', 'MiB', 'GiB' ].map((u, index) => {\n                    return <SelectOption key={ index } value={ u } />;\n                })}\n            </Select>\n        </>\n    );\n};\n\nSizeUnit.propTypes = {\n    size: PropTypes.number.isRequired,\n    unit: PropTypes.number.isRequired,\n    onChange: PropTypes.func.isRequired,\n};\n\nexport default SizeUnit;\n","import React, {\n    useEffect,\n    useState,\n    useRef,\n} from 'react';\nimport { HelpIcon, MinusCircleIcon, PlusCircleIcon } from '@patternfly/react-icons';\nimport {\n    Alert,\n    Button,\n    Popover,\n    Text,\n    TextContent,\n    TextVariants,\n} from '@patternfly/react-core';\nimport {\n    TableComposable,\n    Thead,\n    Tbody,\n    Tr,\n    Th,\n    Td,\n} from '@patternfly/react-table';\nimport styles from '@patternfly/react-styles/css/components/Table/table';\nimport useFormApi from '@data-driven-forms/react-form-renderer/use-form-api';\nimport useFieldApi from '@data-driven-forms/react-form-renderer/use-field-api';\nimport { v4 as uuidv4 } from 'uuid';\n\nimport { UNIT_GIB } from '../../../constants';\nimport MountPoint from './MountPoint';\nimport SizeUnit from './SizeUnit';\n\nlet initialRow = {\n    id: uuidv4(),\n    mountpoint: '/',\n    fstype: 'xfs',\n    size: 10,\n    unit: UNIT_GIB,\n};\n\nconst FileSystemConfiguration = ({ ...props }) => {\n    const { change, getState } = useFormApi();\n    const { input } = useFieldApi(props);\n    const [ draggedItemId, setDraggedItemId ] = useState(null);\n    const [ draggingToItemIndex, setDraggingToItemIndex ] = useState(null);\n    const [ isDragging, setIsDragging ] = useState(false);\n    const [ itemOrder, setItemOrder ] = useState([ initialRow.id ]);\n    const [ tempItemOrder, setTempItemOrder ] = useState([]);\n    const bodyref = useRef();\n    const [ rows, setRows ] = useState([ initialRow ]);\n\n    useEffect(() => {\n        const fsc = getState()?.values?.['file-system-configuration'];\n        if (!fsc) {\n            return;\n        }\n\n        const newRows = [];\n        const newOrder = [];\n        fsc.map(r => {\n            const id = uuidv4();\n            newRows.push({\n                id,\n                mountpoint: r.mountpoint,\n                fstype: 'xfs',\n                size: r.size,\n                unit: r.unit,\n            });\n            newOrder.push(id);\n        });\n        setRows(newRows);\n        setItemOrder(newOrder);\n    }, []);\n\n    useEffect(() => {\n        change(input.name, itemOrder.map(r => {\n            for (const r2 of rows) {\n                if (r2.id === r) {\n                    return {\n                        mountpoint: r2.mountpoint,\n                        size: r2.size,\n                        unit: r2.unit,\n                    };\n                }\n            }\n        }));\n    }, [ rows, itemOrder ]);\n\n    const addRow = () => {\n        const id = uuidv4();\n        setRows(rows.concat([{\n            id,\n            mountpoint: '/home',\n            fstype: 'xfs',\n            size: 1,\n            unit: UNIT_GIB,\n        }]));\n        setItemOrder(itemOrder.concat([ id ]));\n    };\n\n    const removeRow = id => {\n        let removeIndex = rows.map(e => e.id).indexOf(id);\n        let newRows = [ ...rows ];\n        newRows.splice(removeIndex, 1);\n\n        let removeOrderIndex = itemOrder.indexOf(id);\n        let newOrder = [ ...itemOrder ];\n        newOrder.splice(removeOrderIndex, 1);\n\n        setRows(newRows);\n        setItemOrder(newOrder);\n    };\n\n    const moveItem = (arr, i1, toIndex) => {\n        const fromIndex = arr.indexOf(i1);\n        if (fromIndex === toIndex) {\n            return arr;\n        }\n\n        const temp = arr.splice(fromIndex, 1);\n        arr.splice(toIndex, 0, temp[0]);\n        return arr;\n    };\n\n    const move = itemOrder => {\n        const ulNode = bodyref.current;\n        const nodes = Array.from(ulNode.children);\n        if (nodes.map(node => node.id).every((id, i) => id === itemOrder[i])) {\n            return;\n        }\n\n        while (ulNode.firstChild) {\n            ulNode.removeChild(ulNode.lastChild);\n        }\n\n        itemOrder.forEach(id => {\n            ulNode.appendChild(nodes.find(n => n.id === id));\n        });\n    };\n\n    const onDragOver = evt => {\n        evt.preventDefault();\n\n        const curListItem = evt.target.closest('tr');\n        if (!curListItem || !bodyref.current.contains(curListItem) || curListItem.id === draggedItemId) {\n            return null;\n        }\n\n        const dragId = curListItem.id;\n        const newDraggingToItemIndex = Array.from(bodyref.current.children).findIndex(item => item.id === dragId);\n        if (newDraggingToItemIndex !== draggingToItemIndex) {\n            const tempItemOrder = moveItem([ ...itemOrder ], draggedItemId, newDraggingToItemIndex);\n            move(tempItemOrder);\n            setDraggingToItemIndex(newDraggingToItemIndex);\n            setTempItemOrder(tempItemOrder);\n        }\n    };\n\n    const isValidDrop = evt => {\n        const ulRect = bodyref.current.getBoundingClientRect();\n        return (\n            evt.clientX > ulRect.x &&\n                evt.clientX < ulRect.x + ulRect.width &&\n                evt.clientY > ulRect.y &&\n                evt.clientY < ulRect.y + ulRect.height\n        );\n    };\n\n    const onDragLeave = evt => {\n        if (!isValidDrop(evt)) {\n            move(itemOrder);\n            setDraggingToItemIndex(null);\n        }\n    };\n\n    const onDrop = evt => {\n        if (isValidDrop(evt)) {\n            setItemOrder(tempItemOrder);\n        } else {\n            evt.currentTarget.classList.remove(styles.modifiers.ghostRow);\n            evt.currentTarget.setAttribute('aria-pressed', 'false');\n            setDraggedItemId(null);\n            setDraggingToItemIndex(null);\n            setIsDragging(false);\n        }\n    };\n\n    const onDragStart = evt => {\n        evt.dataTransfer.effectAllowed = 'move';\n        evt.dataTransfer.setData('text/plain', evt.currentTarget.id);\n        evt.currentTarget.classList.add(styles.modifiers.ghostRow);\n        evt.currentTarget.setAttribute('aria-pressed', 'true');\n        setDraggedItemId(evt.currentTarget.id);\n        setIsDragging(true);\n    };\n\n    const onDragEnd = evt => {\n        evt.target.classList.remove(styles.modifiers.ghostRow);\n        evt.target.setAttribute('aria-pressed', 'false');\n        setDraggedItemId(null);\n        setDraggingToItemIndex(null);\n        setIsDragging(false);\n    };\n\n    const setMountpoint = (id, mp) => {\n        let newRows = [ ...rows ];\n        for (let i = 0; i < newRows.length; i++) {\n            if (newRows[i].id === id) {\n                let newRow = { ...newRows[i] };\n                newRow.mountpoint = mp;\n                newRows.splice(i, 1, newRow);\n                break;\n            }\n        }\n\n        setRows(newRows);\n    };\n\n    const setSize = (id, s, u) => {\n        let newRows = [ ...rows ];\n        for (let i = 0; i < newRows.length; i++) {\n            if (newRows[i].id === id) {\n                let newRow = { ...newRows[i] };\n                newRow.size = s;\n                newRow.unit = u;\n                newRows.splice(i, 1, newRow);\n                break;\n            }\n        }\n\n        setRows(newRows);\n    };\n\n    return (\n        <>\n            <TextContent>\n                <Text component={ TextVariants.h3 }>Configure partitions</Text>\n            </TextContent>\n            { rows.length > 1 && getState()?.errors?.['file-system-configuration']?.duplicates &&\n              <Alert variant=\"danger\" isInline\n                  title=\"Duplicate mount points: All mount points must be unique. Remove the duplicate or choose a new mount point.\" />\n            }\n            { rows.length >= 1 && getState()?.errors?.['file-system-configuration']?.root === false &&\n              <Alert variant=\"danger\" isInline\n                  title=\"No root partition configured.\" />\n            }\n            <TextContent>\n                <Text>\n                    Partitions have been generated and given default values based on best practices from Red Hat,\n                    and your selections in previous steps of the wizard.\n                </Text>\n            </TextContent>\n            <TableComposable aria-label=\"File system table\" className={ isDragging && styles.modifiers.dragOver } variant=\"compact\">\n                <Thead>\n                    <Tr>\n                        <Th />\n                        <Th>Mount point</Th>\n                        <Th>Type</Th>\n                        <Th>Minimum size\n                            <Popover\n                                hasAutoWidth\n                                bodyContent={ <TextContent>\n                                    <Text>\n                                            Image Builder may extend this size based on requirements, selected packages, and configurations.\n                                    </Text>\n                                </TextContent> }>\n                                <Button\n                                    variant=\"plain\"\n                                    aria-label=\"File system configuration info\"\n                                    aria-describedby=\"file-system-configuration-info\"\n                                    className=\"pf-c-form__group-label-help\">\n                                    <HelpIcon />\n                                </Button>\n                            </Popover>\n                        </Th>\n                        <Th />\n                    </Tr>\n                </Thead>\n                <Tbody\n                    ref={ bodyref }\n                    onDragOver={ onDragOver }\n                    onDrop={ onDragOver }\n                    onDragLeave={ onDragLeave }\n                    data-testid=\"file-system-configuration-tbody\">\n                    {rows.map((row, rowIndex) => (\n                        <Tr key={ rowIndex } id={ row.id } draggable onDrop={ onDrop } onDragEnd={ onDragEnd } onDragStart={ onDragStart }>\n                            <Td draggableRow={ {\n                                id: `draggable-row-${row.id}`\n                            } } />\n                            <Td className=\"pf-m-width-30\">\n                                <MountPoint\n                                    key={ row.id + '-mountpoint' }\n                                    mountpoint={ row.mountpoint }\n                                    onChange={ mp => setMountpoint(row.id, mp) } />\n                                { getState().errors['file-system-configuration']?.duplicates &&\n                                  getState().errors['file-system-configuration']?.duplicates.indexOf(row.mountpoint) !== -1 &&\n                                  <Alert variant=\"danger\" isInline isPlain title=\"Duplicate mount point.\" /> }\n                            </Td>\n                            <Td className=\"pf-m-width-20\">\n                                { /* always xfs */ }\n                                {row.fstype}\n                            </Td>\n                            <Td className=\"pf-m-width-30\">\n                                <SizeUnit\n                                    key={ row.id + '-sizeunit' }\n                                    size={ row.size }\n                                    unit={ row.unit }\n                                    onChange={ (s, u) => setSize(row.id, s, u) } />\n                            </Td>\n                            <Td className=\"pf-m-width-10\">\n                                <Button\n                                    variant=\"link\"\n                                    icon={ <MinusCircleIcon /> }\n                                    onClick={ () => removeRow(row.id) } />\n                            </Td>\n                        </Tr>\n                    ))}\n                </Tbody>\n            </TableComposable>\n            <TextContent>\n                <Button\n                    data-testid=\"file-system-add-partition\"\n                    className=\"pf-u-text-align-left\"\n                    variant=\"link\"\n                    icon={ <PlusCircleIcon /> }\n                    onClick={ addRow }>\n                    Add partition\n                </Button>\n            </TextContent>\n        </>\n    );\n};\n\nexport default FileSystemConfiguration;\n","import React, {\n    useState,\n    useEffect,\n} from 'react';\nimport {\n    ToggleGroup,\n    ToggleGroupItem,\n} from '@patternfly/react-core';\n\nimport useFormApi from '@data-driven-forms/react-form-renderer/use-form-api';\nimport useFieldApi from '@data-driven-forms/react-form-renderer/use-field-api';\n\nconst FileSystemConfigToggle = ({ ...props }) => {\n    const { change, getState } = useFormApi();\n    const { input } = useFieldApi(props);\n    const [ selected, setSelected ] =\n          useState(getState()?.values?.['file-system-config-toggle'] || 'auto');\n\n    useEffect(() => {\n        change(input.name, selected);\n    }, [ selected ]);\n\n    const onClick = (_, evt) => {\n        setSelected(evt.currentTarget.id);\n    };\n\n    return (\n        <>\n            <ToggleGroup\n                data-testid=\"fsc-paritioning-toggle\"\n                aria-label=\"Automatic partitioning toggle\">\n                <ToggleGroupItem\n                    onChange={ onClick }\n                    text=\"Use automatic partitioning\"\n                    buttonId=\"auto\"\n                    isSelected={ selected === 'auto' } />\n                <ToggleGroupItem\n                    onChange={ onClick }\n                    text=\"Manually configure partitions\"\n                    buttonId=\"manual\"\n                    isSelected={ selected === 'manual' }\n                    data-testid=\"file-system-config-toggle-manual\" />\n            </ToggleGroup>\n        </>\n    );\n};\n\nexport default FileSystemConfigToggle;\n","import React from 'react';\nimport FormRenderer from '@data-driven-forms/react-form-renderer/form-renderer';\nimport Pf4FormTemplate from '@data-driven-forms/pf4-component-mapper/form-template';\nimport { componentMapper } from '@data-driven-forms/pf4-component-mapper';\nimport { Spinner } from '@patternfly/react-core';\nimport PropTypes from 'prop-types';\nimport Review from './formComponents/ReviewStep';\nimport TargetEnvironment from './formComponents/TargetEnvironment';\nimport Packages from './formComponents/Packages';\nimport RadioWithPopover from './formComponents/RadioWithPopover';\nimport AzureAuthButton from './formComponents/AzureAuthButton';\nimport AzureAuthExpandable from './formComponents/AzureAuthExpandable';\nimport ActivationKeys from './formComponents/ActivationKeys';\nimport Select from '@data-driven-forms/pf4-component-mapper/select';\nimport FileSystemConfiguration from './formComponents/FileSystemConfiguration';\nimport FileSystemConfigToggle from './formComponents/FileSystemConfigToggle';\n\nconst ImageCreator = ({ schema, onSubmit, onClose, customComponentMapper, customValidatorMapper, defaultArch, className, ...props }) => {\n    return schema ? <FormRenderer\n        schema={ schema }\n        className={ `image-builder${className ? ` ${className}` : ''}` }\n        subscription={ { values: true } }\n        FormTemplate={ (props) => <Pf4FormTemplate { ...props } showFormControls={ false } /> }\n        onSubmit={ (formValues) => onSubmit(formValues) }\n        validatorMapper={ { ...customValidatorMapper } }\n        componentMapper={ {\n            ...componentMapper,\n            review: Review,\n            output: TargetEnvironment,\n            select: Select,\n            'package-selector': {\n                component: Packages,\n                defaultArch\n            },\n            'radio-popover': RadioWithPopover,\n            'azure-auth-expandable': AzureAuthExpandable,\n            'azure-auth-button': AzureAuthButton,\n            'activation-keys': ActivationKeys,\n            'file-system-config-toggle': FileSystemConfigToggle,\n            'file-system-configuration': FileSystemConfiguration,\n            ...customComponentMapper,\n        } }\n        onCancel={ onClose }\n        { ...props } /> : <Spinner />;\n};\n\nImageCreator.propTypes = {\n    schema: PropTypes.object,\n    onSubmit: PropTypes.func.isRequired,\n    onClose: PropTypes.func.isRequired,\n    customComponentMapper: PropTypes.shape({\n        [PropTypes.string]: PropTypes.oneOfType([ PropTypes.node, PropTypes.shape({\n            component: PropTypes.node\n        }) ])\n    }),\n    customValidatorMapper: PropTypes.shape({\n        [PropTypes.string]: PropTypes.func\n    }),\n    defaultArch: PropTypes.string,\n    className: PropTypes.string\n};\n\nexport default ImageCreator;\n","import React from 'react';\nimport componentTypes from '@data-driven-forms/react-form-renderer/component-types';\nimport validatorTypes from '@data-driven-forms/react-form-renderer/validator-types';\nimport nextStepMapper from './imageOutputStepMapper';\nimport { Title } from '@patternfly/react-core';\n\nexport default {\n    title: 'Amazon Web Services',\n    customTitle: <Title headingLevel=\"h1\" size=\"xl\">Target environment - Amazon Web Service</Title>,\n    name: 'aws-target-env',\n    substepOf: 'Target environment',\n    nextStep: ({ values }) => nextStepMapper(values, { skipAws: true }),\n    fields: [\n        {\n            component: componentTypes.PLAIN_TEXT,\n            name: 'plain-text-component',\n            label: <p>\n                Your image will be uploaded to AWS and shared with the account you provide below. <br />\n                The image should be copied to your account within 14 days.\n            </p>\n        },\n        {\n            component: componentTypes.TEXT_FIELD,\n            name: 'aws-account-id',\n            className: 'pf-u-w-25',\n            'data-testid': 'aws-account-id',\n            type: 'text',\n            label: 'AWS account ID',\n            isRequired: true,\n            validate: [\n                {\n                    type: validatorTypes.REQUIRED,\n                },\n                {\n                    type: validatorTypes.EXACT_LENGTH,\n                    threshold: 12\n                }\n            ],\n        }\n    ]\n};\n","import React from 'react';\nimport componentTypes from '@data-driven-forms/react-form-renderer/component-types';\nimport validatorTypes from '@data-driven-forms/react-form-renderer/validator-types';\nimport { Title, Text } from '@patternfly/react-core';\nimport nextStepMapper from './imageOutputStepMapper';\n\nexport default {\n    title: 'Microsoft Azure',\n    customTitle: <Title headingLevel=\"h1\" size=\"xl\">Target environment - Microsoft Azure</Title>,\n    name: 'ms-azure-target-env',\n    substepOf: 'Target environment',\n    nextStep: ({ values }) => nextStepMapper(values, { skipAws: true, skipGoogle: true, skipAzure: true }),\n    fields: [\n        {\n            component: componentTypes.PLAIN_TEXT,\n            name: 'azure-description',\n            label: <Text>\n                Image Builder sends an image to an authorized Azure account.\n            </Text>\n        },\n        {\n            component: 'azure-auth-expandable',\n            name: 'azure-auth-expandable'\n        },\n        {\n            component: componentTypes.PLAIN_TEXT,\n            name: 'azure-destination',\n            label: <>\n                <Title headingLevel=\"h2\">Destination</Title>\n                <Text>\n                        Your image will be uploaded to the resource group in the subscription you specify.\n                </Text>\n            </>\n\n        },\n        {\n            component: componentTypes.TEXT_FIELD,\n            name: 'azure-tenant-id',\n            className: 'pf-u-w-50',\n            'data-testid': 'azure-tenant-id',\n            type: 'text',\n            label: 'Tenant ID',\n            required: true,\n            isRequired: true,\n            validate: [\n                {\n                    type: validatorTypes.REQUIRED,\n                },\n                {\n                    type: validatorTypes.PATTERN,\n                    pattern: /^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i,\n                    message: 'Please enter a valid tenant ID',\n                }\n            ],\n        },\n        {\n            component: 'azure-auth-button',\n            name: 'azure-auth-button',\n            'data-testid': 'azure-auth-button',\n            required: true,\n            isRequired: true,\n        },\n        {\n            component: componentTypes.TEXT_FIELD,\n            name: 'azure-subscription-id',\n            className: 'pf-u-w-50',\n            'data-testid': 'azure-subscription-id',\n            type: 'text',\n            label: 'Subscription ID',\n            isRequired: true,\n            validate: [\n                {\n                    type: validatorTypes.REQUIRED,\n                },\n                {\n                    type: validatorTypes.PATTERN,\n                    pattern: /^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i,\n                    message: 'Please enter a valid subscription ID',\n                },\n            ],\n        },\n        {\n            component: componentTypes.TEXT_FIELD,\n            name: 'azure-resource-group',\n            className: 'pf-u-w-50',\n            'data-testid': 'azure-resource-group',\n            type: 'text',\n            label: 'Resource group',\n            isRequired: true,\n            validate: [\n                {\n                    type: validatorTypes.REQUIRED,\n                },\n                {\n                    type: validatorTypes.PATTERN,\n                    pattern: /^[-\\w._()]+[-\\w_()]$/,\n                    message: 'Resource group names only allow alphanumeric characters, ' +\n                        'periods, underscores, hyphens, and parenthesis and cannot end in a period',\n                },\n            ],\n        }\n        // TODO check oauth2 thing too here?\n    ]\n};\n","import React from 'react';\nimport componentTypes from '@data-driven-forms/react-form-renderer/component-types';\nimport { Text } from '@patternfly/react-core';\n\nexport default {\n    title: 'Packages',\n    name: 'packages',\n    substepOf: 'System Configuration',\n    nextStep: 'review',\n    fields: [\n        {\n            component: componentTypes.PLAIN_TEXT,\n            name: 'packages-text-component',\n            label: <Text>Add optional additional packages to your image by searching available packages.</Text>\n        },\n        {\n            component: 'package-selector',\n            name: 'selected-packages',\n            label: 'Available options'\n        }\n    ]\n};\n","import React from 'react';\nimport componentTypes from '@data-driven-forms/react-form-renderer/component-types';\nimport validatorTypes from '@data-driven-forms/react-form-renderer/validator-types';\nimport { Button, Popover, Text, TextContent, TextVariants } from '@patternfly/react-core';\nimport { ExternalLinkAltIcon, HelpIcon } from '@patternfly/react-icons';\n\nconst PopoverActivation = () => {\n    return <Popover\n        hasAutoWidth\n        maxWidth='35rem'\n        bodyContent={ <TextContent>\n            <Text>\n                Activation keys allow you to register a system with\n                appropriate subscriptions and system purpose attached.\n            </Text>\n        </TextContent> }>\n        <Button\n            variant=\"plain\"\n            aria-label=\"Activation key popover\"\n            aria-describedby=\"subscription-activation-key\"\n            className=\"pf-c-form__group-label-help\">\n            <HelpIcon />\n        </Button>\n    </Popover>;\n};\n\nexport default {\n    title: 'Registration',\n    name: 'registration',\n    nextStep: 'File system configuration',\n    fields: [\n        {\n            component: componentTypes.RADIO,\n            label: 'Register images with Red Hat',\n            name: 'register-system',\n            initialValue: 'register-now-insights',\n            options: [\n                {\n                    label: 'Register and connect image instances with Red Hat',\n                    description: 'Includes Subscriptions and Red Hat Insights',\n                    value: 'register-now-insights',\n                    'data-testid': 'radio-register-now-insights',\n                },\n                {\n                    label: 'Register image instances only',\n                    description: 'Includes Subscriptions only',\n                    value: 'register-now',\n                    className: 'pf-u-mt-sm',\n                    'data-testid': 'radio-register-now',\n                },\n                {\n                    label: 'Register later',\n                    value: 'register-later',\n                    className: 'pf-u-mt-sm',\n                    'data-testid': 'radio-register-later',\n                },\n            ]\n        },\n        {\n            component: 'activation-keys',\n            name: 'subscription-activation-key',\n            required: true,\n            label: (\n                <>\n                    Activation key to use for this image\n                    <PopoverActivation />\n                </>\n            ),\n            condition: {\n                or: [\n                    { when: 'register-system', is: 'register-now-insights' },\n                    { when: 'register-system', is: 'register-now' },\n                ]\n            },\n            isRequired: true,\n            validate: [\n                {\n                    type: validatorTypes.REQUIRED,\n                },\n            ],\n        },\n        {\n            component: componentTypes.PLAIN_TEXT,\n            name: 'subscription-activation-description',\n            label: (\n                <>\n                    Create and manage activation keys in the&nbsp;\n                    <Button\n                        component=\"a\"\n                        target=\"_blank\"\n                        variant=\"link\"\n                        icon={ <ExternalLinkAltIcon /> }\n                        iconPosition=\"right\"\n                        isInline\n                        href=\"https://access.redhat.com/\">\n                            Customer Portal\n                    </Button>\n                </>\n            ),\n            condition: {\n                or: [\n                    { when: 'register-system', is: 'register-now-insights' },\n                    { when: 'register-system', is: 'register-now' },\n                ]\n            },\n        },\n        {\n            component: componentTypes.PLAIN_TEXT,\n            name: 'subscription-register-later',\n            label: (\n                <TextContent>\n                    <Text component={ TextVariants.h3 }>Register Later</Text>\n                    <Text>\n                        On initial boot, systems will need to be registered manually\n                        before having access to updates or Red Hat services.\n                    </Text>\n                    <Text>\n                        Registering now is recommended.\n                    </Text>\n                </TextContent>\n            ),\n            condition: {\n                or: [\n                    { when: 'register-system', is: 'register-later' },\n                ]\n            },\n        }\n    ]\n};\n","import React, { useContext, useState } from 'react';\nimport { Button } from '@patternfly/react-core';\nimport { FormSpy } from '@data-driven-forms/react-form-renderer';\nimport WizardContext from '@data-driven-forms/react-form-renderer/wizard-context';\nimport PropTypes from 'prop-types';\n\nconst CustomButtons = ({ buttonLabels: { cancel, submit, back }}) => {\n    const [ isSaving, setIsSaving ] = useState(false);\n    const { handlePrev, formOptions } = useContext(WizardContext);\n    return <FormSpy>\n        {() => (\n            <React.Fragment>\n                <Button\n                    variant=\"primary\"\n                    type=\"button\"\n                    isDisabled={ !formOptions.valid || formOptions.getState().validating || isSaving }\n                    isLoading={ isSaving }\n                    onClick={ () => {\n                        formOptions.onSubmit({\n                            values: formOptions.getState().values,\n                            setIsSaving\n                        });\n                    } }>\n                    { isSaving ? 'Creating image' : submit}\n                </Button>\n                <Button type=\"button\" variant=\"secondary\" onClick={ handlePrev } isDisabled={ isSaving }>\n                    {back}\n                </Button>\n                <div className=\"pf-c-wizard__footer-cancel\">\n                    <Button type=\"button\" variant=\"link\" onClick={ formOptions.onCancel } isDisabled={ isSaving }>\n                        {cancel}\n                    </Button>\n                </div>\n            </React.Fragment>\n        )}\n    </FormSpy>;\n};\n\nCustomButtons.propTypes = {\n    buttonLabels: PropTypes.shape({\n        cancel: PropTypes.node,\n        submit: PropTypes.node,\n        back: PropTypes.node,\n    }),\n    isSaving: PropTypes.bool\n};\n\nexport default CustomButtons;\n","import CustomButtons from '../formComponents/CustomSubmitButtons';\n\nexport default {\n    name: 'review',\n    title: 'Review',\n    buttons: CustomButtons,\n    fields: [\n        {\n            name: 'review',\n            component: 'review'\n        }\n    ]\n};\n","import React from 'react';\nimport componentTypes from '@data-driven-forms/react-form-renderer/component-types';\nimport validatorTypes from '@data-driven-forms/react-form-renderer/validator-types';\nimport { Text } from '@patternfly/react-core';\n\nexport default {\n    title: 'File system configuration',\n    name: 'File system configuration',\n    substepOf: 'System Configuration',\n    nextStep: 'packages',\n    fields: [\n        {\n            component: componentTypes.PLAIN_TEXT,\n            name: 'file-system-configuration-text-component',\n            label: <>\n                <Text>Red Hat recommends using automatic partitioning for most installations.</Text>\n                <Text>\n                    Alternatively, you may manually configure the file system of your image by adding, removing, and editing partitions.\n                </Text>\n            </>,\n        },\n        {\n            component: 'file-system-config-toggle',\n            name: 'file-system-config-toggle',\n            label: 'File system configurations toggle',\n        },\n        {\n            component: 'file-system-configuration',\n            name: 'file-system-configuration',\n            label: 'File system configurations',\n            validate: [{ type: 'fileSystemConfigurationValidator' }, { type: validatorTypes.REQUIRED }],\n            condition: {\n                when: 'file-system-config-toggle',\n                is: 'manual',\n            },\n        },\n    ]\n};\n","import React from 'react';\nimport componentTypes from '@data-driven-forms/react-form-renderer/component-types';\nimport validatorTypes from '@data-driven-forms/react-form-renderer/validator-types';\n\nexport default {\n    name: 'details',\n    title: 'Details',\n    nextStep: 'image-output',\n    fields: [\n        {\n            component: componentTypes.PLAIN_TEXT,\n            name: 'plain-text-component',\n            label: <p>\n                Enter a name to easily identify your image later. If left empty, the image&apos;s UUID will be displayed.\n            </p>\n        },\n        {\n            component: componentTypes.TEXT_FIELD,\n            name: 'image-name',\n            type: 'text',\n            label: 'Image name',\n            validate: [\n                {\n                    type: validatorTypes.PATTERN,\n                    pattern: /^[\\w-]+$/i,\n                    message: 'Can only contain letters, numbers, hyphens (-), and underscores (_)',\n                }\n            ]\n        }\n    ]\n};\n","const FileSystemConfigurationValidator = () => fsc => {\n    if (!fsc) {\n        return undefined;\n    }\n\n    let mpFreqs = {};\n    for (const fs of fsc) {\n        const mp = fs.mountpoint;\n        if (mp in mpFreqs) {\n            mpFreqs[mp]++;\n        } else {\n            mpFreqs[mp] = 1;\n        }\n    }\n\n    let duplicates = [];\n    for (const [ k, v ] of Object.entries(mpFreqs)) {\n        if (v > 1) {\n            duplicates.push(k);\n        }\n    }\n\n    let root = mpFreqs['/'] >= 1;\n    return duplicates.length === 0 && root ? undefined : {\n        duplicates: duplicates === [] ? undefined : duplicates,\n        root,\n    };\n};\n\nexport default FileSystemConfigurationValidator;\n","import React from 'react';\nimport ImageCreator from './ImageCreator';\nimport { useNavigate } from 'react-router-dom';\nimport componentTypes from '@data-driven-forms/react-form-renderer/component-types';\nimport { Button } from '@patternfly/react-core';\nimport { ExternalLinkAltIcon } from '@patternfly/react-icons';\nimport './CreateImageWizard.scss';\nimport { useDispatch } from 'react-redux';\nimport api from '../../api';\nimport { composeAdded } from '../../store/actions/actions';\nimport { addNotification } from '@redhat-cloud-services/frontend-components-notifications/redux';\n\nimport {\n    review,\n    awsTarget,\n    registration,\n    googleCloudTarger,\n    msAzureTarget,\n    packages,\n    imageOutput,\n    fileSystemConfiguration,\n    details\n} from './steps';\n\nimport {\n    fileSystemConfigurationValidator,\n} from './validators';\n\nconst onSave = (values) => {\n    let customizations = {\n        packages: values['selected-packages']?.map(p => p.name),\n    };\n\n    if (values['register-system'] === 'register-now-insights') {\n        customizations.subscription = {\n            'activation-key': values['subscription-activation-key'],\n            insights: true,\n            organization: Number(values['subscription-organization-id']),\n            'server-url': 'subscription.rhsm.redhat.com',\n            'base-url': 'https://cdn.redhat.com/',\n        };\n    } else if (values['register-system'] === 'register-now') {\n        customizations.subscription = {\n            'activation-key': values['subscription-activation-key'],\n            insights: false,\n            organization: Number(values['subscription-organization-id']),\n            'server-url': 'subscription.rhsm.redhat.com',\n            'base-url': 'https://cdn.redhat.com/',\n        };\n    }\n\n    if (values['file-system-config-toggle'] === 'manual') {\n        customizations.filesystem = [];\n        for (let fsc of values['file-system-configuration']) {\n            customizations.filesystem.push({\n                mountpoint: fsc.mountpoint,\n                min_size: fsc.size * fsc.unit,\n            });\n        }\n    }\n\n    let requests = [];\n    if (values['target-environment']?.aws) {\n        let request = {\n            distribution: values.release,\n            image_name: values?.['image-name'],\n            image_requests: [\n                {\n                    architecture: 'x86_64',\n                    image_type: 'ami',\n                    upload_request: {\n                        type: 'aws',\n                        options: {\n                            share_with_accounts: [ values['aws-account-id'] ],\n                        },\n                    },\n                }],\n            customizations,\n        };\n        requests.push(request);\n    }\n\n    if (values['target-environment']?.google) {\n        let share = '';\n        switch (values['google-account-type']) {\n            case 'googleAccount':\n                share = `user:${values['google-email']}`;\n                break;\n            case 'serviceAccount':\n                share = `serviceAccount:${values['google-email']}`;\n                break;\n            case 'googleGroup':\n                share = `group:${values['google-email']}`;\n                break;\n            case 'domain':\n                share = `domain:${values['google-domain']}`;\n                break;\n        }\n\n        let request = {\n            distribution: values.release,\n            image_name: values?.['image-name'],\n            image_requests: [\n                {\n                    architecture: 'x86_64',\n                    image_type: 'vhd',\n                    upload_request: {\n                        type: 'gcp',\n                        options: {\n                            share_with_accounts: [ share ],\n                        },\n                    },\n                }],\n            customizations,\n        };\n\n        requests.push(request);\n    }\n\n    if (values['target-environment']?.azure) {\n        let request = {\n            distribution: values.release,\n            image_name: values?.['image-name'],\n            image_requests: [\n                {\n                    architecture: 'x86_64',\n                    image_type: 'vhd',\n                    upload_request: {\n                        type: 'azure',\n                        options: {\n                            tenant_id: values['azure-tenant-id'],\n                            subscription_id: values['azure-subscription-id'],\n                            resource_group: values['azure-resource-group'],\n                        },\n                    },\n                }],\n            customizations,\n        };\n        requests.push(request);\n    }\n\n    if (values['target-environment']?.vsphere) {\n        let request = {\n            distribution: values.release,\n            image_name: values?.['image-name'],\n            image_requests: [\n                {\n                    architecture: 'x86_64',\n                    image_type: 'vsphere',\n                    upload_request: {\n                        type: 'aws.s3',\n                        options: {}\n                    }\n                }],\n            customizations,\n        };\n        requests.push(request);\n    }\n\n    if (values['target-environment']?.['guest-image']) {\n        let request = {\n            distribution: values.release,\n            image_name: values?.['image-name'],\n            image_requests: [\n                {\n                    architecture: 'x86_64',\n                    image_type: 'guest-image',\n                    upload_request: {\n                        type: 'aws.s3',\n                        options: {}\n                    }\n                }],\n            customizations,\n        };\n        requests.push(request);\n    }\n\n    if (values['target-environment']?.['image-installer']) {\n        let request = {\n            distribution: values.release,\n            image_name: values?.['image-name'],\n            image_requests: [\n                {\n                    architecture: 'x86_64',\n                    image_type: 'image-installer',\n                    upload_request: {\n                        type: 'aws.s3',\n                        options: {}\n                    }\n                }],\n            customizations,\n        };\n        requests.push(request);\n    }\n\n    return requests;\n};\n\nconst CreateImageWizard = () => {\n    const dispatch = useDispatch();\n    const navigate = useNavigate();\n    return <ImageCreator\n        onClose={ () => navigate('/') }\n        onSubmit={ ({ values, setIsSaving }) => {\n            setIsSaving(() => true);\n            const requests = onSave(values);\n            Promise.all(requests.map(request => api.composeImage(request).then((response) => {\n                dispatch(composeAdded({\n                    ...response,\n                    request,\n                    image_status: { status: 'pending' }\n                }, true));\n            })))\n                .then(() => {\n                    navigate('/');\n                    dispatch(addNotification({\n                        variant: 'success',\n                        title: 'Your image is being created',\n                    }));\n\n                    setIsSaving(false);\n                })\n                .catch((err) => {\n                    dispatch(addNotification({\n                        variant: 'danger',\n                        title: 'Your image could not be created',\n                        description: 'Status code ' + err.response.status + ': ' + err.response.statusText,\n                    }));\n\n                    setIsSaving(false);\n                });\n        } }\n        defaultArch=\"x86_64\"\n        customValidatorMapper={ { fileSystemConfigurationValidator, } }\n        schema={ {\n            fields: [\n                {\n                    component: componentTypes.WIZARD,\n                    name: 'image-builder-wizard',\n                    className: 'image_builder',\n                    isDynamic: true,\n                    inModal: true,\n                    buttonLabels: {\n                        submit: 'Create image',\n                    },\n                    showTitles: true,\n                    title: 'Create image',\n                    crossroads: [ 'target-environment', 'release' ],\n                    description: <>Create a RHEL image and push it to cloud providers. <Button\n                        component=\"a\"\n                        target=\"_blank\"\n                        variant=\"link\"\n                        icon={ <ExternalLinkAltIcon /> }\n                        iconPosition=\"right\"\n                        isInline\n                        href=\"\nhttps://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/8/html/uploading_a_customized_rhel_system_image_to_cloud_environments/index\n            \">\n                Documentation\n                    </Button></>,\n                    // order in this array does not reflect order in wizard nav, this order is managed inside\n                    // of each step by `nextStep` property!\n                    fields: [\n                        details,\n                        imageOutput,\n                        awsTarget,\n                        googleCloudTarger,\n                        msAzureTarget,\n                        registration,\n                        packages,\n                        fileSystemConfiguration,\n                        review,\n                    ]\n                }\n            ]\n        } } />;\n};\n\nexport default CreateImageWizard;\n","import axios from 'axios';\nimport {\n    IMAGE_BUILDER_API,\n    RHSM_API,\n} from './constants';\n\nconst postHeaders = { headers: { 'Content-Type': 'application/json' }};\n\nasync function composeImage(body) {\n    let path = '/compose';\n    const request = await axios.post(IMAGE_BUILDER_API.concat(path), body, postHeaders);\n    return request.data;\n}\n\nasync function getComposes(limit, offset) {\n    const params = new URLSearchParams({\n        limit,\n        offset,\n    });\n    let path = '/composes?' + params.toString();\n    const request = await axios.get(IMAGE_BUILDER_API.concat(path));\n    return request.data;\n}\n\nasync function getComposeStatus(id) {\n    let path = '/composes/' + id;\n    const request = await axios.get(IMAGE_BUILDER_API.concat(path));\n    return request.data;\n}\n\nasync function getPackages(distribution, architecture, search, limit) {\n    const params = new URLSearchParams({\n        distribution,\n        architecture,\n        search,\n    });\n    limit && params.append('limit', limit);\n    let path = '/packages?' + params.toString();\n    const request = await axios.get(IMAGE_BUILDER_API.concat(path));\n    return request.data;\n}\n\nasync function getVersion() {\n    let path = '/version';\n    const request = await axios.get(IMAGE_BUILDER_API.concat(path));\n    return request.data;\n}\n\nasync function getActivationKeys() {\n    const path = '/activation_keys';\n    const request = await axios.get(RHSM_API.concat(path));\n    return request.data.body;\n}\n\nexport default {\n    composeImage,\n    getComposes,\n    getComposeStatus,\n    getPackages,\n    getVersion,\n    getActivationKeys,\n};\n","export const IMAGE_BUILDER_API = '/api/image-builder/v1';\nexport const RHSM_API = '/api/rhsm/v2';\nexport const RHEL_8 = 'rhel-85';\n\nexport const UNIT_KIB = 1024 ** 1;\nexport const UNIT_MIB = 1024 ** 2;\nexport const UNIT_GIB = 1024 ** 3;\n","import api from '../../api';\nimport types from '../types';\n\nfunction composeUpdated(compose) {\n    return {\n        type: types.COMPOSE_UPDATED,\n        payload: { compose },\n    };\n}\n\nexport const composeFailed = (error) => ({\n    type: types.COMPOSE_FAILED,\n    payload: { error }\n});\n\nexport const composeAdded = (compose, insert) => ({\n    type: types.COMPOSE_ADDED,\n    payload: { compose, insert },\n});\n\nexport const composeStart = (composeRequest) => async dispatch => {\n    // response will be of the format {id: ''}\n    const request = api.composeImage(composeRequest);\n    return request.then(response => {\n        // add the compose id to the compose object to provide access to the id if iterating through\n        // composes and add an image status of 'pending' alongside the compose request.\n        const compose = Object.assign({}, response, { request: composeRequest },  { image_status: { status: 'pending' }});\n        dispatch(composeAdded(compose, true));\n    }).catch(err => {\n        if (err.response.status === 500) {\n            dispatch(composeFailed('Error: Something went wrong serverside'));\n        } else {\n            dispatch(composeFailed('Error: Something went wrong with the compose'));\n        }\n    });\n};\n\nexport const composeUpdatedStatus = (id, status) => ({\n    type: types.COMPOSE_UPDATED_STATUS,\n    payload: { id, status }\n});\n\nexport const composeGetStatus = (id) => async dispatch => {\n    const request = await api.getComposeStatus(id);\n    dispatch(composeUpdatedStatus(id, request.image_status));\n};\n\nexport const composesUpdatedCount = (count) => ({\n    type: types.COMPOSES_UPDATED_COUNT,\n    payload: { count }\n});\n\nexport const composesGet = (limit, offset) => async dispatch => {\n    const request = await api.getComposes(limit, offset);\n    request.data.map(compose => {\n        dispatch(composeAdded(compose, false));\n        dispatch(composeGetStatus(compose.id));\n    });\n    dispatch(composesUpdatedCount(request.meta.count));\n};\n\nfunction setRelease({ arch, distro }) {\n    return {\n        type: types.SET_RELEASE,\n        payload: {\n            arch,\n            distro,\n        }\n    };\n}\n\nfunction setUploadDestinations({ aws, azure, google }) {\n    return {\n        type: types.SET_UPLOAD_DESTINATIONS,\n        payload: {\n            aws,\n            azure,\n            google,\n        }\n    };\n}\n\nfunction setUploadAWS({ shareWithAccounts }) {\n    return {\n        type: types.SET_UPLOAD_AWS,\n        payload: {\n            shareWithAccounts,\n        }\n    };\n}\n\nfunction setUploadAzure({ tenantId, subscriptionId, resourceGroup }) {\n    return {\n        type: types.SET_UPLOAD_AZURE,\n        payload: {\n            tenantId,\n            subscriptionId,\n            resourceGroup,\n        }\n    };\n}\n\nfunction setUploadGoogle({ accountType, shareWithAccounts }) {\n    return {\n        type: types.SET_UPLOAD_GOOGLE,\n        payload: {\n            accountType,\n            shareWithAccounts,\n        }\n    };\n}\n\nfunction setSelectedPackages(selectedPackages) {\n    return {\n        type: types.SET_SELECTED_PACKAGES,\n        payload: selectedPackages\n    };\n}\n\nfunction setSubscription({ activationKey, insights, organization }) {\n    return {\n        type: types.SET_SUBSCRIPTION,\n        payload: {\n            activationKey,\n            insights,\n            organization,\n        }\n    };\n}\n\nfunction setSubscribeNow(subscribeNow) {\n    return {\n        type: types.SET_SUBSCRIBE_NOW,\n        payload: subscribeNow\n    };\n}\n\nexport default {\n    composesGet,\n    composeStart,\n    composeUpdated,\n    composeGetStatus,\n    setRelease,\n    setUploadDestinations,\n    setUploadAWS,\n    setUploadAzure,\n    setUploadGoogle,\n    setSelectedPackages,\n    setSubscription,\n    setSubscribeNow,\n};\n"],"names":["targetEnv","release","skipAws","skipGoogle","skipAzure","aws","google","azure","RHEL_8","releaseValues","title","name","nextStep","values","nextStepMapper","fields","component","componentTypes","label","simpleValue","initialValue","options","Object","entries","map","key","value","isRequired","validate","type","validatorTypes","googleAccType","googleAccount","serviceAccount","googleGroup","domain","PopoverInfo","appendTo","Popover","hasAutoWidth","maxWidth","headerContent","flipBehavior","bodyContent","TextContent","Text","TextList","TextListItem","Button","variant","className","propTypes","PropTypes","customTitle","Title","headingLevel","size","substepOf","condition","or","when","is","pattern","message","FSReviewTable","props","TableComposable","Thead","Tr","Th","Tbody","fsc","r","ri","Td","mountpoint","unit","UNIT_GIB","UNIT_MIB","useState","activeTabKey","setActiveTabKey","orgId","setOrgId","minSize","setMinSize","useFormApi","change","getState","useEffect","registerSystem","insights","chrome","auth","getUser","userData","id","identity","internal","org_id","toFixed","DescriptionList","isCompact","isHorizontal","DescriptionListGroup","DescriptionListTerm","DescriptionListDescription","Tabs","isFilled","activeKey","onSelect","event","tabIndex","Tab","eventKey","TabTitleText","List","isPlain","iconSize","ListItem","icon","src","TextVariants","TextListVariants","TextListItemVariants","vsphere","includes","undefined","Spinner","position","minWidth","length","TargetEnvironment","input","useFieldApi","environment","setEnvironment","handleSetEnvironment","env","prevEnv","newEnv","FormGroup","Tile","onClick","isSelected","isStacked","isDisplayLarge","Checkbox","isChecked","onChange","defaultProps","removePackagesDisplayFields","packages","pack","summary","Packages","defaultArch","packagesSearchName","useRef","packagesAvailable","setPackagesAvailable","packagesAvailableFound","setPackagesAvailableFound","packagesChosen","setPackagesChosen","packagesChosenFound","setPackagesChosenFound","filterChosen","setFilterChosen","focus","setFocus","selectedPackages","searchResultsComparator","useCallback","searchTerm","a","b","toLowerCase","startsWith","sortPackages","packageList","sortResults","sort","current","filterPackagesAvailable","filter","availablePackage","some","chosenPackage","getAllPackages","args","architecture","api","data","meta","count","handlePackagesAvailableSearch","packagesAvailableFiltered","handlePackagesChosenSearch","found","filteredPackagesChosen","isHidden","keydownHandler","stopPropagation","document","addEventListener","removeEventListener","moveSelected","fromAvailable","destinationPackages","updatedSourcePackages","selected","push","moveAll","chosenPackages","onOptionSelect","index","isChosen","newChosen","newAvailable","DualListSelector","DualListSelectorPane","searchInput","SearchInput","placeholder","onFocus","onBlur","val","actions","DualListSelectorList","DualListSelectorListItem","e","DualListSelectorControlsWrapper","DualListSelectorControl","isDisabled","option","tooltipContent","RadioWithPopover","ref","tenantId","guidRegex","RegExp","target","test","href","expanded","setExpanded","ExpandableSection","toggleText","onToggle","isExpanded","iconPosition","isInline","ActivationKeys","activationKeys","setActivationKeys","isOpen","setIsOpen","isLoading","setIsLoading","activationKeySelected","selectActivationKey","then","keys","Select","SelectVariant","_","selection","onClear","selections","placeholderText","typeAheadAriaLabel","SelectOption","isNoResultsOption","isSVG","MountPoint","validPrefixes","prefix","setPrefix","suffix","setSuffix","p","substring","suf","mp","path","pfx","TextInput","v","SizeUnit","setUnit","setSize","isNaN","parseInt","UNIT_KIB","u","initialRow","uuidv4","fstype","draggedItemId","setDraggedItemId","draggingToItemIndex","setDraggingToItemIndex","isDragging","setIsDragging","itemOrder","setItemOrder","tempItemOrder","setTempItemOrder","bodyref","rows","setRows","newRows","newOrder","r2","move","ulNode","nodes","Array","from","children","node","every","i","firstChild","removeChild","lastChild","forEach","appendChild","find","n","onDragOver","evt","preventDefault","curListItem","closest","contains","dragId","newDraggingToItemIndex","findIndex","item","arr","i1","toIndex","fromIndex","indexOf","temp","splice","moveItem","isValidDrop","ulRect","getBoundingClientRect","clientX","x","width","clientY","y","height","onDrop","currentTarget","classList","remove","styles","setAttribute","onDragStart","dataTransfer","effectAllowed","setData","add","onDragEnd","errors","duplicates","Alert","root","onDragLeave","row","rowIndex","draggable","draggableRow","newRow","setMountpoint","s","removeIndex","removeOrderIndex","removeRow","concat","setSelected","ToggleGroup","ToggleGroupItem","text","buttonId","ImageCreator","schema","onSubmit","onClose","customComponentMapper","customValidatorMapper","subscription","FormTemplate","showFormControls","formValues","validatorMapper","componentMapper","review","Review","output","select","AzureAuthExpandable","AzureAuthButton","FileSystemConfigToggle","FileSystemConfiguration","onCancel","threshold","required","PopoverActivation","description","CustomButtons","buttonLabels","cancel","submit","back","isSaving","setIsSaving","useContext","WizardContext","handlePrev","formOptions","valid","validating","buttons","mpFreqs","k","dispatch","useDispatch","navigate","useNavigate","requests","customizations","organization","Number","filesystem","min_size","request","distribution","image_name","image_requests","image_type","upload_request","share_with_accounts","share","tenant_id","subscription_id","resource_group","onSave","Promise","all","response","composeAdded","image_status","status","addNotification","err","statusText","fileSystemConfigurationValidator","isDynamic","inModal","showTitles","crossroads","details","imageOutput","awsTarget","googleCloudTarger","msAzureTarget","registration","fileSystemConfiguration","postHeaders","headers","body","axios","IMAGE_BUILDER_API","limit","offset","params","URLSearchParams","toString","search","append","RHSM_API","composeImage","getComposes","getComposeStatus","getPackages","getVersion","getActivationKeys","composeFailed","error","types","payload","compose","insert","composeUpdatedStatus","composeGetStatus","composesGet","composeStart","composeRequest","assign","composeUpdated","setRelease","arch","distro","setUploadDestinations","setUploadAWS","shareWithAccounts","setUploadAzure","subscriptionId","resourceGroup","setUploadGoogle","accountType","setSelectedPackages","setSubscription","activationKey","setSubscribeNow","subscribeNow"],"sourceRoot":""}