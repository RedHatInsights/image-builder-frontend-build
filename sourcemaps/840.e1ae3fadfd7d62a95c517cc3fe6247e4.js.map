{"version":3,"file":"js/840.ae3f55457fc98d0cbc90.js","mappings":"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","sources":["webpack:///./src/Components/CreateImageWizard/steps/imageOutputStepMapper.js","webpack:///./src/Components/CreateImageWizard/steps/imageOutput.js","webpack:///./src/Components/CreateImageWizard/steps/registration.js","webpack:///./src/Components/CreateImageWizard/steps/googleCloud.js","webpack:///./src/Components/CreateImageWizard/formComponents/ReviewStep.js","webpack:///./src/Components/CreateImageWizard/formComponents/TargetEnvironment.js","webpack:///./src/Components/CreateImageWizard/formComponents/Packages.js","webpack:///./src/Components/CreateImageWizard/formComponents/RadioWithPopover.js","webpack:///./src/Components/CreateImageWizard/formComponents/AzureAuthButton.js","webpack:///./src/Components/CreateImageWizard/ImageCreator.js","webpack:///./src/Components/CreateImageWizard/steps/aws.js","webpack:///./src/Components/CreateImageWizard/steps/msAzure.js","webpack:///./src/Components/CreateImageWizard/steps/packages.js","webpack:///./src/Components/CreateImageWizard/formComponents/CustomSubmitButtons.js","webpack:///./src/Components/CreateImageWizard/steps/review.js","webpack:///./src/Components/CreateImageWizard/CreateImageWizard.js"],"sourcesContent":["import { RHEL_8 } from '../../../constants.js';\n\nexport default ({ 'target-environment': targetEnv, release } = {}, { skipAws, skipGoogle, skipAzure } = {}) => {\n    if (!skipAws && targetEnv?.aws) {\n        return 'aws-target-env';\n    }\n\n    if (!skipGoogle && targetEnv?.google) {\n        return 'google-cloud-target-env';\n    }\n\n    if (!skipAzure && targetEnv?.azure) {\n        return 'ms-azure-target-env';\n    }\n\n    return release === RHEL_8 ? 'registration' : 'packages';\n};\n","import componentTypes from '@data-driven-forms/react-form-renderer/component-types';\nimport validatorTypes from '@data-driven-forms/react-form-renderer/validator-types';\nimport nextStepMapper from './imageOutputStepMapper';\nimport { RHEL_8 } from '../../../constants.js';\n\nexport const releaseValues = {\n    [RHEL_8]: 'Red Hat Enterprise Linux (RHEL) 8',\n    'centos-8': 'CentOS Stream 8'\n};\n\nexport default {\n    title: 'Image output',\n    name: 'image-output',\n    nextStep: ({ values }) => nextStepMapper(values),\n    fields: [\n        {\n            component: componentTypes.SELECT,\n            label: 'Release',\n            name: 'release',\n            simpleValue: true,\n            initialValue: RHEL_8,\n            options: Object.entries(releaseValues).map(([ key, title ]) => ({\n                label: title,\n                value: key\n            })),\n            isRequired: true,\n            validate: [\n                {\n                    type: validatorTypes.REQUIRED\n                }\n            ],\n        },\n        {\n            component: 'output',\n            name: 'target-environment',\n            label: 'Select target environment',\n            isRequired: true,\n            validate: [\n                {\n                    type: validatorTypes.REQUIRED\n                }\n            ],\n        }\n    ]\n};\n","import componentTypes from '@data-driven-forms/react-form-renderer/component-types';\nimport validatorTypes from '@data-driven-forms/react-form-renderer/validator-types';\n\nexport const registerValues = {\n    'subscribe-now-radio': {\n        title: 'Embed an activation key and register systems on first boot',\n        testId: 'register-now-radio-button'\n    },\n    'register-later-radio-button': {\n        title: 'Register the system later',\n        testId: 'register-later-radio-button'\n    }\n};\n\nexport default (user) => ({\n    title: 'Registration',\n    name: 'registration',\n    nextStep: 'packages',\n    fields: [\n        {\n            component: componentTypes.RADIO,\n            label: 'Register the system',\n            name: 'register-system',\n            initialValue: 'register-later-radio-button',\n            options: Object.entries(registerValues).map(([ key, { title, testId }]) => ({\n                label: title,\n                value: key,\n                'data-testid': testId,\n            }))\n        },\n        {\n            component: componentTypes.TEXT_FIELD,\n            name: 'subscription-organization',\n            type: 'text',\n            'data-testid': 'organization-id',\n            label: 'Organization ID',\n            initialValue: Number(user?.identity?.internal?.org_id),\n            isDisabled: true,\n            condition: {\n                or: [\n                    { when: 'register-system', is: 'subscribe-now-radio' },\n                ]\n            }\n        },\n        {\n            component: componentTypes.TEXT_FIELD,\n            name: 'subscription-activation',\n            'data-testid': 'subscription-activation',\n            required: true,\n            type: 'password',\n            label: 'Activation key',\n            condition: {\n                or: [\n                    { when: 'register-system', is: 'subscribe-now-radio' },\n                ]\n            },\n            isRequired: true,\n            validate: [\n                {\n                    type: validatorTypes.REQUIRED,\n                },\n            ],\n        }\n    ]\n});\n","import React from 'react';\nimport componentTypes from '@data-driven-forms/react-form-renderer/component-types';\nimport validatorTypes from '@data-driven-forms/react-form-renderer/validator-types';\nimport { HelpIcon } from '@patternfly/react-icons';\nimport nextStepMapper from './imageOutputStepMapper';\nimport { Title, Text, Popover, TextContent, TextList, TextListItem, Button } from '@patternfly/react-core';\nimport PropTypes from 'prop-types';\n\nexport const googleAccType = {\n    googleAccount: 'Google account',\n    serviceAccount: 'Service account',\n    googleGroup: 'Google group',\n    domain: 'Domain'\n};\n\nconst PopoverInfo = ({ appendTo }) => {\n    return <Popover\n        appendTo={ appendTo }\n        hasAutoWidth\n        maxWidth='35rem'\n        headerContent={ 'Valid account types' }\n        bodyContent={ <TextContent>\n            <Text>The following account types can have an image shared with them:</Text>\n            <TextList>\n                <TextListItem>\n                    <strong>Google account:</strong> A Google account represents a developer, an administrator,\n    or any other person who interacts with Google Cloud. e.g., <em>`alice@gmail.com`</em>.\n                </TextListItem>\n                <TextListItem>\n                    <strong>Service account:</strong> A service account is an account for an application instead\n    of an individual end user. e.g., <em>`myapp@appspot.gserviceaccount.com`</em>.\n                </TextListItem>\n                <TextListItem>\n                    <strong>Google group:</strong> A Google group is a named collection of Google accounts and\n    service accounts. e.g., <em>`admins@example.com`</em>.\n                </TextListItem>\n                <TextListItem>\n                    <strong>Google Workspace domain/Cloud Identity domain:</strong> A Google workspace or cloud identity\n    domain represents a virtual group of all the Google accounts in an organization. These domains\n    represent your organization&apos;s internet domain name. e.g., <em>`mycompany.com`</em>.\n                </TextListItem>\n            </TextList>\n        </TextContent> }>\n        <Button\n            variant=\"plain\"\n            aria-label=\"Account info\"\n            aria-describedby=\"google-account-type\"\n            className=\"pf-c-form__group-label-help\">\n            <HelpIcon />\n        </Button>\n    </Popover>;\n};\n\nPopoverInfo.propTypes = {\n    appendTo: PropTypes.any\n};\n\nexport default {\n    title: 'Google Cloud Platform',\n    customTitle: <Title headingLevel=\"h1\" size=\"xl\">Target environment - Google Cloud Platform</Title>,\n    name: 'google-cloud-target-env',\n    substepOf: 'Target environment',\n    nextStep: ({ values }) => nextStepMapper(values, { skipGoogle: true, skipAws: true }),\n    fields: [\n        {\n            component: componentTypes.PLAIN_TEXT,\n            name: 'google-cloud-text-component',\n            label: <Text>\n            Your image will be uploaded to Google Cloud Platform and shared with the email you provide below. <br />\n            The image should be copied to your account within 14 days.\n            </Text>\n        },\n        {\n            component: 'radio-popover',\n            label: 'Type',\n            Popover: PopoverInfo,\n            name: 'google-account-type',\n            initialValue: 'googleAccount',\n            options: Object.entries(googleAccType).map(([ value, label ]) => ({\n                label: value === 'domain' ? 'Google Workspace domain or Cloud Identity domain' : label,\n                value\n            })),\n            isRequired: true,\n            validate: [\n                {\n                    type: validatorTypes.REQUIRED,\n                },\n            ],\n        },\n        {\n            component: componentTypes.TEXT_FIELD,\n            name: 'google-email',\n            'data-testid': 'input-google-email',\n            type: 'text',\n            label: 'Email address',\n            condition: {\n                or: [\n                    { when: 'google-account-type', is: 'googleAccount' },\n                    { when: 'google-account-type', is: 'serviceAccount' },\n                    { when: 'google-account-type', is: 'googleGroup' },\n                    { when: 'google-account-type', is: null },\n                ]\n            },\n            isRequired: true,\n            validate: [\n                {\n                    type: validatorTypes.REQUIRED,\n                },\n                {\n                    type: validatorTypes.PATTERN,\n                    pattern: '[a-z0-9._%+-]+@[a-z0-9.-]+.[a-z]{2,}$',\n                    message: 'Please enter a valid email address'\n                }\n            ],\n        },\n        {\n            component: componentTypes.TEXT_FIELD,\n            name: 'google-domain',\n            type: 'text',\n            label: 'Domain',\n            condition: {\n                when: 'google-account-type',\n                is: 'domain'\n            },\n            isRequired: true,\n            validate: [\n                {\n                    type: validatorTypes.REQUIRED,\n                },\n            ],\n        }\n    ]\n};\n","import React from 'react';\nimport { TextContent, Text, TextVariants, Gallery, GalleryItem } from '@patternfly/react-core';\nimport useFormApi from '@data-driven-forms/react-form-renderer/use-form-api';\nimport { releaseValues } from '../steps/imageOutput';\nimport { registerValues } from '../steps/registration';\nimport { googleAccType } from '../steps/googleCloud';\n\nconst ReviewStep = () => {\n    const { getState } = useFormApi();\n    return (\n        <TextContent>\n            <Text>\n                    Review the information and click the Create button\n                    to create your image using the following criteria.\n            </Text>\n            <Text component={ TextVariants.h3 }>Image output</Text>\n            <Gallery data-testid='review-image-output'>\n                <GalleryItem>\n                    <Text component={ TextVariants.h4 }>Release</Text>\n                </GalleryItem>\n                <GalleryItem>\n                    <Text>\n                        {releaseValues?.[getState()?.values?.release]}\n                    </Text>\n                </GalleryItem>\n            </Gallery>\n            <Text component={ TextVariants.h3 }>Target environment</Text>\n            {getState()?.values?.['aws-account-id'] && <>\n                <Text id=\"destination-header\">Amazon Web Services</Text>\n                <Gallery data-testid='review-image-upload-aws'>\n                    <GalleryItem>\n                        <Text component={ TextVariants.h4 }>Account ID</Text>\n                    </GalleryItem>\n                    <GalleryItem>\n                        <Text>{getState()?.values?.['aws-account-id']}</Text>\n                    </GalleryItem>\n                </Gallery>\n            </>}\n            {getState()?.values?.['google-account-type'] && <>\n                <Text id=\"destination-header\">Google Cloud Platform</Text>\n                <Gallery data-testid='review-image-upload-google'>\n                    <GalleryItem>\n                        <Text component={ TextVariants.h4 }>\n                            {googleAccType?.[getState()?.values?.['google-account-type']]}\n                        </Text>\n                    </GalleryItem>\n                    <GalleryItem>\n                        <Text>\n                            {getState()?.values?.['google-email'] || getState()?.values?.['google-domain']}\n                        </Text>\n                    </GalleryItem>\n                </Gallery>\n            </>}\n            {getState()?.values?.['azure-subscription-id'] && <>\n                <Text id=\"destination-header\">Microsoft Azure</Text>\n                <Gallery data-testid='review-image-upload-azure'>\n                    <GalleryItem>\n                        <Text component={ TextVariants.h4 }>Subscription ID</Text>\n                    </GalleryItem>\n                    <GalleryItem>\n                        <Text>{getState()?.values?.['azure-subscription-id']}</Text>\n                    </GalleryItem>\n                </Gallery>\n                <Gallery>\n                    <GalleryItem>\n                        <Text component={ TextVariants.h4 }>Tenant ID</Text>\n                    </GalleryItem>\n                    <GalleryItem>\n                        <Text>{getState()?.values?.['azure-tenant-id']}</Text>\n                    </GalleryItem>\n                </Gallery>\n                <Gallery>\n                    <GalleryItem>\n                        <Text component={ TextVariants.h4 }>Resource group</Text>\n                    </GalleryItem>\n                    <GalleryItem>\n                        <Text>{getState()?.values?.['azure-resource-group']}</Text>\n                    </GalleryItem>\n                </Gallery>\n            </>}\n            {getState()?.values?.['register-system'] === 'subscribe-now-radio' &&\n             getState()?.values?.release.includes('rhel') &&\n                <>\n                    <Text component={ TextVariants.h3 }>Registration</Text>\n                    <Gallery data-testid='review-image-registration'>\n                        <GalleryItem>\n                            <Text component={ TextVariants.h4 }>Subscription</Text>\n                        </GalleryItem>\n                        <GalleryItem>\n                            <Text>\n                                {getState()?.values?.['register-system'] === 'subscribe-now-radio' ?\n                                    'Register the system on first boot' :\n                                    registerValues?.[getState()?.values?.['register-system']?.title]\n                                }\n                            </Text>\n                        </GalleryItem>\n                    </Gallery>\n                    <Gallery>\n                        <GalleryItem>\n                            <Text component={ TextVariants.h4 }>Activation key</Text>\n                        </GalleryItem>\n                        <GalleryItem>\n                            <Text type=\"password\">\n                                {'*'.repeat(getState()?.values?.['subscription-activation']?.length)}\n                            </Text>\n                        </GalleryItem>\n                    </Gallery>\n                </>\n            }\n        </TextContent>\n    );\n};\n\nexport default ReviewStep;\n","import React, { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport useFormApi from '@data-driven-forms/react-form-renderer/use-form-api';\nimport useFieldApi from '@data-driven-forms/react-form-renderer/use-field-api';\nimport { FormGroup, Tile } from '@patternfly/react-core';\nimport './TargetEnvironment.scss';\n\nconst TargetEnvironment = ({ label, isRequired, ...props }) => {\n    const { getState, change } = useFormApi();\n    const { input } = useFieldApi({ label, isRequired, ...props });\n    const [ environemt, setEnvironment ] = useState({\n        aws: false,\n        azure: false,\n        google: false,\n    });\n\n    useEffect(() => {\n        if (getState()?.values?.[input.name]) {\n            setEnvironment(getState().values[input.name]);\n        }\n    }, []);\n\n    return <FormGroup isRequired={ isRequired } label={ label } data-testid=\"target-select\">\n        <div className=\"tiles\">\n            <Tile\n                className=\"tile pf-u-mr-sm\"\n                data-testid=\"upload-aws\"\n                title=\"Amazon Web Services\"\n                icon={ <img\n                    className='provider-icon'\n                    src={ '/apps/frontend-assets/partners-icons/aws.svg' } /> }\n                onClick={ () => setEnvironment((prevEnv) => {\n                    const newEnv = ({\n                        ...prevEnv,\n                        aws: !prevEnv.aws\n                    });\n                    change(input.name, newEnv);\n                    return newEnv;\n                }) }\n                isSelected={ environemt.aws }\n                isStacked\n                isDisplayLarge />\n            <Tile\n                className=\"tile pf-u-mr-sm\"\n                data-testid=\"upload-google\"\n                title=\"Google Cloud Platform\"\n                icon={ <img\n                    className='provider-icon'\n                    src={ '/apps/frontend-assets/partners-icons/google-cloud-short.svg' } /> }\n                onClick={ () => setEnvironment((prevEnv) => {\n                    const newEnv = ({\n                        ...prevEnv,\n                        google: !prevEnv.google\n                    });\n                    change(input.name, newEnv);\n                    return newEnv;\n                }) }\n                isSelected={ environemt.google }\n                isStacked\n                isDisplayLarge />\n            <Tile\n                className=\"tile pf-u-mr-sm\"\n                data-testid=\"upload-azure\"\n                title=\"Microsoft Azure\"\n                icon={ <img\n                    className='provider-icon'\n                    src={ '/apps/frontend-assets/partners-icons/microsoft-azure-short.svg' } /> }\n                onClick={ () => setEnvironment((prevEnv) => {\n                    const newEnv = ({\n                        ...prevEnv,\n                        azure: !prevEnv.azure\n                    });\n                    input.value = newEnv;\n                    change(input.name, newEnv);\n                    return newEnv;\n                }) }\n                isSelected={ environemt.azure }\n                isStacked\n                isDisplayLarge />\n        </div>\n    </FormGroup>;\n};\n\nTargetEnvironment.propTypes = {\n    label: PropTypes.node,\n    isRequired: PropTypes.bool\n};\n\nTargetEnvironment.defaultProps = {\n    label: '',\n    isRequired: false\n};\n\nexport default TargetEnvironment;\n","import React, { useState, useRef, useEffect, useCallback } from 'react';\nimport useFormApi from '@data-driven-forms/react-form-renderer/use-form-api';\nimport useFieldApi from '@data-driven-forms/react-form-renderer/use-field-api';\nimport api from '../../../api';\nimport PropTypes from 'prop-types';\nimport {\n    Button,\n    DualListSelector,\n    DualListSelectorPane,\n    DualListSelectorList,\n    DualListSelectorListItem,\n    DualListSelectorControlsWrapper,\n    DualListSelectorControl,\n    SearchInput,\n    TextContent\n} from '@patternfly/react-core';\nimport { AngleDoubleLeftIcon, AngleLeftIcon, AngleDoubleRightIcon, AngleRightIcon } from '@patternfly/react-icons';\n\n// the fields isHidden and isSelected should not be included in the package list sent for image creation\nconst removePackagesDisplayFields = (packages) => packages.map((pack) => ({\n    name: pack.name,\n    summary: pack.summary,\n}));\n\nconst Packages = ({ defaultArch, ...props }) => {\n    const { change, getState } = useFormApi();\n    const { input } = useFieldApi(props);\n    const packagesSearchName = useRef();\n    const [ packagesAvailable, setPackagesAvailable ] = useState([]);\n    const [ packagesChosen, setPackagesChosen ] = useState([]);\n    const [ filterChosen, setFilterChosen ] = useState('');\n    const [ focus, setFocus ] = useState('');\n\n    const searchResultsComparator = useCallback((searchTerm) => {\n        return (a, b) => {\n            // check exact match first\n            if (a.name === searchTerm) {\n                return -1;\n            }\n\n            if (b.name === searchTerm) {\n                return 1;\n            }\n\n            // check for packages that start with the search term\n            if (a.name.startsWith(searchTerm) && !b.name.startsWith(searchTerm)) {\n                return -1;\n            }\n\n            if (b.name.startsWith(searchTerm) && !a.name.startsWith(searchTerm)) {\n                return 1;\n            }\n\n            // if both (or neither) start with the search term\n            // sort alphabetically\n            if (a.name < b.name) {\n                return -1;\n            }\n\n            if (b.name < a.name) {\n                return 1;\n            }\n\n            return 0;\n        };\n    });\n\n    const sortPackages = useCallback((packageList) => {\n        const sortResults = packageList.sort(searchResultsComparator(packagesSearchName.current));\n        setPackagesAvailable(sortResults);\n    });\n\n    // call api to list available packages\n    const handlePackagesAvailableSearch = async () => {\n        const { data } = await api.getPackages(\n            getState()?.values?.release,\n            getState()?.values?.architecture || defaultArch,\n            packagesSearchName.current\n        );\n        sortPackages(data);\n    };\n\n    // filter displayed selected packages\n    const handlePackagesChosenSearch = () => {\n        const filteredPackagesChosen = packagesChosen.map((pack) => {\n            if (!pack.name.includes(filterChosen)) {\n                pack.isHidden = true;\n            } else {\n                pack.isHidden = false;\n            }\n\n            return pack;\n        });\n        setPackagesChosen(filteredPackagesChosen);\n    };\n\n    const keydownHandler = (event) => {\n        if (event.key === 'Enter') {\n            if (focus === 'available') {\n                event.stopPropagation();\n                handlePackagesAvailableSearch();\n            } else if (focus === 'chosen') {\n                event.stopPropagation();\n                handlePackagesChosenSearch();\n            }\n        }\n    };\n\n    useEffect(() => {\n        document.addEventListener('keydown', keydownHandler, false);\n\n        return () => {\n            document.removeEventListener('keydown', keydownHandler, false);\n        };\n    });\n\n    // move selected packages\n    const moveSelected = (fromAvailable) => {\n        const sourcePackages = fromAvailable ? packagesAvailable : packagesChosen;\n        const destinationPackages = fromAvailable ? packagesChosen : packagesAvailable;\n\n        const updatedSourcePackages = sourcePackages.filter((pack) => {\n            if (pack.selected) {\n                pack.selected = false;\n                destinationPackages.push(pack);\n                return false;\n            }\n\n            return true;\n        });\n\n        if (fromAvailable) {\n            sortPackages(updatedSourcePackages);\n            setPackagesChosen([ ...destinationPackages ]);\n        } else {\n            setPackagesChosen(updatedSourcePackages);\n            sortPackages([ ...destinationPackages ]);\n        }\n\n        // set the steps field to the current chosen packages list\n        change(input.name, removePackagesDisplayFields(packagesChosen));\n    };\n\n    // move all packages\n    const moveAll = (fromAvailable) => {\n        if (fromAvailable) {\n            setPackagesChosen([ ...packagesAvailable.filter(pack => !pack.isHidden), ...packagesChosen ]);\n            sortPackages([ ...packagesAvailable.filter(pack => pack.isHidden) ]);\n        } else {\n            sortPackages([ ...packagesChosen.filter(pack => !pack.isHidden), ...packagesAvailable ]);\n            setPackagesChosen([ ...packagesChosen.filter(pack => pack.isHidden) ]);\n        }\n\n        // set the steps field to the current chosen packages list\n        change(input.name, removePackagesDisplayFields(packagesChosen));\n    };\n\n    const onOptionSelect = (event, index, isChosen) => {\n        if (isChosen) {\n            const newChosen = [ ...packagesChosen ];\n            newChosen[index].selected = !packagesChosen[index].selected;\n            setPackagesChosen(newChosen);\n        } else {\n            const newAvailable = [ ...packagesAvailable ];\n            newAvailable[index].selected = !packagesAvailable[index].selected;\n            sortPackages(newAvailable);\n        }\n    };\n\n    return (\n        <DualListSelector>\n            <DualListSelectorPane\n                title=\"Available packages\"\n                searchInput={ <SearchInput\n                    placeholder=\"Search for a package\"\n                    data-testid=\"search-available-pkgs-input\"\n                    value={ packagesSearchName.current }\n                    onFocus={ () => setFocus('available') }\n                    onBlur={ () => setFocus('') }\n                    onChange={ (val) => {\n                        packagesSearchName.current = val;\n                    } } /> }\n                actions={ [\n                    <Button\n                        aria-label=\"Search button for available packages\"\n                        key=\"availableSearchButton\"\n                        data-testid=\"search-available-pkgs-button\"\n                        onClick={ handlePackagesAvailableSearch }>\n                        Search\n                    </Button>\n                ] }>\n                <DualListSelectorList data-testid=\"available-pkgs-list\">\n                    {packagesAvailable.length === 0 ? (\n                        <p className=\"pf-u-text-align-center pf-u-mt-md\">\n                            Search above to add additional<br />\n                            packages to your image\n                        </p>\n                    ) : (packagesAvailable.map((pack, index) => {\n                        return !pack.isHidden ? (\n                            <DualListSelectorListItem\n                                key={ index }\n                                isSelected={ pack.selected }\n                                onOptionSelect={ (e) => onOptionSelect(e, index, false) }>\n                                <TextContent key={ `${pack.name}-${index}` }>\n                                    <span className=\"pf-c-dual-list-selector__item-text\">{ pack.name }</span>\n                                    <small>{ pack.summary }</small>\n                                </TextContent>\n                            </DualListSelectorListItem>\n                        ) : null;\n                    }))}\n                </DualListSelectorList>\n            </DualListSelectorPane>\n            <DualListSelectorControlsWrapper\n                aria-label=\"Selector controls\">\n                <DualListSelectorControl\n                    isDisabled={ !packagesAvailable.some(option => option.selected) }\n                    onClick={ () => moveSelected(true) }\n                    aria-label=\"Add selected\"\n                    tooltipContent=\"Add selected\">\n                    <AngleRightIcon />\n                </DualListSelectorControl>\n                <DualListSelectorControl\n                    isDisabled={ packagesAvailable.length === 0 }\n                    onClick={ () => moveAll(true) }\n                    aria-label=\"Add all\"\n                    tooltipContent=\"Add all\">\n                    <AngleDoubleRightIcon />\n                </DualListSelectorControl>\n                <DualListSelectorControl\n                    isDisabled={ packagesChosen.length === 0 }\n                    onClick={ () => moveAll(false) }\n                    aria-label=\"Remove all\"\n                    tooltipContent=\"Remove all\">\n                    <AngleDoubleLeftIcon />\n                </DualListSelectorControl>\n                <DualListSelectorControl\n                    onClick={ () => moveSelected(false) }\n                    isDisabled={ !packagesChosen.some(option => option.selected) }\n                    aria-label=\"Remove selected\"\n                    tooltipContent=\"Remove selected\">\n                    <AngleLeftIcon />\n                </DualListSelectorControl>\n            </DualListSelectorControlsWrapper>\n            <DualListSelectorPane\n                title=\"Chosen packages\"\n                searchInput={ <SearchInput\n                    placeholder=\"Search for a package\"\n                    value={ filterChosen }\n                    onFocus={ () => setFocus('chosen') }\n                    onBlur={ () => setFocus('') }\n                    onChange={ (val) => setFilterChosen(val) } /> }\n                actions={ [\n                    <Button\n                        aria-label=\"Search button for selected packages\"\n                        key=\"selectedSearchButton\"\n                        data-testid=\"search-selected-pkgs-button\"\n                        onClick={ handlePackagesChosenSearch }>\n                        Search\n                    </Button>\n                ] }\n                isChosen>\n                <DualListSelectorList>\n                    {packagesChosen.length === 0 ? (\n                        <p className=\"pf-u-text-align-center pf-u-mt-md\">\n                            No packages added\n                        </p>\n                    ) : (packagesChosen.map((pack, index) => {\n                        return !pack.isHidden ? (\n                            <DualListSelectorListItem\n                                key={ index }\n                                isSelected={ pack.selected }\n                                onOptionSelect={ (e) => onOptionSelect(e, index, true) }>\n                                <TextContent key={ `${pack.name}-${index}` }>\n                                    <span className=\"pf-c-dual-list-selector__item-text\">{ pack.name }</span>\n                                    <small>{ pack.summary }</small>\n                                </TextContent>\n                            </DualListSelectorListItem>\n                        ) : null;\n                    }))}\n                </DualListSelectorList>\n            </DualListSelectorPane>\n        </DualListSelector>\n    );\n};\n\nPackages.propTypes = {\n    defaultArch: PropTypes.string,\n};\n\nexport default Packages;\n","import React, { useRef } from 'react';\nimport Radio from '@data-driven-forms/pf4-component-mapper/radio';\nimport PropTypes from 'prop-types';\n\nconst RadioWithPopover = ({ Popover, ...props }) => {\n    const ref = useRef();\n    return <Radio { ...props } label={ <span ref={ ref } className=\"ins-c-image--builder__popover\">{props.label}\n        <Popover />\n    </span> } />;\n};\n\nRadioWithPopover.propTypes = {\n    Popover: PropTypes.elementType.isRequired,\n    label: PropTypes.node\n};\n\nexport default RadioWithPopover;\n","import React from 'react';\nimport { Button, FormGroup } from '@patternfly/react-core';\nimport useFormApi from '@data-driven-forms/react-form-renderer/use-form-api';\n\nconst AzureAuthButton = () => {\n    const { getState } = useFormApi();\n\n    const tenantId = getState()?.values?.['azure-tenant-id'];\n    const guidRegex = new RegExp('^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$', 'i');\n\n    return (\n        <FormGroup>\n            <Button\n                component=\"a\"\n                target=\"_blank\"\n                variant=\"secondary\"\n                isDisabled={ !guidRegex.test(tenantId) }\n                href={ 'https://login.microsoftonline.com/' + tenantId +\n                '/oauth2/v2.0/authorize?client_id=b94bb246-b02c-4985-9c22-d44e66f657f4&scope=openid&' +\n                'response_type=code&response_mode=query&redirect_uri=https://portal.azure.com' }>\n                Authorize Image Builder\n            </Button>\n        </FormGroup>);\n};\n\nexport default AzureAuthButton;\n","import React from 'react';\nimport FormRenderer from '@data-driven-forms/react-form-renderer/form-renderer';\nimport Pf4FormTemplate from '@data-driven-forms/pf4-component-mapper/form-template';\nimport { componentMapper } from '@data-driven-forms/pf4-component-mapper';\nimport { Spinner } from '@patternfly/react-core';\nimport PropTypes from 'prop-types';\nimport Review from './formComponents/ReviewStep';\nimport TargetEnvironment from './formComponents/TargetEnvironment';\nimport Packages from './formComponents/Packages';\nimport RadioWithPopover from './formComponents/RadioWithPopover';\nimport AzureAuthButton from './formComponents/AzureAuthButton';\nimport Select from '@data-driven-forms/pf4-component-mapper/select';\n\nconst ImageCreator = ({ schema, onSubmit, onClose, customComponentMapper, defaultArch, className, ...props }) => {\n    return schema ? <FormRenderer\n        schema={ schema }\n        className={ `image-builder${className ? ` ${className}` : ''}` }\n        subscription={ { values: true } }\n        FormTemplate={ (props) => <Pf4FormTemplate { ...props } showFormControls={ false } /> }\n        onSubmit={ (formValues) => onSubmit(formValues) }\n        componentMapper={ {\n            ...componentMapper,\n            review: Review,\n            output: TargetEnvironment,\n            select: Select,\n            'package-selector': {\n                component: Packages,\n                defaultArch\n            },\n            'radio-popover': RadioWithPopover,\n            'azure-auth-button': AzureAuthButton,\n            ...customComponentMapper\n        } }\n        onCancel={ onClose }\n        { ...props } /> : <Spinner />;\n};\n\nImageCreator.propTypes = {\n    schema: PropTypes.object,\n    onSubmit: PropTypes.func.isRequired,\n    onClose: PropTypes.func.isRequired,\n    customComponentMapper: PropTypes.shape({\n        [PropTypes.string]: PropTypes.oneOfType([ PropTypes.node, PropTypes.shape({\n            component: PropTypes.node\n        }) ])\n    }),\n    defaultArch: PropTypes.string,\n    className: PropTypes.string\n};\n\nexport default ImageCreator;\n","import React from 'react';\nimport componentTypes from '@data-driven-forms/react-form-renderer/component-types';\nimport validatorTypes from '@data-driven-forms/react-form-renderer/validator-types';\nimport nextStepMapper from './imageOutputStepMapper';\nimport { Title } from '@patternfly/react-core';\n\nexport default {\n    title: 'Amazon Web Services',\n    customTitle: <Title headingLevel=\"h1\" size=\"xl\">Target environment - Amazon Web Service</Title>,\n    name: 'aws-target-env',\n    substepOf: 'Target environment',\n    nextStep: ({ values }) => nextStepMapper(values, { skipAws: true }),\n    fields: [\n        {\n            component: componentTypes.PLAIN_TEXT,\n            name: 'plain-text-component',\n            label: <p>\n            Your image will be uploaded to a temporary account on Amazon Web Services. <br />\n            The image will be shared with the account you provide below. <br />\n            Within the next 14 days you will need to copy the shared image to your own account.\n            After 14 days it will be unavailable and will have to be regenerated.\n            </p>\n        },\n        {\n            component: componentTypes.TEXT_FIELD,\n            name: 'aws-account-id',\n            className: 'pf-u-w-25',\n            'data-testid': 'aws-account-id',\n            type: 'text',\n            label: 'AWS account ID',\n            isRequired: true,\n            validate: [\n                {\n                    type: validatorTypes.REQUIRED,\n                },\n                {\n                    type: validatorTypes.EXACT_LENGTH,\n                    threshold: 12\n                }\n            ],\n        }\n    ]\n};\n","import React from 'react';\nimport componentTypes from '@data-driven-forms/react-form-renderer/component-types';\nimport validatorTypes from '@data-driven-forms/react-form-renderer/validator-types';\nimport { Title, Text, Button } from '@patternfly/react-core';\nimport { ExternalLinkAltIcon } from '@patternfly/react-icons';\nimport nextStepMapper from './imageOutputStepMapper';\n\nexport default {\n    title: 'Microsoft Azure',\n    customTitle: <Title headingLevel=\"h1\" size=\"xl\">Target environment - Microsoft Azure</Title>,\n    name: 'ms-azure-target-env',\n    substepOf: 'Target environment',\n    nextStep: ({ values }) => nextStepMapper(values, { skipAws: true, skipGoogle: true, skipAzure: true }),\n    fields: [\n        {\n            component: componentTypes.PLAIN_TEXT,\n            name: 'azure-text-component',\n            label: <>\n                <Text>\n                    Image Builder sends an image to an authorized Azure account.\n                </Text>\n                <Title headingLevel=\"h3\">Authorizing an Azure account</Title>\n                <Text>\n            To authorize Image Builder to push images to Microsoft Azure, the account owner\n            must configure Image Builder as an authorized application for a specific tenant ID and give it the role of\n            &quot;Contributor&quot; to at least one resource group.<br />\n                </Text>\n                <small>\n                    <Button\n                        component=\"a\"\n                        target=\"_blank\"\n                        variant=\"link\"\n                        icon={ <ExternalLinkAltIcon /> }\n                        iconPosition=\"right\"\n                        isInline\n                        href=\"https://docs.microsoft.com/en-us/azure/active-directory/develop/v2-oauth2-auth-code-flow\">\n                      Learn more about OAuth 2.0\n                    </Button>\n                </small>\n                <Title headingLevel=\"h2\">Image Destination</Title>\n                <Text>\n                    Your image will be uploaded to the resource group in the subscription you specify.\n                </Text>\n            </>\n        },\n        {\n            component: componentTypes.TEXT_FIELD,\n            name: 'azure-tenant-id',\n            'data-testid': 'azure-tenant-id',\n            type: 'text',\n            label: 'Tenant GUID',\n            required: true,\n            isRequired: true,\n            validate: [\n                {\n                    type: validatorTypes.REQUIRED,\n                },\n                {\n                    type: validatorTypes.PATTERN,\n                    pattern: /^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i,\n                    message: 'Please enter a valid tenant GUID',\n                }\n            ],\n        },\n        {\n            component: 'azure-auth-button',\n            name: 'azure-auth-button',\n            'data-testid': 'azure-auth-button',\n            required: true,\n            isRequired: true,\n        },\n        {\n            component: componentTypes.TEXT_FIELD,\n            name: 'azure-subscription-id',\n            'data-testid': 'azure-subscription-id',\n            type: 'text',\n            label: 'Subscription GUID',\n            isRequired: true,\n            validate: [\n                {\n                    type: validatorTypes.REQUIRED,\n                },\n            ],\n        },\n        {\n            component: componentTypes.TEXT_FIELD,\n            name: 'azure-resource-group',\n            'data-testid': 'azure-resource-group',\n            type: 'text',\n            label: 'Resource group',\n            isRequired: true,\n            validate: [\n                {\n                    type: validatorTypes.REQUIRED,\n                },\n            ],\n        }\n        // TODO check oauth2 thing too here?\n    ]\n};\n","import React from 'react';\nimport componentTypes from '@data-driven-forms/react-form-renderer/component-types';\nimport { Text } from '@patternfly/react-core';\n\nexport default {\n    title: 'Packages',\n    name: 'packages',\n    nextStep: 'review',\n    fields: [\n        {\n            component: componentTypes.PLAIN_TEXT,\n            name: 'google-cloud-text-component',\n            label: <Text>Add optional additional packages to your image by searching available packages.</Text>\n        },\n        {\n            component: 'package-selector',\n            name: 'selected-packages',\n            label: 'Available options'\n        }\n    ]\n};\n","import React, { useContext, useState } from 'react';\nimport { Button } from '@patternfly/react-core';\nimport { FormSpy } from '@data-driven-forms/react-form-renderer';\nimport WizardContext from '@data-driven-forms/react-form-renderer/wizard-context';\nimport PropTypes from 'prop-types';\n\nconst CustomButtons = ({ buttonLabels: { cancel, submit, back }}) => {\n    const [ isSaving, setIsSaving ] = useState(false);\n    const { handlePrev, formOptions } = useContext(WizardContext);\n    return <FormSpy>\n        {() => (\n            <React.Fragment>\n                <Button\n                    variant=\"primary\"\n                    type=\"button\"\n                    isDisabled={ !formOptions.valid || formOptions.getState().validating || isSaving }\n                    onClick={ () => {\n                        formOptions.onSubmit({\n                            values: formOptions.getState().values,\n                            setIsSaving\n                        });\n                    } }>\n                    {submit}\n                </Button>\n                <Button type=\"button\" variant=\"secondary\" onClick={ handlePrev } isDisabled={ isSaving }>\n                    {back}\n                </Button>\n                <div className=\"pf-c-wizard__footer-cancel\">\n                    <Button type=\"button\" variant=\"link\" onClick={ formOptions.onCancel } isDisabled={ isSaving }>\n                        {cancel}\n                    </Button>\n                </div>\n            </React.Fragment>\n        )}\n    </FormSpy>;\n};\n\nCustomButtons.propTypes = {\n    buttonLabels: PropTypes.shape({\n        cancel: PropTypes.node,\n        submit: PropTypes.node,\n        back: PropTypes.node,\n    }),\n    isSaving: PropTypes.bool\n};\n\nexport default CustomButtons;\n","import CustomButtons from '../formComponents/CustomSubmitButtons';\n\nexport default {\n    name: 'review',\n    title: 'Review',\n    buttons: CustomButtons,\n    fields: [\n        {\n            name: 'review',\n            component: 'review'\n        }\n    ]\n};\n","import React, { useState, useEffect } from 'react';\nimport ImageCreator from './ImageCreator';\nimport { useHistory } from 'react-router-dom';\nimport componentTypes from '@data-driven-forms/react-form-renderer/component-types';\nimport { Button, Spinner } from '@patternfly/react-core';\nimport { ExternalLinkAltIcon } from '@patternfly/react-icons';\nimport { review, awsTarget, registration, googleCloudTarger, msAzureTarget, packages, imageOutput } from './steps';\nimport './CreateImageWizard.scss';\nimport { useDispatch } from 'react-redux';\nimport api from '../../api';\nimport { composeAdded } from '../../store/actions/actions';\nimport { addNotification } from '@redhat-cloud-services/frontend-components-notifications/redux';\n\nconst onSave = (values) => {\n    let customizations = {\n        packages: values['selected-packages']?.map(p => p.name),\n    };\n\n    if (values['subscription-activation']) {\n        customizations.subscription = {\n            'activation-key': values['subscription-activation'],\n            insights: true,\n            organization: Number(values['subscription-organization']),\n            'server-url': 'subscription.rhsm.redhat.com',\n            'base-url': 'https://cdn.redhat.com/',\n        };\n    }\n\n    let requests = [];\n    if (values['target-environment']?.aws) {\n        let request = {\n            distribution: values.release,\n            image_requests: [\n                {\n                    architecture: 'x86_64',\n                    image_type: 'ami',\n                    upload_request: {\n                        type: 'aws',\n                        options: {\n                            share_with_accounts: [ values['aws-account-id'] ],\n                        },\n                    },\n                }],\n            customizations,\n        };\n        requests.push(request);\n    }\n\n    if (values['target-environment']?.google) {\n        let share = '';\n        switch (values['google-account-type']) {\n            case 'googleAccount':\n                share = `user:${values['google-email']}`;\n                break;\n            case 'serviceAccount':\n                share = `serviceAccount:${values['google-email']}`;\n                break;\n            case 'googleGroup':\n                share = `group:${values['google-email']}`;\n                break;\n            case 'domain':\n                share = `domain:${values['google-domain']}`;\n                break;\n        }\n\n        let request = {\n            distribution: values.release,\n            image_requests: [\n                {\n                    architecture: 'x86_64',\n                    image_type: 'vhd',\n                    upload_request: {\n                        type: 'gcp',\n                        options: {\n                            share_with_accounts: [ share ],\n                        },\n                    },\n                }],\n            customizations,\n        };\n\n        requests.push(request);\n    }\n\n    if (values['target-environment']?.azure) {\n        let request = {\n            distribution: values.release,\n            image_requests: [\n                {\n                    architecture: 'x86_64',\n                    image_type: 'vhd',\n                    upload_request: {\n                        type: 'azure',\n                        options: {\n                            tenant_id: values['azure-tenant-id'],\n                            subscription_id: values['azure-subscription-id'],\n                            resource_group: values['azure-resource-group'],\n                        },\n                    },\n                }],\n            customizations,\n        };\n        requests.push(request);\n    }\n\n    return requests;\n};\n\nconst CreateImageWizard = () => {\n    const dispatch = useDispatch();\n    const history = useHistory();\n    const [ user, setUser ] = useState();\n    useEffect(() => {\n        (async () => {\n            const userData = await insights?.chrome?.auth?.getUser() || {};\n            setUser(() => userData);\n        })();\n    }, []);\n    return user ? <ImageCreator\n        onClose={ () => history.push('/landing') }\n        onSubmit={ ({ values, setIsSaving }) => {\n            setIsSaving(() => true);\n            const requests = onSave(values);\n            Promise.all(requests.map(request => api.composeImage(request).then((response) => {\n                dispatch(composeAdded({\n                    ...response,\n                    request,\n                    image_status: { status: 'pending' }\n                }));\n            })))\n                .then(() => {\n                    history.push('/landing');\n                    dispatch(addNotification({\n                        variant: 'success',\n                        title: 'Your image is being created',\n                    }));\n\n                    setIsSaving(false);\n                })\n                .catch((err) => {\n                    dispatch(addNotification({\n                        variant: 'danger',\n                        title: 'Your image could not be created',\n                        description: 'Status code ' + err.response.status + ': ' + err.response.statusText,\n                    }));\n\n                    setIsSaving(false);\n                });\n        } }\n        defaultArch=\"x86_64\"\n        schema={ {\n            fields: [\n                {\n                    component: componentTypes.WIZARD,\n                    name: 'image-builder-wizard',\n                    className: 'image_builder',\n                    isDynamic: true,\n                    inModal: true,\n                    buttonLabels: {\n                        submit: 'Create',\n                    },\n                    showTitles: true,\n                    title: 'Create image',\n                    crossroads: [ 'target-environment', 'release' ],\n                    description: <div>Create a RHEL image and push it to cloud providers. <Button\n                        component=\"a\"\n                        target=\"_blank\"\n                        variant=\"link\"\n                        icon={ <ExternalLinkAltIcon /> }\n                        iconPosition=\"right\"\n                        isInline\n                        href=\"\nhttps://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/8/html/uploading_a_customized_rhel_system_image_to_cloud_environments/index\n            \">\n                Documentation\n                    </Button></div>,\n                    // order in this array does not reflect order in wizard nav, this order is managed inside\n                    // of each step by `nextStep` property!\n                    fields: [\n                        imageOutput,\n                        awsTarget,\n                        googleCloudTarger,\n                        msAzureTarget,\n                        registration(user),\n                        packages,\n                        review,\n                    ]\n                }\n            ]\n        } } /> : <Spinner />;\n};\n\nexport default CreateImageWizard;\n"],"names":["targetEnv","release","skipAws","skipGoogle","skipAzure","aws","google","azure","RHEL_8","releaseValues","title","name","nextStep","values","nextStepMapper","fields","component","componentTypes","label","simpleValue","initialValue","options","Object","entries","map","key","value","isRequired","validate","type","validatorTypes","registerValues","testId","user","Number","identity","internal","org_id","isDisabled","condition","or","when","is","required","googleAccType","googleAccount","serviceAccount","googleGroup","domain","PopoverInfo","appendTo","Popover","hasAutoWidth","maxWidth","headerContent","bodyContent","TextContent","Text","TextList","TextListItem","Button","variant","className","propTypes","PropTypes","customTitle","Title","headingLevel","size","substepOf","pattern","message","getState","useFormApi","TextVariants","Gallery","GalleryItem","id","includes","repeat","length","TargetEnvironment","props","change","input","useFieldApi","useState","environemt","setEnvironment","useEffect","FormGroup","Tile","icon","src","onClick","prevEnv","newEnv","isSelected","isStacked","isDisplayLarge","defaultProps","removePackagesDisplayFields","packages","pack","summary","Packages","defaultArch","packagesSearchName","useRef","packagesAvailable","setPackagesAvailable","packagesChosen","setPackagesChosen","filterChosen","setFilterChosen","focus","setFocus","searchResultsComparator","useCallback","searchTerm","a","b","startsWith","sortPackages","packageList","sortResults","sort","current","handlePackagesAvailableSearch","api","architecture","data","handlePackagesChosenSearch","filteredPackagesChosen","isHidden","keydownHandler","event","stopPropagation","document","addEventListener","removeEventListener","moveSelected","fromAvailable","destinationPackages","updatedSourcePackages","filter","selected","push","moveAll","onOptionSelect","index","isChosen","newChosen","newAvailable","DualListSelector","DualListSelectorPane","searchInput","SearchInput","placeholder","onFocus","onBlur","onChange","val","actions","DualListSelectorList","DualListSelectorListItem","e","DualListSelectorControlsWrapper","DualListSelectorControl","some","option","tooltipContent","RadioWithPopover","ref","tenantId","guidRegex","RegExp","target","test","href","ImageCreator","schema","onSubmit","onClose","customComponentMapper","subscription","FormTemplate","showFormControls","formValues","componentMapper","review","Review","output","select","Select","AzureAuthButton","onCancel","Spinner","threshold","iconPosition","isInline","CustomButtons","buttonLabels","cancel","submit","back","isSaving","setIsSaving","useContext","WizardContext","handlePrev","formOptions","valid","validating","buttons","dispatch","useDispatch","history","useHistory","setUser","insights","chrome","auth","getUser","userData","requests","customizations","p","organization","request","distribution","image_requests","image_type","upload_request","share_with_accounts","share","tenant_id","subscription_id","resource_group","onSave","Promise","all","then","response","composeAdded","image_status","status","addNotification","err","description","statusText","isDynamic","inModal","showTitles","crossroads","imageOutput","awsTarget","googleCloudTarger","msAzureTarget","registration"],"sourceRoot":""}