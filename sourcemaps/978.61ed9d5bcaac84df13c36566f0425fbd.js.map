{"version":3,"file":"js/978.1650559063699.8e00f9c6e8eaf8787fee.js","mappings":"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","sources":["webpack:///./node_modules/@patternfly/react-icons/dist/js/icons/check-circle-icon.js","webpack:///./node_modules/@patternfly/react-icons/dist/js/icons/download-icon.js","webpack:///./node_modules/@patternfly/react-icons/dist/js/icons/exclamation-circle-icon.js","webpack:///./node_modules/@patternfly/react-icons/dist/js/icons/github-icon.js","webpack:///./node_modules/@patternfly/react-icons/dist/js/icons/in-progress-icon.js","webpack:///./node_modules/@patternfly/react-icons/dist/js/icons/pending-icon.js","webpack:///./src/Components/ImagesTable/ImageBuildStatus.js","webpack:///./src/Components/ImagesTable/Release.js","webpack:///./src/Components/ImagesTable/Target.js","webpack:///./src/Components/ImagesTable/ImageLink.js","webpack:///./src/Components/ImagesTable/ImagesTable.js","webpack:///./src/Components/LandingPage/LandingPage.js","webpack:///./src/Components/sharedComponents/DocumentationButton.js","webpack:///./src/api.js","webpack:///./src/constants.js","webpack:///./src/store/actions/actions.js"],"sourcesContent":["\"use strict\"\nexports.__esModule = true;\nexports.CheckCircleIconConfig = {\n  name: 'CheckCircleIcon',\n  height: 512,\n  width: 512,\n  svgPath: 'M504 256c0 136.967-111.033 248-248 248S8 392.967 8 256 119.033 8 256 8s248 111.033 248 248zM227.314 387.314l184-184c6.248-6.248 6.248-16.379 0-22.627l-22.627-22.627c-6.248-6.249-16.379-6.249-22.628 0L216 308.118l-70.059-70.059c-6.248-6.248-16.379-6.248-22.628 0l-22.627 22.627c-6.248 6.248-6.248 16.379 0 22.627l104 104c6.249 6.249 16.379 6.249 22.628.001z',\n  yOffset: 0,\n  xOffset: 0,\n};\nexports.CheckCircleIcon = require('../createIcon').createIcon(exports.CheckCircleIconConfig);\nexports[\"default\"] = exports.CheckCircleIcon;","\"use strict\"\nexports.__esModule = true;\nexports.DownloadIconConfig = {\n  name: 'DownloadIcon',\n  height: 512,\n  width: 512,\n  svgPath: 'M216 0h80c13.3 0 24 10.7 24 24v168h87.7c17.8 0 26.7 21.5 14.1 34.1L269.7 378.3c-7.5 7.5-19.8 7.5-27.3 0L90.1 226.1c-12.6-12.6-3.7-34.1 14.1-34.1H192V24c0-13.3 10.7-24 24-24zm296 376v112c0 13.3-10.7 24-24 24H24c-13.3 0-24-10.7-24-24V376c0-13.3 10.7-24 24-24h146.7l49 49c20.1 20.1 52.5 20.1 72.6 0l49-49H488c13.3 0 24 10.7 24 24zm-124 88c0-11-9-20-20-20s-20 9-20 20 9 20 20 20 20-9 20-20zm64 0c0-11-9-20-20-20s-20 9-20 20 9 20 20 20 20-9 20-20z',\n  yOffset: 0,\n  xOffset: 0,\n};\nexports.DownloadIcon = require('../createIcon').createIcon(exports.DownloadIconConfig);\nexports[\"default\"] = exports.DownloadIcon;","\"use strict\"\nexports.__esModule = true;\nexports.ExclamationCircleIconConfig = {\n  name: 'ExclamationCircleIcon',\n  height: 512,\n  width: 512,\n  svgPath: 'M504 256c0 136.997-111.043 248-248 248S8 392.997 8 256C8 119.083 119.043 8 256 8s248 111.083 248 248zm-248 50c-25.405 0-46 20.595-46 46s20.595 46 46 46 46-20.595 46-46-20.595-46-46-46zm-43.673-165.346l7.418 136c.347 6.364 5.609 11.346 11.982 11.346h48.546c6.373 0 11.635-4.982 11.982-11.346l7.418-136c.375-6.874-5.098-12.654-11.982-12.654h-63.383c-6.884 0-12.356 5.78-11.981 12.654z',\n  yOffset: 0,\n  xOffset: 0,\n};\nexports.ExclamationCircleIcon = require('../createIcon').createIcon(exports.ExclamationCircleIconConfig);\nexports[\"default\"] = exports.ExclamationCircleIcon;","\"use strict\"\nexports.__esModule = true;\nexports.GithubIconConfig = {\n  name: 'GithubIcon',\n  height: 512,\n  width: 496,\n  svgPath: 'M165.9 397.4c0 2-2.3 3.6-5.2 3.6-3.3.3-5.6-1.3-5.6-3.6 0-2 2.3-3.6 5.2-3.6 3-.3 5.6 1.3 5.6 3.6zm-31.1-4.5c-.7 2 1.3 4.3 4.3 4.9 2.6 1 5.6 0 6.2-2s-1.3-4.3-4.3-5.2c-2.6-.7-5.5.3-6.2 2.3zm44.2-1.7c-2.9.7-4.9 2.6-4.6 4.9.3 2 2.9 3.3 5.9 2.6 2.9-.7 4.9-2.6 4.6-4.6-.3-1.9-3-3.2-5.9-2.9zM244.8 8C106.1 8 0 113.3 0 252c0 110.9 69.8 205.8 169.5 239.2 12.8 2.3 17.3-5.6 17.3-12.1 0-6.2-.3-40.4-.3-61.4 0 0-70 15-84.7-29.8 0 0-11.4-29.1-27.8-36.6 0 0-22.9-15.7 1.6-15.4 0 0 24.9 2 38.6 25.8 21.9 38.6 58.6 27.5 72.9 20.9 2.3-16 8.8-27.1 16-33.7-55.9-6.2-112.3-14.3-112.3-110.5 0-27.5 7.6-41.3 23.6-58.9-2.6-6.5-11.1-33.3 2.6-67.9 20.9-6.5 69 27 69 27 20-5.6 41.5-8.5 62.8-8.5s42.8 2.9 62.8 8.5c0 0 48.1-33.6 69-27 13.7 34.7 5.2 61.4 2.6 67.9 16 17.7 25.8 31.5 25.8 58.9 0 96.5-58.9 104.2-114.8 110.5 9.2 7.9 17 22.9 17 46.4 0 33.7-.3 75.4-.3 83.6 0 6.5 4.6 14.4 17.3 12.1C428.2 457.8 496 362.9 496 252 496 113.3 383.5 8 244.8 8zM97.2 352.9c-1.3 1-1 3.3.7 5.2 1.6 1.6 3.9 2.3 5.2 1 1.3-1 1-3.3-.7-5.2-1.6-1.6-3.9-2.3-5.2-1zm-10.8-8.1c-.7 1.3.3 2.9 2.3 3.9 1.6 1 3.6.7 4.3-.7.7-1.3-.3-2.9-2.3-3.9-2-.6-3.6-.3-4.3.7zm32.4 35.6c-1.6 1.3-1 4.3 1.3 6.2 2.3 2.3 5.2 2.6 6.5 1 1.3-1.3.7-4.3-1.3-6.2-2.2-2.3-5.2-2.6-6.5-1zm-11.4-14.7c-1.6 1-1.6 3.6 0 5.9 1.6 2.3 4.3 3.3 5.6 2.3 1.6-1.3 1.6-3.9 0-6.2-1.4-2.3-4-3.3-5.6-2z',\n  yOffset: 0,\n  xOffset: 0,\n};\nexports.GithubIcon = require('../createIcon').createIcon(exports.GithubIconConfig);\nexports[\"default\"] = exports.GithubIcon;","\"use strict\"\nexports.__esModule = true;\nexports.InProgressIconConfig = {\n  name: 'InProgressIcon',\n  height: 1024,\n  width: 1024,\n  svgPath: 'M513.417211,16.013668 L513.417211,112.013668 C513.406007,120.539653 520.082422,127.576718 528.597211,128.013668 C732.697211,136.513668 896.147211,305.013668 896.147211,511.343668 C896.147211,723.013668 724.007211,895.163668 512.417211,895.163668 C437.186239,895.277345 363.602574,873.135095 300.927211,831.523668 C294.58293,827.2982 286.138663,828.135095 280.747211,833.523668 L211.807211,902.353668 C208.502935,905.676185 206.82123,910.280199 207.20607,914.950237 C207.590911,919.620275 210.00361,923.886884 213.807211,926.623668 C300.709573,989.398037 405.213535,1023.13146 512.417211,1023.01398 C794.537211,1023.01398 1023.91724,793.433668 1023.91724,511.413668 C1024.00721,235.103668 804.007211,9.22366802 529.897211,0.00645736761 C525.571205,-0.116171039 521.377128,1.51204372 518.271915,4.52681369 C515.166702,7.54158367 513.415263,11.6857144 513.417211,16.013668 M97.1272107,212.923668 C64.2190689,258.479443 39.0698895,309.162997 22.6972107,362.923668 C21.2705092,367.756559 22.2039184,372.979173 25.2163356,377.018685 C28.2287528,381.058197 32.9681443,383.442545 38.0072107,383.453683 L139.407211,383.453683 C145.970195,383.46249 151.873012,379.462528 154.297211,373.363668 C164.307669,347.593304 177.068112,322.977652 192.357211,299.943668 C196.579666,293.633658 195.741339,285.216847 190.357211,279.863668 L121.497211,211.013668 C118.186635,207.662531 113.567544,205.940538 108.871166,206.30669 C104.174788,206.672841 99.8783994,209.089927 97.1272107,212.913668 M112.907211,511.433663 L17.0072107,511.433663 C12.679257,511.433663 8.5351263,513.183159 5.52035633,516.288373 C2.50558635,519.393586 0.877371594,523.587662 1.00721065,527.913668 C4.13104542,629.408217 37.6085847,727.635936 97.1172107,809.913668 C99.8539943,813.717268 104.120603,816.129968 108.790642,816.514809 C113.46068,816.899649 118.064693,815.217944 121.387211,811.913668 L190.217211,743.073668 C195.605784,737.682216 196.442679,729.237949 192.217211,722.893668 C153.520825,664.580171 131.611534,596.745437 128.887211,526.813668 C128.553964,518.220138 121.487197,511.427209 112.887211,511.433663',\n  yOffset: 0,\n  xOffset: 0,\n};\nexports.InProgressIcon = require('../createIcon').createIcon(exports.InProgressIconConfig);\nexports[\"default\"] = exports.InProgressIcon;","\"use strict\"\nexports.__esModule = true;\nexports.PendingIconConfig = {\n  name: 'PendingIcon',\n  height: 1024,\n  width: 1024,\n  svgPath: 'M512.1,895.9 C300.3,895.9 128.1,723.8 128.1,511.9 C128.1,300.2 300.3,127.9 512.1,127.9 C723.8,127.9 896,300.2 896.1,511.9 C896.1,723.7 723.8,895.9 512.1,895.9 M512.1,0 C229.7,0 0,229.7 0,512 C0,794.3 229.7,1024 512.1,1024 C794.3,1024 1024,794.3 1024,512 C1024,229.7 794.3,0 512.1,0 M704,288 L704,272 C704,263.2 696.8,256 688,256 L336,256 C327.2,256 320,263.2 320,272 L320,288 C320,447 480,449 480,512 C480,575 320,575 320,736 L320,752 C320,760.8 327.2,768 336,768 L688,768 C696.8,768 704,760.8 704,752 L704,736 C704,576 544,577 544,512 C544,447 704,448 704,288 M603.9,704 L420.3,704 C417.3,704 418.2,695 419.4,686.8 C426.8,634.5 480.1,617.4 495.2,612.3 C512.3,606.6 512.3,606.6 528.9,612.3 C544,617.6 597.6,635.4 604.8,687 C605.9,695.2 606.9,704 603.9,704',\n  yOffset: 0,\n  xOffset: 0,\n};\nexports.PendingIcon = require('../createIcon').createIcon(exports.PendingIconConfig);\nexports[\"default\"] = exports.PendingIcon;","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport { Flex } from '@patternfly/react-core';\nimport { CheckCircleIcon, PendingIcon, ExclamationCircleIcon, InProgressIcon } from '@patternfly/react-icons';\n\nimport './ImageBuildStatus.scss';\n\nconst ImageBuildStatus = (props) => {\n    const messages = {\n        success: [\n            {\n                icon: <CheckCircleIcon className=\"success\" />,\n                text: 'Ready'\n            }\n        ],\n        failure: [\n            {\n                icon: <ExclamationCircleIcon className=\"error\" />,\n                text: 'Image build failed'\n            }\n        ],\n        pending: [\n            {\n                icon: <PendingIcon />,\n                text: 'Image build is pending'\n            }\n        ],\n        // Keep \"running\" for backward compatibility\n        running: [\n            {\n                icon: <InProgressIcon className=\"pending\" />,\n                text: 'Image build in progress'\n            }\n        ],\n        building: [\n            {\n                icon: <InProgressIcon className=\"pending\" />,\n                text: 'Image build in progress'\n            }\n        ],\n        uploading: [\n            {\n                icon: <InProgressIcon className=\"pending\" />,\n                text: 'Image upload in progress'\n            }\n        ],\n        registering: [\n            {\n                icon: <InProgressIcon className=\"pending\" />,\n                text: 'Cloud registration in progress'\n            }\n        ]\n    };\n    return (\n        <React.Fragment>\n            {messages[props.status] &&\n                messages[props.status].map((message, key) => (\n                    <Flex key={ key } className=\"pf-u-align-items-baseline pf-m-nowrap\">\n                        <div className=\"pf-u-mr-sm\">{message.icon}</div>\n                        <small>{message.text}</small>\n                    </Flex>\n                ))\n            }\n        </React.Fragment>\n    );\n};\n\nImageBuildStatus.propTypes = {\n    status: PropTypes.string,\n};\n\nexport default ImageBuildStatus;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport { Label } from '@patternfly/react-core';\nimport { RHEL_8 } from '../../constants.js';\n\nconst Release = (props) => {\n    const releaseOptions = {\n        [RHEL_8]: 'RHEL 8',\n        'centos-8': 'CentOS Stream 8',\n        'centos-9': 'CentOS Stream 9',\n    };\n    const release = releaseOptions[props.release] ? releaseOptions[props.release] : props.release;\n    return <Label color='blue'>{release}</Label>;\n};\n\nRelease.propTypes = {\n    release: PropTypes.string,\n};\n\nexport default Release;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst Target = (props) => {\n    const targetOptions = {\n        aws: 'Amazon Web Services',\n        azure: 'Microsoft Azure',\n        gcp: 'Google Cloud Platform',\n        vsphere: 'VMWare',\n        'guest-image': 'Virtualization - Guest image',\n        'image-installer': 'Bare metal - Installer'\n    };\n\n    let target;\n    if (props.uploadType === 'aws.s3') {\n        target = targetOptions[props.imageType];\n    } else {\n        target = targetOptions[props.uploadType];\n    }\n\n    return (\n        <>\n            {target}\n        </>\n    );\n};\n\nTarget.propTypes = {\n    uploadType: PropTypes.string,\n    imageType: PropTypes.string\n};\n\nexport default Target;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport { Button, TextContent, Text, TextVariants, Popover } from '@patternfly/react-core';\nimport { DownloadIcon, ExternalLinkAltIcon } from '@patternfly/react-icons';\n\nconst ImageLink = (props) => {\n    const fileExtensions = {\n        vsphere: '.vmdk',\n        'guest-image': '.qcow2',\n        'image-installer': '.iso',\n    };\n\n    const uploadStatus = props.imageStatus ? props.imageStatus.upload_status : undefined;\n    if (uploadStatus) {\n        if (uploadStatus.type === 'aws') {\n            const url = 'https://console.aws.amazon.com/ec2/v2/home?region=' +\n                    uploadStatus.options.region +\n                    '#LaunchInstanceWizard:ami=' +\n                    uploadStatus.options.ami;\n            return (\n                <Button\n                    component=\"a\"\n                    target=\"_blank\"\n                    variant=\"link\"\n                    icon={ <ExternalLinkAltIcon /> }\n                    iconPosition=\"right\"\n                    isInline\n                    href={ url }>\n                        Launch instance\n                </Button>\n            );\n        } else if (uploadStatus.type === 'azure') {\n            const url = 'https://portal.azure.com/#@' + props.uploadOptions.tenant_id +\n            '/resource/subscriptions/' + props.uploadOptions.subscription_id +\n            '/resourceGroups/' + props.uploadOptions.resource_group +\n            '/providers/Microsoft.Compute/images/' + uploadStatus.options.image_name;\n            return (\n                <Button\n                    component=\"a\"\n                    target=\"_blank\"\n                    variant=\"link\"\n                    icon={ <ExternalLinkAltIcon /> }\n                    iconPosition=\"right\"\n                    isInline\n                    href={ url }>\n                        View uploaded image\n                </Button>\n            );\n        } else if (uploadStatus.type === 'gcp') {\n            return (\n                <Popover\n                    aria-label=\"Popover with google cloud platform image details\"\n                    maxWidth='30rem'\n                    headerContent={ 'GCP image details' }\n                    bodyContent={ <TextContent>\n                        <Text component={ TextVariants.p }>\n                            To use an Image Builder created Google Cloud Platform (GCP) image in your project,\n                            specify the project ID and image name in your templates and configurations.\n                        </Text>\n                        <Text>\n                            <strong>Project ID</strong>\n                            <br />\n                            {uploadStatus.options.project_id}\n                        </Text>\n                        <Text>\n                            <strong>Image Name</strong>\n                            <br />\n                            {uploadStatus.options.image_name}\n                        </Text>\n                        <Text>\n                            <strong>Shared with</strong>\n                            <br />\n                            {/* the account the image is shared with is stored in the form type:account so this extracts the account */}\n                            {props.uploadOptions.share_with_accounts[0].split(':')[1]}\n                        </Text>\n                    </TextContent> }>\n                    <Button\n                        component=\"a\"\n                        target=\"_blank\"\n                        variant=\"link\"\n                        isInline>\n                            Image details\n                    </Button>\n                </Popover>\n            );\n        } else if (uploadStatus.type === 'aws.s3') {\n            return (\n                <Button\n                    component=\"a\"\n                    target=\"_blank\"\n                    variant=\"link\"\n                    icon={ <DownloadIcon /> }\n                    iconPosition=\"right\"\n                    isInline\n                    href={ uploadStatus.options.url }>\n                        Download {fileExtensions[props.imageType]}\n                </Button>\n            );\n        }\n    }\n\n    return null;\n};\n\nImageLink.propTypes = {\n    imageStatus: PropTypes.object,\n    imageType: PropTypes.string,\n    uploadOptions: PropTypes.object,\n};\n\nexport default ImageLink;\n","import PropTypes from 'prop-types';\nimport React, { useEffect, useState } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { Link, useNavigate } from 'react-router-dom';\nimport { Table, TableHeader, TableBody } from '@patternfly/react-table';\nimport { EmptyState, EmptyStateVariant, EmptyStateIcon, EmptyStateBody, EmptyStateSecondaryActions,\n    Pagination,\n    Toolbar, ToolbarContent, ToolbarItem,\n    Title } from '@patternfly/react-core';\nimport { PlusCircleIcon } from '@patternfly/react-icons';\n\nimport { composesGet, composeGetStatus } from '../../store/actions/actions';\nimport DocumentationButton from '../sharedComponents/DocumentationButton';\nimport ImageBuildStatus from './ImageBuildStatus';\nimport Release from './Release';\nimport Target from './Target';\nimport ImageLink from './ImageLink';\n\nconst ImagesTable = () => {\n    const [ page, setPage ] = useState(1);\n    const [ perPage, setPerPage ] = useState(10);\n\n    const composes = useSelector((state) => state.composes);\n    const dispatch = useDispatch();\n\n    const navigate = useNavigate();\n\n    const pollComposeStatuses = () => {\n        Object.entries(composes.byId).map(([ id, compose ]) => {\n            /* Skip composes that have been complete */\n            if (compose.image_status.status === 'success' || compose.image_status.status === 'failure') {\n                return;\n            }\n\n            dispatch(composeGetStatus(id));\n        });\n    };\n\n    useEffect(() => {\n        dispatch(composesGet(perPage, 0));\n        const intervalId = setInterval(() => pollComposeStatuses(), 8000);\n\n        // clean up interval on unmount\n        return () => clearInterval(intervalId);\n    }, []);\n\n    const onSetPage = (_, page) => {\n        // if the next page's composes haven't been fetched from api yet\n        // then fetch them with proper page index and offset\n        if (composes.count > composes.allIds.length) {\n            const pageIndex = page - 1;\n            const offset = pageIndex * perPage;\n            dispatch(composesGet(perPage, offset));\n        }\n\n        setPage(page);\n    };\n\n    const onPerPageSelect = (_, perPage) => {\n        // if the new per page quantity is greater than the number of already fetched composes fetch more composes\n        // if all composes haven't already been fetched\n        if (composes.count > composes.allIds.length && perPage > composes.allIds.length) {\n            dispatch(composesGet(perPage, 0));\n        }\n\n        // page should be reset to the first page when the page size is changed.\n        setPerPage(perPage);\n        setPage(1);\n    };\n\n    const timestampToDisplayString = (ts) => {\n        // timestamp has format 2021-04-27 12:31:12.794809 +0000 UTC\n        // must be converted to ms timestamp and then reformatted to Apr 27, 2021\n        if (!ts) {\n            return '';\n        }\n\n        // get YYYY-MM-DD format\n        const date = ts.slice(0, 10);\n        const ms = Date.parse(date);\n        const options = { month: 'short', day: 'numeric', year: 'numeric' };\n        const tsDisplay = new Intl.DateTimeFormat('en-US', options).format(ms);\n        return tsDisplay;\n    };\n\n    const columns = [\n        'Image name',\n        'Created',\n        'Release',\n        'Target',\n        'Status',\n        'Instance',\n        ''\n    ];\n\n    // the state.page is not an index so must be reduced by 1 get the starting index\n    const itemsStartInclusive = (page - 1) * perPage;\n    const itemsEndExlcusive = itemsStartInclusive + perPage;\n    // only display the current pages section of composes. slice is inclusive, exclusive.\n    const rows = composes.allIds.slice(itemsStartInclusive, itemsEndExlcusive).map(id => {\n        const compose = composes.byId[id];\n        return {\n            compose,\n            cells: [\n                compose.request.image_name || id,\n                timestampToDisplayString(compose.created_at),\n                { title: <Release release={ compose.request.distribution } /> },\n                { title: <Target\n                    uploadType={ compose.request.image_requests[0].upload_request.type }\n                    imageType={ compose.request.image_requests[0].image_type } /> },\n                { title: <ImageBuildStatus status={ compose.image_status ? compose.image_status.status : '' } /> },\n                { title: <ImageLink\n                    imageStatus={ compose.image_status }\n                    imageType={ compose.request.image_requests[0].image_type }\n                    uploadOptions={ compose.request.image_requests[0].upload_request.options } /> }\n            ]\n        };\n    });\n\n    const actions = [\n        {\n            title: 'Recreate image',\n            onClick: (_event, _rowId, rowData) => navigate(\n                '/imagewizard',\n                { state: { composeRequest: rowData.compose.request, initialStep: 'review' }}\n            )\n        }\n    ];\n\n    return (\n        <React.Fragment>\n            { composes.allIds.length === 0 && (\n                <EmptyState variant={ EmptyStateVariant.large } data-testid=\"empty-state\">\n                    <EmptyStateIcon icon={ PlusCircleIcon } />\n                    <Title headingLevel=\"h4\" size=\"lg\">\n                        Create an image\n                    </Title>\n                    <EmptyStateBody>\n                        Create OS images for deployment in Amazon Web Services,\n                        Microsoft Azure and Google Cloud Platform. Images can\n                        include a custom package set and an activation key to\n                        automate the registration process.\n                    </EmptyStateBody>\n                    <Link to=\"/imagewizard\" className=\"pf-c-button pf-m-primary\" data-testid=\"create-image-action\">\n                    Create image\n                    </Link>\n                    <EmptyStateSecondaryActions>\n                        <DocumentationButton />\n                    </EmptyStateSecondaryActions>\n                </EmptyState>\n            ) || (\n                <React.Fragment>\n                    <Toolbar>\n                        <ToolbarContent>\n                            <ToolbarItem>\n                                <Link to=\"/imagewizard\" className=\"pf-c-button pf-m-primary\" data-testid=\"create-image-action\">\n                                    Create image\n                                </Link>\n                            </ToolbarItem>\n                            <ToolbarItem variant=\"pagination\" align={ { default: 'alignRight' } }>\n                                <Pagination\n                                    itemCount={ composes.count }\n                                    perPage={ perPage }\n                                    page={ page }\n                                    onSetPage={ onSetPage }\n                                    onPerPageSelect={ onPerPageSelect }\n                                    widgetId=\"compose-pagination\"\n                                    data-testid=\"images-pagination\"\n                                    isCompact />\n                            </ToolbarItem>\n                        </ToolbarContent>\n                    </Toolbar>\n                    <Table\n                        aria-label=\"Images\"\n                        rows={ rows }\n                        cells={ columns }\n                        actions={ actions }\n                        data-testid=\"images-table\">\n                        <TableHeader />\n                        <TableBody />\n                    </Table>\n                </React.Fragment>\n            )}\n        </React.Fragment>\n    );\n};\n\nImagesTable.propTypes = {\n    composes: PropTypes.object,\n    composesGet: PropTypes.func,\n    composeGetStatus: PropTypes.func,\n};\n\nexport default ImagesTable;\n","/* global COMMITHASH */\n\nimport React, { Component } from 'react';\n\nimport { PageHeader, PageHeaderTitle } from '@redhat-cloud-services/frontend-components';\n\nimport { Button, Popover, TextContent, Text } from '@patternfly/react-core';\nimport { GithubIcon, HelpIcon } from '@patternfly/react-icons';\n\nimport ImagesTable from '../ImagesTable/ImagesTable';\nimport './LandingPage.scss';\nimport DocumentationButton from '../sharedComponents/DocumentationButton';\n\nclass LandingPage extends Component {\n    constructor(props) {\n        super(props);\n    }\n\n    render() {\n        return (\n            <React.Fragment>\n                <PageHeader>\n                    <PageHeaderTitle className=\"title\" title=\"Image Builder\" />\n                    <Popover\n                        headerContent={ 'About Image Builder' }\n                        bodyContent={ <TextContent>\n                            <Text>\n                                        Image Builder is a service that allows you to create RHEL images\n                                        and push them to cloud environments.\n                            </Text>\n                            <DocumentationButton />\n                            <br />\n                            <Button\n                                component=\"a\"\n                                target=\"_blank\"\n                                variant=\"link\"\n                                icon={ <GithubIcon /> }\n                                iconPosition=\"right\"\n                                isInline\n                                href={ 'https://github.com/RedHatInsights/image-builder-frontend/tree/' + COMMITHASH }>\n                                    Contribute on GitHub\n                            </Button>\n                        </TextContent> }>\n                        <Button\n                            variant=\"plain\"\n                            aria-label=\"About image builder\"\n                            className=\"pf-u-pl-sm\">\n                            <HelpIcon />\n                        </Button>\n                    </Popover>\n                </PageHeader>\n                <section className=\"pf-l-page__main-section pf-c-page__main-section\">\n                    <ImagesTable />\n                </section>\n            </React.Fragment>\n        );\n    }\n}\n\nexport default LandingPage;\n","import React from 'react';\nimport { Button } from '@patternfly/react-core';\nimport { ExternalLinkAltIcon } from '@patternfly/react-icons';\n\nconst DocumentationButton = () => {\n    const documentationURL =\n'https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/8/html/uploading_a_customized_rhel_system_image_to_cloud_environments/index';\n\n    return (\n        <Button\n            component=\"a\"\n            target=\"_blank\"\n            variant=\"link\"\n            icon={ <ExternalLinkAltIcon /> }\n            iconPosition=\"right\"\n            isInline\n            href={ documentationURL }>Documentation</Button>\n    );\n};\n\nexport default DocumentationButton;\n","import axios from 'axios';\nimport {\n    IMAGE_BUILDER_API,\n    RHSM_API,\n} from './constants';\n\nconst postHeaders = { headers: { 'Content-Type': 'application/json' }};\n\nasync function composeImage(body) {\n    let path = '/compose';\n    const request = await axios.post(IMAGE_BUILDER_API.concat(path), body, postHeaders);\n    return request.data;\n}\n\nasync function getComposes(limit, offset) {\n    const params = new URLSearchParams({\n        limit,\n        offset,\n    });\n    let path = '/composes?' + params.toString();\n    const request = await axios.get(IMAGE_BUILDER_API.concat(path));\n    return request.data;\n}\n\nasync function getComposeStatus(id) {\n    let path = '/composes/' + id;\n    const request = await axios.get(IMAGE_BUILDER_API.concat(path));\n    return request.data;\n}\n\nasync function getPackages(distribution, architecture, search, limit) {\n    const params = new URLSearchParams({\n        distribution,\n        architecture,\n        search,\n    });\n    limit && params.append('limit', limit);\n    let path = '/packages?' + params.toString();\n    const request = await axios.get(IMAGE_BUILDER_API.concat(path));\n    return request.data;\n}\n\nasync function getVersion() {\n    let path = '/version';\n    const request = await axios.get(IMAGE_BUILDER_API.concat(path));\n    return request.data;\n}\n\nasync function getActivationKeys() {\n    const path = '/activation_keys';\n    const request = await axios.get(RHSM_API.concat(path));\n    return request.data.body;\n}\n\nexport default {\n    composeImage,\n    getComposes,\n    getComposeStatus,\n    getPackages,\n    getVersion,\n    getActivationKeys,\n};\n","export const IMAGE_BUILDER_API = '/api/image-builder/v1';\nexport const RHSM_API = '/api/rhsm/v2';\nexport const RHEL_8 = 'rhel-85';\n\nexport const UNIT_KIB = 1024 ** 1;\nexport const UNIT_MIB = 1024 ** 2;\nexport const UNIT_GIB = 1024 ** 3;\n","import api from '../../api';\nimport types from '../types';\n\nfunction composeUpdated(compose) {\n    return {\n        type: types.COMPOSE_UPDATED,\n        payload: { compose },\n    };\n}\n\nexport const composeFailed = (error) => ({\n    type: types.COMPOSE_FAILED,\n    payload: { error }\n});\n\nexport const composeAdded = (compose, insert) => ({\n    type: types.COMPOSE_ADDED,\n    payload: { compose, insert },\n});\n\nexport const composeStart = (composeRequest) => async dispatch => {\n    // response will be of the format {id: ''}\n    const request = api.composeImage(composeRequest);\n    return request.then(response => {\n        // add the compose id to the compose object to provide access to the id if iterating through\n        // composes and add an image status of 'pending' alongside the compose request.\n        const compose = Object.assign({}, response, { request: composeRequest },  { image_status: { status: 'pending' }});\n        dispatch(composeAdded(compose, true));\n    }).catch(err => {\n        if (err.response.status === 500) {\n            dispatch(composeFailed('Error: Something went wrong serverside'));\n        } else {\n            dispatch(composeFailed('Error: Something went wrong with the compose'));\n        }\n    });\n};\n\nexport const composeUpdatedStatus = (id, status) => ({\n    type: types.COMPOSE_UPDATED_STATUS,\n    payload: { id, status }\n});\n\nexport const composeGetStatus = (id) => async dispatch => {\n    const request = await api.getComposeStatus(id);\n    dispatch(composeUpdatedStatus(id, request.image_status));\n};\n\nexport const composesUpdatedCount = (count) => ({\n    type: types.COMPOSES_UPDATED_COUNT,\n    payload: { count }\n});\n\nexport const composesGet = (limit, offset) => async dispatch => {\n    const request = await api.getComposes(limit, offset);\n    request.data.map(compose => {\n        dispatch(composeAdded(compose, false));\n        dispatch(composeGetStatus(compose.id));\n    });\n    dispatch(composesUpdatedCount(request.meta.count));\n};\n\nfunction setRelease({ arch, distro }) {\n    return {\n        type: types.SET_RELEASE,\n        payload: {\n            arch,\n            distro,\n        }\n    };\n}\n\nfunction setUploadDestinations({ aws, azure, google }) {\n    return {\n        type: types.SET_UPLOAD_DESTINATIONS,\n        payload: {\n            aws,\n            azure,\n            google,\n        }\n    };\n}\n\nfunction setUploadAWS({ shareWithAccounts }) {\n    return {\n        type: types.SET_UPLOAD_AWS,\n        payload: {\n            shareWithAccounts,\n        }\n    };\n}\n\nfunction setUploadAzure({ tenantId, subscriptionId, resourceGroup }) {\n    return {\n        type: types.SET_UPLOAD_AZURE,\n        payload: {\n            tenantId,\n            subscriptionId,\n            resourceGroup,\n        }\n    };\n}\n\nfunction setUploadGoogle({ accountType, shareWithAccounts }) {\n    return {\n        type: types.SET_UPLOAD_GOOGLE,\n        payload: {\n            accountType,\n            shareWithAccounts,\n        }\n    };\n}\n\nfunction setSelectedPackages(selectedPackages) {\n    return {\n        type: types.SET_SELECTED_PACKAGES,\n        payload: selectedPackages\n    };\n}\n\nfunction setSubscription({ activationKey, insights, organization }) {\n    return {\n        type: types.SET_SUBSCRIPTION,\n        payload: {\n            activationKey,\n            insights,\n            organization,\n        }\n    };\n}\n\nfunction setSubscribeNow(subscribeNow) {\n    return {\n        type: types.SET_SUBSCRIBE_NOW,\n        payload: subscribeNow\n    };\n}\n\nexport default {\n    composesGet,\n    composeStart,\n    composeUpdated,\n    composeGetStatus,\n    setRelease,\n    setUploadDestinations,\n    setUploadAWS,\n    setUploadAzure,\n    setUploadGoogle,\n    setSelectedPackages,\n    setSubscription,\n    setSubscribeNow,\n};\n"],"names":["exports","name","height","width","svgPath","yOffset","xOffset","ImageBuildStatus","props","messages","success","icon","className","text","failure","pending","running","building","uploading","registering","status","map","message","key","Flex","propTypes","PropTypes","Release","releaseOptions","RHEL_8","release","Label","color","Target","target","targetOptions","aws","azure","gcp","vsphere","uploadType","imageType","ImageLink","uploadStatus","imageStatus","upload_status","undefined","type","url","options","region","ami","Button","component","variant","iconPosition","isInline","href","uploadOptions","tenant_id","subscription_id","resource_group","image_name","Popover","maxWidth","headerContent","bodyContent","TextContent","Text","TextVariants","project_id","share_with_accounts","split","ImagesTable","useState","page","setPage","perPage","setPerPage","composes","useSelector","state","dispatch","useDispatch","navigate","useNavigate","useEffect","composesGet","intervalId","setInterval","Object","entries","byId","id","compose","image_status","composeGetStatus","clearInterval","timestampToDisplayString","ts","date","slice","ms","Date","parse","Intl","DateTimeFormat","month","day","year","format","itemsStartInclusive","itemsEndExlcusive","rows","allIds","cells","request","created_at","title","distribution","image_requests","upload_request","image_type","actions","onClick","_event","_rowId","rowData","composeRequest","initialStep","length","EmptyState","EmptyStateVariant","EmptyStateIcon","PlusCircleIcon","Title","headingLevel","size","EmptyStateBody","Link","to","EmptyStateSecondaryActions","DocumentationButton","Toolbar","ToolbarContent","ToolbarItem","align","default","Pagination","itemCount","count","onSetPage","_","offset","onPerPageSelect","widgetId","isCompact","Table","TableHeader","TableBody","LandingPage","PageHeader","PageHeaderTitle","Component","postHeaders","headers","body","axios","IMAGE_BUILDER_API","data","limit","params","URLSearchParams","path","toString","architecture","search","append","RHSM_API","composeImage","getComposes","getComposeStatus","getPackages","getVersion","getActivationKeys","UNIT_KIB","UNIT_MIB","UNIT_GIB","composeAdded","insert","types","payload","composeUpdatedStatus","api","meta"],"sourceRoot":""}