{"version":3,"sources":["webpack:///./src/Components/ImagesTable/ImageBuildStatus.scss","webpack:///./src/Components/LandingPage/LandingPage.scss","webpack:///./src/Components/ImagesTable/ImageBuildStatus.scss?169d","webpack:///./src/Components/LandingPage/LandingPage.scss?6e84","webpack:///./src/Components/ImagesTable/ImageBuildStatus.js","webpack:///./src/Components/ImagesTable/Release.js","webpack:///./src/Components/ImagesTable/Upload.js","webpack:///./src/Components/ImagesTable/ImagesTable.js","webpack:///./src/Components/LandingPage/LandingPage.js"],"names":["exports","___CSS_LOADER_API_IMPORT___","push","module","i","content","options","transform","undefined","update","locals","hot","accept","newContent","a","b","key","idx","Error","dispose","ImageBuildStatus","props","messages","success","icon","className","text","failure","pending","running","Spinner","size","building","uploading","registering","Fragment","status","map","message","Flex","propTypes","PropTypes","string","Release","releaseOptions","release","Label","color","Upload","uploadOptions","aws","azure","gcp","uploadType","ImagesTable","state","columns","title","columnTransforms","classNames","Visibility","hiddenOnXs","hiddenOnSm","hiddenOnMd","visibleOnLg","pollComposeStatuses","bind","this","composeGetAll","interval","setInterval","clearInterval","composes","Object","entries","byId","id","compose","image_status","composeGetStatus","rows","cells","request","image_requests","image_type","distribution","allIds","length","EmptyState","variant","EmptyStateVariant","large","data-testid","EmptyStateIcon","PlusCircleIcon","Title","headingLevel","EmptyStateBody","to","EmptyStateSecondaryActions","Button","component","target","iconPosition","isInline","href","ToolbarGroup","ToolbarItem","Table","aria-label","Component","object","func","connect","dispatch","actions","LandingPage","Popover","headerContent","bodyContent","TextContent","Text","type","withRouter"],"mappings":"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","file":"js/7.fc63f06f9abfbf389fa6.js","sourcesContent":["// Imports\nvar ___CSS_LOADER_API_IMPORT___ = require(\"../../../node_modules/css-loader/dist/runtime/api.js\");\nexports = ___CSS_LOADER_API_IMPORT___(false);\n// Module\nexports.push([module.id, \".error{color:var(--pf-global--danger-color--100)}.success{color:var(--pf-global--success-color--100)}\\n\", \"\"]);\n// Exports\nmodule.exports = exports;\n","// Imports\nvar ___CSS_LOADER_API_IMPORT___ = require(\"../../../node_modules/css-loader/dist/runtime/api.js\");\nexports = ___CSS_LOADER_API_IMPORT___(false);\n// Module\nexports.push([module.id, \".title{display:inline}.pf-c-form__group-label-help{color:var(--pf-global--icon--Color--light)}.pf-c-form__group-label-help:active{color:var(--pf-global--icon--Color--dark)}\\n\", \"\"]);\n// Exports\nmodule.exports = exports;\n","\nvar content = require(\"!!../../../node_modules/css-loader/dist/cjs.js!../../../node_modules/sass-loader/dist/cjs.js!./ImageBuildStatus.scss\");\n\nif(typeof content === 'string') content = [[module.id, content, '']];\n\nvar transform;\nvar insertInto;\n\n\n\nvar options = {\"hmr\":true}\n\noptions.transform = transform\noptions.insertInto = undefined;\n\nvar update = require(\"!../../../node_modules/style-loader/lib/addStyles.js\")(content, options);\n\nif(content.locals) module.exports = content.locals;\n\nif(module.hot) {\n\tmodule.hot.accept(\"!!../../../node_modules/css-loader/dist/cjs.js!../../../node_modules/sass-loader/dist/cjs.js!./ImageBuildStatus.scss\", function() {\n\t\tvar newContent = require(\"!!../../../node_modules/css-loader/dist/cjs.js!../../../node_modules/sass-loader/dist/cjs.js!./ImageBuildStatus.scss\");\n\n\t\tif(typeof newContent === 'string') newContent = [[module.id, newContent, '']];\n\n\t\tvar locals = (function(a, b) {\n\t\t\tvar key, idx = 0;\n\n\t\t\tfor(key in a) {\n\t\t\t\tif(!b || a[key] !== b[key]) return false;\n\t\t\t\tidx++;\n\t\t\t}\n\n\t\t\tfor(key in b) idx--;\n\n\t\t\treturn idx === 0;\n\t\t}(content.locals, newContent.locals));\n\n\t\tif(!locals) throw new Error('Aborting CSS HMR due to changed css-modules locals.');\n\n\t\tupdate(newContent);\n\t});\n\n\tmodule.hot.dispose(function() { update(); });\n}","\nvar content = require(\"!!../../../node_modules/css-loader/dist/cjs.js!../../../node_modules/sass-loader/dist/cjs.js!./LandingPage.scss\");\n\nif(typeof content === 'string') content = [[module.id, content, '']];\n\nvar transform;\nvar insertInto;\n\n\n\nvar options = {\"hmr\":true}\n\noptions.transform = transform\noptions.insertInto = undefined;\n\nvar update = require(\"!../../../node_modules/style-loader/lib/addStyles.js\")(content, options);\n\nif(content.locals) module.exports = content.locals;\n\nif(module.hot) {\n\tmodule.hot.accept(\"!!../../../node_modules/css-loader/dist/cjs.js!../../../node_modules/sass-loader/dist/cjs.js!./LandingPage.scss\", function() {\n\t\tvar newContent = require(\"!!../../../node_modules/css-loader/dist/cjs.js!../../../node_modules/sass-loader/dist/cjs.js!./LandingPage.scss\");\n\n\t\tif(typeof newContent === 'string') newContent = [[module.id, newContent, '']];\n\n\t\tvar locals = (function(a, b) {\n\t\t\tvar key, idx = 0;\n\n\t\t\tfor(key in a) {\n\t\t\t\tif(!b || a[key] !== b[key]) return false;\n\t\t\t\tidx++;\n\t\t\t}\n\n\t\t\tfor(key in b) idx--;\n\n\t\t\treturn idx === 0;\n\t\t}(content.locals, newContent.locals));\n\n\t\tif(!locals) throw new Error('Aborting CSS HMR due to changed css-modules locals.');\n\n\t\tupdate(newContent);\n\t});\n\n\tmodule.hot.dispose(function() { update(); });\n}","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport { Flex, Spinner } from '@patternfly/react-core';\nimport { CheckCircleIcon, PendingIcon, ExclamationCircleIcon } from '@patternfly/react-icons';\n\nimport './ImageBuildStatus.scss';\n\nconst ImageBuildStatus = (props) => {\n    const messages = {\n        success: [\n            {\n                icon: <CheckCircleIcon className=\"success\" />,\n                text: 'Ready'\n            }\n        ],\n        failure: [\n            {\n                icon: <ExclamationCircleIcon className=\"error\" />,\n                text: 'Image build failed'\n            }\n        ],\n        pending: [\n            {\n                icon: <PendingIcon />,\n                text: 'Image build, Upload, Cloud registration pending'\n            }\n        ],\n        // Keep \"running\" for backward compatibility\n        running: [\n            {\n                icon: <Spinner size=\"md\" />,\n                text: 'Image build in progress'\n            },\n            {\n                icon: <PendingIcon />,\n                text: 'Upload, Cloud registration pending'\n            }\n        ],\n        building: [\n            {\n                icon: <Spinner size=\"md\" />,\n                text: 'Image build in progress'\n            },\n            {\n                icon: <PendingIcon />,\n                text: 'Upload, Cloud registration pending'\n            }\n        ],\n        uploading: [\n            {\n                icon: <CheckCircleIcon />,\n                text: 'Image build finished'\n            },\n            {\n                icon: <Spinner size=\"md\" />,\n                text: 'Image upload in progress'\n            },\n            {\n                icon: <PendingIcon />,\n                text: 'Cloud registration pending'\n            }\n        ],\n        registering: [\n            {\n                icon: <CheckCircleIcon />,\n                text: 'Image build finished'\n            },\n            {\n                icon: <CheckCircleIcon />,\n                text: 'Image upload finished'\n            },\n            {\n                icon: <Spinner size=\"md\" />,\n                text: 'Cloud registration in progress'\n            }\n        ]\n    };\n    return (\n        <React.Fragment>\n            {messages[props.status] &&\n                messages[props.status].map((message, key) => (\n                    <Flex key={ key } className=\"pf-u-align-items-baseline pf-m-nowrap\">\n                        <div>{message.icon}</div>\n                        <small>{message.text}</small>\n                    </Flex>\n                ))\n            }\n        </React.Fragment>\n    );\n};\n\nImageBuildStatus.propTypes = {\n    status: PropTypes.string,\n};\n\nexport default ImageBuildStatus;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport { Label } from '@patternfly/react-core';\n\nconst Release = (props) => {\n    const releaseOptions = {\n        'rhel-8': 'RHEL 8.3',\n        'centos-8': 'CentOS Stream 8'\n    };\n    const release = releaseOptions[props.release] ? releaseOptions[props.release] : props.release;\n    return <Label color='blue'>{release}</Label>;\n};\n\nRelease.propTypes = {\n    release: PropTypes.string,\n};\n\nexport default Release;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst Upload = (props) => {\n    const uploadOptions = {\n        aws: 'Amazon Web Services',\n        azure: 'Microsoft Azure',\n        gcp: 'Google Cloud Platform',\n    };\n    return <>{ uploadOptions[props.uploadType] ? uploadOptions[props.uploadType] : props.uploadType }</>;\n};\n\nUpload.propTypes = {\n    uploadType: PropTypes.string,\n};\n\nexport default Upload;\n","import PropTypes from 'prop-types';\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { actions } from '../../store/actions';\nimport { Link } from 'react-router-dom';\nimport { Table, TableHeader, TableBody, classNames, Visibility } from '@patternfly/react-table';\nimport { TableToolbar } from '@redhat-cloud-services/frontend-components';\nimport { Button,\n    ToolbarGroup, ToolbarItem,\n    EmptyState, EmptyStateVariant, EmptyStateIcon, EmptyStateBody, EmptyStateSecondaryActions,\n    Title } from '@patternfly/react-core';\nimport { ExternalLinkAltIcon, PlusCircleIcon } from '@patternfly/react-icons';\n\nimport ImageBuildStatus from './ImageBuildStatus';\nimport Release from './Release';\nimport Upload from './Upload';\nclass ImagesTable extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            columns: [\n                {\n                    title: 'Image'\n                },\n                'Target',\n                'Release',\n                'Status',\n                {\n                    title: '',\n                    props: { className: 'pf-u-text-align-right' },\n                    columnTransforms: [\n                        classNames(\n                            Visibility.hiddenOnXs,\n                            Visibility.hiddenOnSm,\n                            Visibility.hiddenOnMd,\n                            Visibility.visibleOnLg\n                        )\n                    ]\n                }\n            ]\n        };\n        this.pollComposeStatuses = this.pollComposeStatuses.bind(this);\n    }\n\n    componentDidMount() {\n        this.props.composeGetAll();\n        this.interval = setInterval(() => this.pollComposeStatuses(), 8000);\n    }\n\n    componentWillUnmount() {\n        clearInterval(this.interval);\n    }\n\n    pollComposeStatuses() {\n        let { composes } = this.props;\n        Object.entries(composes.byId).map(([ id, compose ]) => {\n            /* Skip composes that have been complete */\n            if (compose.image_status.status === 'success' || compose.image_status.status === 'failure') {\n                return;\n            }\n\n            this.props.composeGetStatus(id);\n        });\n    }\n\n    render() {\n        let { composes } = this.props;\n        const rows = Object.entries(composes.byId).map(([ id, compose ]) => {\n            return {\n                cells: [\n                    id,\n                    { title: <Upload uploadType={ compose.request.image_requests[0].image_type } /> },\n                    { title: <Release release={ compose.request.distribution } /> },\n                    { title: <ImageBuildStatus status={ compose.image_status ? compose.image_status.status : '' } /> },\n                    ''\n                ]\n            };\n        });\n        return (\n            <React.Fragment>\n                { composes.allIds.length === 0 && (\n                    <EmptyState variant={ EmptyStateVariant.large } data-testid=\"empty-state\">\n                        <EmptyStateIcon icon={ PlusCircleIcon } />\n                        <Title headingLevel=\"h4\" size=\"lg\">\n                            Create an image\n                        </Title>\n                        <EmptyStateBody>\n                            Create OS images for deployment in Amazon Web Services,\n                            Microsoft Azure and Google Cloud Platform. Images can\n                            include a custom package set and an activation key to\n                            automate the registration process.\n                        </EmptyStateBody>\n                        <Link to=\"/imagewizard\" className=\"pf-c-button pf-m-primary\" data-testid=\"create-image-action\">\n                        Create image\n                        </Link>\n                        <EmptyStateSecondaryActions>\n                            <Button\n                                component=\"a\"\n                                target=\"_blank\"\n                                variant=\"link\"\n                                icon={ <ExternalLinkAltIcon /> }\n                                iconPosition=\"right\"\n                                isInline\n                                href=\"https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/8-beta/\">\n                                    Documentation\n                            </Button>\n                        </EmptyStateSecondaryActions>\n                    </EmptyState>\n                ) || (\n                    <React.Fragment>\n                        <TableToolbar>\n                            <ToolbarGroup>\n                                <ToolbarItem>\n                                    <Link to=\"/imagewizard\" className=\"pf-c-button pf-m-primary\" data-testid=\"create-image-action\">\n                                        Create image\n                                    </Link>\n                                </ToolbarItem>\n                            </ToolbarGroup>\n                        </TableToolbar>\n                        <Table\n                            aria-label=\"Images\"\n                            rows={ rows }\n                            cells={ this.state.columns }\n                            data-testid=\"images-table\">\n                            <TableHeader />\n                            <TableBody />\n                        </Table>\n                    </React.Fragment>\n                )}\n            </React.Fragment>\n        );\n    }\n}\n\nfunction mapStateToProps(state) {\n    return {\n        composes: state.composes,\n    };\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        composeGetAll: () => dispatch(actions.composeGetAll()),\n        composeGetStatus: (id) => dispatch(actions.composeGetStatus(id)),\n    };\n}\n\nImagesTable.propTypes = {\n    composes: PropTypes.object,\n    composeGetAll: PropTypes.func,\n    composeGetStatus: PropTypes.func,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ImagesTable);\n","import React, { Component } from 'react';\nimport { withRouter } from 'react-router-dom';\n\nimport { PageHeader, PageHeaderTitle } from '@redhat-cloud-services/frontend-components';\n\nimport { Button, Popover, TextContent, Text } from '@patternfly/react-core';\nimport { ExternalLinkAltIcon, HelpIcon } from '@patternfly/react-icons';\n\nimport ImagesTable from '../ImagesTable/ImagesTable';\nimport './LandingPage.scss';\n\nclass LandingPage extends Component {\n    constructor(props) {\n        super(props);\n    }\n\n    render() {\n        return (\n            <React.Fragment>\n                <PageHeader>\n                    <PageHeaderTitle className=\"title\" title=\"Image Builder\" />\n                    <Popover\n                        headerContent={ 'About Image Builder' }\n                        bodyContent={ <TextContent>\n                            <Text>\n                                        Image Builder is a service that allows you to create RHEL images\n                                        and push them to cloud environments.\n                            </Text>\n                            <Button\n                                component=\"a\"\n                                target=\"_blank\"\n                                variant=\"link\"\n                                icon={ <ExternalLinkAltIcon /> }\n                                iconPosition=\"right\"\n                                isInline\n                                href=\"https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/8-beta/\">\n                                    Documentation\n                            </Button>\n                        </TextContent> }>\n                        <button\n                            type=\"button\"\n                            aria-label=\"About image builder\"\n                            className=\"pf-c-form__group-label-help\">\n                            <HelpIcon />\n                        </button>\n                    </Popover>\n                </PageHeader>\n                <section className=\"pf-l-page__main-section pf-c-page__main-section\">\n                    <ImagesTable />\n                </section>\n            </React.Fragment>\n        );\n    }\n}\n\nexport default withRouter(LandingPage);\n"],"sourceRoot":""}