{"version":3,"file":"js/710.47a6f4668c6f1678915f.js","mappings":"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","sources":["webpack:///./node_modules/@patternfly/react-icons/dist/js/icons/arrow-right-icon.js","webpack:///./node_modules/@patternfly/react-icons/dist/js/icons/check-circle-icon.js","webpack:///./node_modules/@patternfly/react-icons/dist/js/icons/copy-icon.js","webpack:///./node_modules/@patternfly/react-icons/dist/js/icons/exclamation-triangle-icon.js","webpack:///./node_modules/@patternfly/react-icons/dist/js/icons/external-link-alt-icon.js","webpack:///./node_modules/@patternfly/react-icons/dist/js/icons/in-progress-icon.js","webpack:///./node_modules/@patternfly/react-icons/dist/js/icons/off-icon.js","webpack:///./node_modules/@patternfly/react-icons/dist/js/icons/pending-icon.js","webpack:///./node_modules/@patternfly/react-icons/dist/js/icons/plus-circle-icon.js","webpack:///./src/Components/ImagesTable/ImageBuildErrorDetails.js","webpack:///./src/Utilities/time.js","webpack:///./src/Components/ImagesTable/ImageBuildStatus.js","webpack:///./src/Components/ImagesTable/ClonesTable.js","webpack:///./src/Components/ImagesTable/ImageDetails.js","webpack:///./src/Components/sharedComponents/BetaLabel.js","webpack:///./src/Components/ImagesTable/RegionsPopover.js","webpack:///./src/Components/ImagesTable/ImageLinkDirect.js","webpack:///./src/Components/ImagesTable/ImageLink.js","webpack:///./src/Components/ImagesTable/Release.js","webpack:///./src/Components/ImagesTable/Target.js","webpack:///./src/store/actions/actions.js","webpack:///./src/Components/ImagesTable/ImagesTable.js","webpack:///./src/Components/LandingPage/LandingPage.js","webpack:///./src/Components/sharedComponents/DocumentationButton.js","webpack:///./src/Utilities/useGetEnvironment.js"],"sourcesContent":["\"use strict\"\nexports.__esModule = true;\nexports.ArrowRightIconConfig = {\n  name: 'ArrowRightIcon',\n  height: 512,\n  width: 448,\n  svgPath: 'M190.5 66.9l22.2-22.2c9.4-9.4 24.6-9.4 33.9 0L441 239c9.4 9.4 9.4 24.6 0 33.9L246.6 467.3c-9.4 9.4-24.6 9.4-33.9 0l-22.2-22.2c-9.5-9.5-9.3-25 .4-34.3L311.4 296H24c-13.3 0-24-10.7-24-24v-32c0-13.3 10.7-24 24-24h287.4L190.9 101.2c-9.8-9.3-10-24.8-.4-34.3z',\n  yOffset: 0,\n  xOffset: 0,\n};\nexports.ArrowRightIcon = require('../createIcon').createIcon(exports.ArrowRightIconConfig);\nexports[\"default\"] = exports.ArrowRightIcon;","\"use strict\"\nexports.__esModule = true;\nexports.CheckCircleIconConfig = {\n  name: 'CheckCircleIcon',\n  height: 512,\n  width: 512,\n  svgPath: 'M504 256c0 136.967-111.033 248-248 248S8 392.967 8 256 119.033 8 256 8s248 111.033 248 248zM227.314 387.314l184-184c6.248-6.248 6.248-16.379 0-22.627l-22.627-22.627c-6.248-6.249-16.379-6.249-22.628 0L216 308.118l-70.059-70.059c-6.248-6.248-16.379-6.248-22.628 0l-22.627 22.627c-6.248 6.248-6.248 16.379 0 22.627l104 104c6.249 6.249 16.379 6.249 22.628.001z',\n  yOffset: 0,\n  xOffset: 0,\n};\nexports.CheckCircleIcon = require('../createIcon').createIcon(exports.CheckCircleIconConfig);\nexports[\"default\"] = exports.CheckCircleIcon;","\"use strict\"\nexports.__esModule = true;\nexports.CopyIconConfig = {\n  name: 'CopyIcon',\n  height: 512,\n  width: 448,\n  svgPath: 'M320 448v40c0 13.255-10.745 24-24 24H24c-13.255 0-24-10.745-24-24V120c0-13.255 10.745-24 24-24h72v296c0 30.879 25.121 56 56 56h168zm0-344V0H152c-13.255 0-24 10.745-24 24v368c0 13.255 10.745 24 24 24h272c13.255 0 24-10.745 24-24V128H344c-13.2 0-24-10.8-24-24zm120.971-31.029L375.029 7.029A24 24 0 0 0 358.059 0H352v96h96v-6.059a24 24 0 0 0-7.029-16.97z',\n  yOffset: 0,\n  xOffset: 0,\n};\nexports.CopyIcon = require('../createIcon').createIcon(exports.CopyIconConfig);\nexports[\"default\"] = exports.CopyIcon;","\"use strict\"\nexports.__esModule = true;\nexports.ExclamationTriangleIconConfig = {\n  name: 'ExclamationTriangleIcon',\n  height: 512,\n  width: 576,\n  svgPath: 'M569.517 440.013C587.975 472.007 564.806 512 527.94 512H48.054c-36.937 0-59.999-40.055-41.577-71.987L246.423 23.985c18.467-32.009 64.72-31.951 83.154 0l239.94 416.028zM288 354c-25.405 0-46 20.595-46 46s20.595 46 46 46 46-20.595 46-46-20.595-46-46-46zm-43.673-165.346l7.418 136c.347 6.364 5.609 11.346 11.982 11.346h48.546c6.373 0 11.635-4.982 11.982-11.346l7.418-136c.375-6.874-5.098-12.654-11.982-12.654h-63.383c-6.884 0-12.356 5.78-11.981 12.654z',\n  yOffset: 0,\n  xOffset: 0,\n};\nexports.ExclamationTriangleIcon = require('../createIcon').createIcon(exports.ExclamationTriangleIconConfig);\nexports[\"default\"] = exports.ExclamationTriangleIcon;","\"use strict\"\nexports.__esModule = true;\nexports.ExternalLinkAltIconConfig = {\n  name: 'ExternalLinkAltIcon',\n  height: 512,\n  width: 512,\n  svgPath: 'M432,320H400a16,16,0,0,0-16,16V448H64V128H208a16,16,0,0,0,16-16V80a16,16,0,0,0-16-16H48A48,48,0,0,0,0,112V464a48,48,0,0,0,48,48H400a48,48,0,0,0,48-48V336A16,16,0,0,0,432,320ZM488,0h-128c-21.37,0-32.05,25.91-17,41l35.73,35.73L135,320.37a24,24,0,0,0,0,34L157.67,377a24,24,0,0,0,34,0L435.28,133.32,471,169c15,15,41,4.5,41-17V24A24,24,0,0,0,488,0Z',\n  yOffset: 0,\n  xOffset: 0,\n};\nexports.ExternalLinkAltIcon = require('../createIcon').createIcon(exports.ExternalLinkAltIconConfig);\nexports[\"default\"] = exports.ExternalLinkAltIcon;","\"use strict\"\nexports.__esModule = true;\nexports.InProgressIconConfig = {\n  name: 'InProgressIcon',\n  height: 1024,\n  width: 1024,\n  svgPath: 'M513.417211,16.013668 L513.417211,112.013668 C513.406007,120.539653 520.082422,127.576718 528.597211,128.013668 C732.697211,136.513668 896.147211,305.013668 896.147211,511.343668 C896.147211,723.013668 724.007211,895.163668 512.417211,895.163668 C437.186239,895.277345 363.602574,873.135095 300.927211,831.523668 C294.58293,827.2982 286.138663,828.135095 280.747211,833.523668 L211.807211,902.353668 C208.502935,905.676185 206.82123,910.280199 207.20607,914.950237 C207.590911,919.620275 210.00361,923.886884 213.807211,926.623668 C300.709573,989.398037 405.213535,1023.13146 512.417211,1023.01398 C794.537211,1023.01398 1023.91724,793.433668 1023.91724,511.413668 C1024.00721,235.103668 804.007211,9.22366802 529.897211,0.00645736761 C525.571205,-0.116171039 521.377128,1.51204372 518.271915,4.52681369 C515.166702,7.54158367 513.415263,11.6857144 513.417211,16.013668 M97.1272107,212.923668 C64.2190689,258.479443 39.0698895,309.162997 22.6972107,362.923668 C21.2705092,367.756559 22.2039184,372.979173 25.2163356,377.018685 C28.2287528,381.058197 32.9681443,383.442545 38.0072107,383.453683 L139.407211,383.453683 C145.970195,383.46249 151.873012,379.462528 154.297211,373.363668 C164.307669,347.593304 177.068112,322.977652 192.357211,299.943668 C196.579666,293.633658 195.741339,285.216847 190.357211,279.863668 L121.497211,211.013668 C118.186635,207.662531 113.567544,205.940538 108.871166,206.30669 C104.174788,206.672841 99.8783994,209.089927 97.1272107,212.913668 M112.907211,511.433663 L17.0072107,511.433663 C12.679257,511.433663 8.5351263,513.183159 5.52035633,516.288373 C2.50558635,519.393586 0.877371594,523.587662 1.00721065,527.913668 C4.13104542,629.408217 37.6085847,727.635936 97.1172107,809.913668 C99.8539943,813.717268 104.120603,816.129968 108.790642,816.514809 C113.46068,816.899649 118.064693,815.217944 121.387211,811.913668 L190.217211,743.073668 C195.605784,737.682216 196.442679,729.237949 192.217211,722.893668 C153.520825,664.580171 131.611534,596.745437 128.887211,526.813668 C128.553964,518.220138 121.487197,511.427209 112.887211,511.433663',\n  yOffset: 0,\n  xOffset: 0,\n};\nexports.InProgressIcon = require('../createIcon').createIcon(exports.InProgressIconConfig);\nexports[\"default\"] = exports.InProgressIcon;","\"use strict\"\nexports.__esModule = true;\nexports.OffIconConfig = {\n  name: 'OffIcon',\n  height: 1024,\n  width: 1024,\n  svgPath: 'M512,288 C476.710699,288.137047 448.137047,316.710699 448,352 L448,672 C448,707.346224 476.653776,736 512,736 C547.346224,736 576,707.346224 576,672 L576,352 C575.862953,316.710699 547.289301,288.137047 512,288 M512,896 C299.9,896 128,724.1 128,512 C128,299.9 299.9,128 512,128 C724.1,128 896,299.9 896,512 C896,724.1 724.1,896 512,896 M512,0 C229.2,0 0,229.2 0,512 C0,794.8 229.2,1024 512,1024 C794.8,1024 1024,794.8 1024,512 C1024,229.2 794.8,0 512,0',\n  yOffset: 0,\n  xOffset: 0,\n};\nexports.OffIcon = require('../createIcon').createIcon(exports.OffIconConfig);\nexports[\"default\"] = exports.OffIcon;","\"use strict\"\nexports.__esModule = true;\nexports.PendingIconConfig = {\n  name: 'PendingIcon',\n  height: 1024,\n  width: 1024,\n  svgPath: 'M512.1,895.9 C300.3,895.9 128.1,723.8 128.1,511.9 C128.1,300.2 300.3,127.9 512.1,127.9 C723.8,127.9 896,300.2 896.1,511.9 C896.1,723.7 723.8,895.9 512.1,895.9 M512.1,0 C229.7,0 0,229.7 0,512 C0,794.3 229.7,1024 512.1,1024 C794.3,1024 1024,794.3 1024,512 C1024,229.7 794.3,0 512.1,0 M704,288 L704,272 C704,263.2 696.8,256 688,256 L336,256 C327.2,256 320,263.2 320,272 L320,288 C320,447 480,449 480,512 C480,575 320,575 320,736 L320,752 C320,760.8 327.2,768 336,768 L688,768 C696.8,768 704,760.8 704,752 L704,736 C704,576 544,577 544,512 C544,447 704,448 704,288 M603.9,704 L420.3,704 C417.3,704 418.2,695 419.4,686.8 C426.8,634.5 480.1,617.4 495.2,612.3 C512.3,606.6 512.3,606.6 528.9,612.3 C544,617.6 597.6,635.4 604.8,687 C605.9,695.2 606.9,704 603.9,704',\n  yOffset: 0,\n  xOffset: 0,\n};\nexports.PendingIcon = require('../createIcon').createIcon(exports.PendingIconConfig);\nexports[\"default\"] = exports.PendingIcon;","\"use strict\"\nexports.__esModule = true;\nexports.PlusCircleIconConfig = {\n  name: 'PlusCircleIcon',\n  height: 512,\n  width: 512,\n  svgPath: 'M256 8C119 8 8 119 8 256s111 248 248 248 248-111 248-248S393 8 256 8zm144 276c0 6.6-5.4 12-12 12h-92v92c0 6.6-5.4 12-12 12h-56c-6.6 0-12-5.4-12-12v-92h-92c-6.6 0-12-5.4-12-12v-56c0-6.6 5.4-12 12-12h92v-92c0-6.6 5.4-12 12-12h56c6.6 0 12 5.4 12 12v92h92c6.6 0 12 5.4 12 12v56z',\n  yOffset: 0,\n  xOffset: 0,\n};\nexports.PlusCircleIcon = require('../createIcon').createIcon(exports.PlusCircleIconConfig);\nexports[\"default\"] = exports.PlusCircleIcon;","import React from 'react';\n\nimport { Button } from '@patternfly/react-core';\nimport { CopyIcon } from '@patternfly/react-icons';\nimport PropTypes from 'prop-types';\n\nconst useGetErrorReason = (err) => {\n  if (!err?.reason) {\n    return 'An unknown error occured';\n  }\n\n  if (err.details?.reason) {\n    return err.details.reason;\n  }\n\n  return err.reason;\n};\n\nconst ErrorDetails = ({ status }) => {\n  if (!status || status.status !== 'failure') {\n    return <></>;\n  }\n\n  const reason = useGetErrorReason(status.error);\n\n  return (\n    <div className=\"pf-u-mt-sm\">\n      <p>{reason}</p>\n      <Button\n        variant=\"link\"\n        onClick={() => navigator.clipboard.writeText(reason)}\n        className=\"pf-u-pl-0 pf-u-mt-md\"\n      >\n        Copy error text to clipboard <CopyIcon />\n      </Button>\n    </div>\n  );\n};\n\nErrorDetails.propTypes = {\n  status: PropTypes.object,\n};\n\nexport default ErrorDetails;\n","export const timestampToDisplayString = (ts) => {\n  // timestamp has format 2021-04-27 12:31:12.794809 +0000 UTC\n  // must be converted to ms timestamp and then reformatted to Apr 27, 2021\n  if (!ts) {\n    return '';\n  }\n\n  // get YYYY-MM-DD format\n  const date = ts.slice(0, 10);\n  const ms = Date.parse(date);\n  const options = { month: 'short', day: 'numeric', year: 'numeric' };\n  const tsDisplay = new Intl.DateTimeFormat('en-US', options).format(ms);\n  return tsDisplay;\n};\n\nexport const convertStringToDate = (createdAtAsString) => {\n  if (isNaN(Date.parse(createdAtAsString))) {\n    // converts property created_at of the image object from string to UTC\n    const [dateValues, timeValues] = createdAtAsString.split(' ');\n    const datetimeString = `${dateValues}T${timeValues}Z`;\n    return Date.parse(datetimeString);\n  } else {\n    return Date.parse(createdAtAsString);\n  }\n};\n\nexport const hoursToExpiration = (imageCreatedAt) => {\n  if (imageCreatedAt) {\n    const currentTime = Date.now();\n    // miliseconds in hour - needed for calculating the difference\n    // between current date and the date of the image creation\n    const msInHour = 1000 * 60 * 60;\n    const timeUntilExpiration = Math.floor(\n      (currentTime - convertStringToDate(imageCreatedAt)) / msInHour\n    );\n    return timeUntilExpiration;\n  } else {\n    // when creating a new image, the compose.created_at can be undefined when first queued\n    return 0;\n  }\n};\n","import React from 'react';\n\nimport {\n  Alert,\n  Button,\n  Flex,\n  Panel,\n  PanelMain,\n  Popover,\n} from '@patternfly/react-core';\nimport {\n  CheckCircleIcon,\n  ExclamationCircleIcon,\n  ExclamationTriangleIcon,\n  InProgressIcon,\n  OffIcon,\n  PendingIcon,\n} from '@patternfly/react-icons';\nimport PropTypes from 'prop-types';\nimport './ImageBuildStatus.scss';\nimport { useSelector } from 'react-redux';\n\nimport ErrorDetails from './ImageBuildErrorDetails';\n\nimport { AWS_S3_EXPIRATION_TIME_IN_HOURS } from '../../constants';\nimport {\n  selectImageById,\n  selectImageStatusesById,\n} from '../../store/composesSlice';\nimport { hoursToExpiration } from '../../Utilities/time';\n\nexport const ImageBuildStatus = ({\n  imageId,\n  isImagesTableRow,\n  imageStatus,\n  imageRegion,\n}) => {\n  const image = useSelector((state) => selectImageById(state, imageId));\n\n  const remainingHours =\n    AWS_S3_EXPIRATION_TIME_IN_HOURS - hoursToExpiration(image.created_at);\n\n  const cloneErrorMessage = () => {\n    let region = '';\n    hasFailedClone.includes(image.id)\n      ? (region = 'one or more regions')\n      : (region = imageRegion);\n    return {\n      error: {\n        reason: `Failed to share image to ${region}.`,\n      },\n      status: 'failure',\n    };\n  };\n\n  // Messages appear in order of priority\n  const messages = {\n    failure: [\n      {\n        icon: <ExclamationCircleIcon className=\"error\" />,\n        text: 'Image build failed',\n        priority: 6,\n      },\n    ],\n    pending: [\n      {\n        icon: <PendingIcon />,\n        text: 'Image build is pending',\n        priority: 2,\n      },\n    ],\n    // Keep \"running\" for backward compatibility\n    running: [\n      {\n        icon: <InProgressIcon className=\"pending\" />,\n        text: 'Image build in progress',\n        priority: 1,\n      },\n    ],\n    building: [\n      {\n        icon: <InProgressIcon className=\"pending\" />,\n        text: 'Image build in progress',\n        priority: 3,\n      },\n    ],\n    uploading: [\n      {\n        icon: <InProgressIcon className=\"pending\" />,\n        text: 'Image upload in progress',\n        priority: 4,\n      },\n    ],\n    registering: [\n      {\n        icon: <InProgressIcon className=\"pending\" />,\n        text: 'Cloud registration in progress',\n        priority: 5,\n      },\n    ],\n    success: [\n      {\n        icon: <CheckCircleIcon className=\"success\" />,\n        text: 'Ready',\n        priority: 0,\n      },\n    ],\n    expiring: [\n      {\n        icon: <ExclamationTriangleIcon className=\"expiring\" />,\n        text: `Expires in ${remainingHours} ${\n          remainingHours > 1 ? 'hours' : 'hour'\n        }`,\n      },\n    ],\n    expired: [\n      {\n        icon: <OffIcon />,\n        text: 'Expired',\n      },\n    ],\n  };\n\n  const hasFailedClone = [];\n  let status;\n  if (\n    isImagesTableRow &&\n    (image.imageType === 'aws' || image.imageType === 'ami')\n  ) {\n    // The ImageBuildStatus component is used by both the images table and the clones table.\n    // For 'aws' and 'ami' image rows in the images table, the highest priority status for\n    // *all* images (the parent image and its clones) should be displayed as the status.\n    // For instance, the parent and several of its clones may have a success status. But if a single\n    // clone has a failure status, then the status displayed in the images table row should be\n    // failure.\n    const imageStatuses = useSelector((state) =>\n      selectImageStatusesById(state, image.id)\n    );\n    if (imageStatuses.includes('failure')) {\n      hasFailedClone.push(image.id);\n    }\n    const filteredImageStatuses = imageStatuses.filter(\n      (imageStatus) => imageStatus !== undefined\n    );\n    if (filteredImageStatuses.length === 0) {\n      status = image.status;\n    } else {\n      status = filteredImageStatuses.reduce((prev, current) => {\n        return messages[prev][0].priority > messages[current][0].priority\n          ? prev\n          : current;\n      });\n    }\n  } else if (image.uploadType === 'aws.s3' && image.status === 'success') {\n    // Cloud API currently reports expired images status as 'success'\n    status =\n      hoursToExpiration(image.created_at) >= AWS_S3_EXPIRATION_TIME_IN_HOURS\n        ? 'expired'\n        : 'expiring';\n  } else {\n    status = image.status;\n  }\n\n  return (\n    <React.Fragment>\n      {messages[status] &&\n        messages[status].map((message, key) => (\n          <Flex key={key} className=\"pf-u-align-items-baseline pf-m-nowrap\">\n            <div className=\"pf-u-mr-sm\">{message.icon}</div>\n            {status === 'failure' ? (\n              <Popover\n                position=\"bottom\"\n                minWidth=\"30rem\"\n                bodyContent={\n                  <>\n                    <Alert\n                      variant=\"danger\"\n                      title=\"Image build failed\"\n                      isInline\n                      isPlain\n                    />\n                    <Panel isScrollable>\n                      <PanelMain maxHeight=\"25rem\">\n                        <ErrorDetails\n                          status={\n                            !imageStatus || hasFailedClone.includes(image.id)\n                              ? cloneErrorMessage()\n                              : imageStatus\n                          }\n                        />\n                      </PanelMain>\n                    </Panel>\n                  </>\n                }\n              >\n                <Button variant=\"link\" className=\"pf-u-p-0 pf-u-font-size-sm\">\n                  <div className=\"failure-button\">{message.text}</div>\n                </Button>\n              </Popover>\n            ) : (\n              message.text\n            )}\n          </Flex>\n        ))}\n    </React.Fragment>\n  );\n};\n\nImageBuildStatus.propTypes = {\n  imageId: PropTypes.string,\n  isImagesTableRow: PropTypes.bool,\n  imageStatus: PropTypes.object,\n  imageRegion: PropTypes.string,\n};\n","import React from 'react';\n\nimport { ClipboardCopy } from '@patternfly/react-core';\nimport {\n  TableComposable,\n  Tbody,\n  Td,\n  Th,\n  Thead,\n  Tr,\n} from '@patternfly/react-table';\nimport PropTypes from 'prop-types';\nimport { useSelector } from 'react-redux';\n\nimport { ImageBuildStatus } from './ImageBuildStatus';\n\nimport {\n  selectClonesById,\n  selectComposeById,\n  selectImageById,\n} from '../../store/composesSlice';\n\nconst Row = ({ imageId }) => {\n  const image = useSelector((state) => selectImageById(state, imageId));\n\n  return (\n    <Tbody>\n      <Tr className=\"no-bottom-border\">\n        <Td dataLabel=\"AMI\">\n          {image.status === 'success' && (\n            <ClipboardCopy\n              hoverTip=\"Copy\"\n              clickTip=\"Copied\"\n              variant=\"inline-compact\"\n            >\n              {image.ami}\n            </ClipboardCopy>\n          )}\n        </Td>\n        <Td dataLabel=\"Region\">{image.region}</Td>\n        <Td dataLabel=\"Status\">\n          <ImageBuildStatus imageId={image.id} imageRegion={image.region} />\n        </Td>\n      </Tr>\n    </Tbody>\n  );\n};\n\nconst ClonesTable = ({ composeId }) => {\n  const parentCompose = useSelector((state) =>\n    selectComposeById(state, composeId)\n  );\n  const clones = useSelector((state) => selectClonesById(state, composeId));\n\n  return (\n    <TableComposable variant=\"compact\" data-testid=\"clones-table\">\n      <Thead>\n        <Tr className=\"no-bottom-border\">\n          <Th className=\"pf-m-width-60\">AMI</Th>\n          <Th className=\"pf-m-width-20\">Region</Th>\n          <Th className=\"pf-m-width-20\">Status</Th>\n        </Tr>\n      </Thead>\n      <Row imageId={parentCompose.id} imageType={'compose'} />\n      {clones.map((clone) => (\n        <Row imageId={clone.id} key={clone.id} />\n      ))}\n    </TableComposable>\n  );\n};\n\nRow.propTypes = {\n  imageId: PropTypes.string,\n};\n\nClonesTable.propTypes = {\n  composeId: PropTypes.string,\n};\n\nexport default ClonesTable;\n","import React from 'react';\n\nimport {\n  ClipboardCopy,\n  DescriptionList,\n  DescriptionListGroup,\n  DescriptionListDescription,\n  DescriptionListTerm,\n  Button,\n  Spinner,\n  Popover,\n  Alert,\n} from '@patternfly/react-core';\nimport { ExternalLinkAltIcon } from '@patternfly/react-icons';\nimport PropTypes from 'prop-types';\nimport { useSelector } from 'react-redux';\n\nimport ClonesTable from './ClonesTable';\n\nimport {\n  useGetAWSSourcesQuery,\n  useGetAzureSourcesQuery,\n} from '../../store/apiSlice';\n\nconst sourceNotFoundPopover = () => {\n  return (\n    <Popover\n      position=\"bottom\"\n      bodyContent={\n        <>\n          <Alert\n            variant=\"danger\"\n            title=\"Source name cannot be loaded\"\n            className=\"pf-u-pb-md\"\n            isInline\n            isPlain\n          />\n          <p>\n            The information about the source cannot be loaded. Please check the\n            source was not removed and try again later.\n          </p>\n          <br />\n          <Button\n            component=\"a\"\n            target=\"_blank\"\n            variant=\"link\"\n            icon={<ExternalLinkAltIcon />}\n            iconPosition=\"right\"\n            isInline\n            href={'settings/sources'}\n          >\n            Manage sources here\n          </Button>\n        </>\n      }\n    >\n      <Button variant=\"link\" className=\"pf-u-p-0 pf-u-font-size-sm\">\n        <div className=\"failure-button\">Source name cannot be loaded</div>\n      </Button>\n    </Popover>\n  );\n};\n\nconst getAzureSourceName = (id) => {\n  const { data: sources, isSuccess } = useGetAzureSourcesQuery();\n\n  if (isSuccess) {\n    const sourcename = sources.find((source) => source.id === id);\n    if (sourcename) {\n      return sourcename.name;\n    } else {\n      return sourceNotFoundPopover();\n    }\n  } else {\n    return <Spinner isSVG size=\"md\" />;\n  }\n};\n\nconst getAWSSourceName = (id) => {\n  const { data: sources, isSuccess } = useGetAWSSourcesQuery();\n\n  if (isSuccess) {\n    const sourcename = sources.find((source) => source.id === id);\n    if (sourcename) {\n      return sourcename.name;\n    } else {\n      return sourceNotFoundPopover();\n    }\n  } else {\n    return <Spinner isSVG size=\"md\" />;\n  }\n};\n\nconst parseGCPSharedWith = (sharedWith) => {\n  const splitGCPSharedWith = sharedWith[0].split(':');\n  return splitGCPSharedWith[1];\n};\n\nconst AWSDetails = ({ id }) => {\n  const composes = useSelector((state) => state.composes);\n  const compose = composes.byId[id];\n\n  return (\n    <DescriptionList isHorizontal isCompact className=\" pf-u-pl-xl\">\n      <DescriptionListGroup>\n        <DescriptionListTerm>UUID</DescriptionListTerm>\n        <DescriptionListDescription>\n          <ClipboardCopy\n            hoverTip=\"Copy\"\n            clickTip=\"Copied\"\n            variant=\"inline-compact\"\n            ouiaId=\"aws-uuid\"\n          >\n            {id}\n          </ClipboardCopy>\n        </DescriptionListDescription>\n      </DescriptionListGroup>\n      {compose.request.image_requests[0].upload_request.options\n        .share_with_sources && (\n        <DescriptionListGroup>\n          <DescriptionListTerm>Source</DescriptionListTerm>\n          <DescriptionListDescription>\n            {getAWSSourceName(\n              compose.request.image_requests[0].upload_request.options\n                .share_with_sources?.[0]\n            )}\n          </DescriptionListDescription>\n        </DescriptionListGroup>\n      )}\n      {compose.request.image_requests[0].upload_request.options\n        .share_with_accounts?.[0] && (\n        <DescriptionListGroup>\n          <DescriptionListTerm>Shared with</DescriptionListTerm>\n          <DescriptionListDescription>\n            <Button\n              component=\"a\"\n              target=\"_blank\"\n              variant=\"link\"\n              icon={<ExternalLinkAltIcon />}\n              iconPosition=\"right\"\n              isInline\n              // the format of an account link is taken from\n              // https://docs.aws.amazon.com/signin/latest/userguide/sign-in-urls-defined.html\n              href={`https://${compose.request.image_requests[0].upload_request.options.share_with_accounts[0]}.signin.aws.amazon.com/console/`}\n            >\n              {\n                compose.request.image_requests[0].upload_request.options\n                  .share_with_accounts[0]\n              }\n            </Button>\n          </DescriptionListDescription>\n        </DescriptionListGroup>\n      )}\n    </DescriptionList>\n  );\n};\n\nconst AWSIdentifiers = ({ id }) => {\n  return <ClonesTable composeId={id} />;\n};\n\nconst AzureDetails = ({ id }) => {\n  const composes = useSelector((state) => state.composes);\n  const compose = composes.byId[id];\n\n  return (\n    <>\n      <DescriptionList isHorizontal isCompact className=\" pf-u-pl-xl\">\n        <DescriptionListGroup>\n          <DescriptionListTerm>UUID</DescriptionListTerm>\n          <DescriptionListDescription>\n            <ClipboardCopy\n              hoverTip=\"Copy\"\n              clickTip=\"Copied\"\n              variant=\"inline-compact\"\n              ouiaId=\"azure-uuid\"\n            >\n              {id}\n            </ClipboardCopy>\n          </DescriptionListDescription>\n        </DescriptionListGroup>\n        {compose.request.image_requests[0].upload_request.options.source_id && (\n          <DescriptionListGroup>\n            <DescriptionListTerm>Source</DescriptionListTerm>\n            <DescriptionListDescription>\n              {getAzureSourceName(\n                compose.request.image_requests[0].upload_request.options\n                  .source_id\n              )}\n            </DescriptionListDescription>\n          </DescriptionListGroup>\n        )}\n        <DescriptionListGroup>\n          <DescriptionListTerm>Resource Group</DescriptionListTerm>\n          <DescriptionListDescription>\n            {\n              compose.request.image_requests[0].upload_request.options\n                .resource_group\n            }\n          </DescriptionListDescription>\n        </DescriptionListGroup>\n      </DescriptionList>\n    </>\n  );\n};\n\nconst AzureIdentifiers = ({ id }) => {\n  const composes = useSelector((state) => state.composes);\n  const compose = composes.byId[id];\n\n  return (\n    <>\n      <DescriptionList isHorizontal isCompact className=\" pf-u-pl-xl\">\n        <DescriptionListGroup>\n          <DescriptionListTerm>Image name</DescriptionListTerm>\n          <DescriptionListDescription>\n            {compose?.image_status?.status === 'success' ? (\n              <ClipboardCopy\n                hoverTip=\"Copy\"\n                clickTip=\"Copied\"\n                variant=\"inline-compact\"\n              >\n                {compose.image_status.upload_status.options.image_name}\n              </ClipboardCopy>\n            ) : compose?.image_status?.status === 'failure' ? (\n              <p></p>\n            ) : (\n              <Spinner isSVG size=\"md\" />\n            )}\n          </DescriptionListDescription>\n        </DescriptionListGroup>\n      </DescriptionList>\n    </>\n  );\n};\n\nconst GCPDetails = ({ id, sharedWith }) => {\n  const composes = useSelector((state) => state.composes);\n  const compose = composes.byId[id];\n\n  return (\n    <>\n      <DescriptionList isHorizontal isCompact className=\" pf-u-pl-xl\">\n        <DescriptionListGroup>\n          <DescriptionListTerm>UUID</DescriptionListTerm>\n          <DescriptionListDescription>\n            <ClipboardCopy\n              hoverTip=\"Copy\"\n              clickTip=\"Copied\"\n              variant=\"inline-compact\"\n              ouiaId=\"gcp-uuid\"\n            >\n              {id}\n            </ClipboardCopy>\n          </DescriptionListDescription>\n        </DescriptionListGroup>\n        {compose?.image_status?.status === 'success' && (\n          <DescriptionListGroup>\n            <DescriptionListTerm>Project ID</DescriptionListTerm>\n            <DescriptionListDescription>\n              {compose.image_status.upload_status.options.project_id}\n            </DescriptionListDescription>\n          </DescriptionListGroup>\n        )}\n        {sharedWith && (\n          <DescriptionListGroup>\n            <DescriptionListTerm>Shared with</DescriptionListTerm>\n            <DescriptionListDescription>\n              {parseGCPSharedWith(sharedWith)}\n            </DescriptionListDescription>\n          </DescriptionListGroup>\n        )}\n      </DescriptionList>\n    </>\n  );\n};\n\nconst GCPIdentifiers = ({ id }) => {\n  const composes = useSelector((state) => state.composes);\n  const compose = composes.byId[id];\n\n  return (\n    <>\n      <DescriptionList isHorizontal isCompact className=\" pf-u-pl-xl\">\n        <DescriptionListGroup>\n          <DescriptionListTerm>Image name</DescriptionListTerm>\n          <DescriptionListDescription>\n            {compose?.image_status?.status === 'success' ? (\n              <ClipboardCopy\n                hoverTip=\"Copy\"\n                clickTip=\"Copied\"\n                variant=\"inline-compact\"\n              >\n                {compose.image_status.upload_status.options.image_name}\n              </ClipboardCopy>\n            ) : compose?.image_status?.status === 'failure' ? (\n              <p></p>\n            ) : (\n              <Spinner isSVG size=\"md\" />\n            )}\n          </DescriptionListDescription>\n        </DescriptionListGroup>\n      </DescriptionList>\n    </>\n  );\n};\n\nconst ImageDetails = ({ id }) => {\n  const composes = useSelector((state) => state.composes);\n  const compose = composes.byId[id];\n\n  return (\n    <>\n      <div className=\"pf-u-font-weight-bold pf-u-pb-md\">Build Information</div>\n      {\n        // the information about the image's target differs between images\n        // built by api and images built by the service\n        (compose.request.image_requests[0].image_type === 'aws' ||\n          compose?.image_status?.upload_status?.type === 'aws') && (\n          <AWSDetails id={id} />\n        )\n      }\n      {(compose.request.image_requests[0].image_type === 'azure' ||\n        compose?.image_status?.upload_status?.type === 'azure') && (\n        <AzureDetails id={id} />\n      )}\n      {(compose.request.image_requests[0].image_type === 'gcp' ||\n        compose?.image_status?.upload_status?.type === 'gcp') && (\n        <GCPDetails id={id} sharedWith={compose.share_with_accounts} />\n      )}\n      {(compose.request.image_requests[0].image_type === 'guest-image' ||\n        compose.request.image_requests[0].image_type === 'image-installer' ||\n        compose.request.image_requests[0].image_type === 'vsphere' ||\n        compose.request.image_requests[0].image_type ===\n          'rhel-edge-installer' ||\n        compose.request.image_requests[0].image_type ===\n          'rhel-edge-commit') && (\n        <DescriptionList isHorizontal isCompact className=\" pf-u-pl-xl\">\n          <DescriptionListGroup>\n            <DescriptionListTerm>UUID</DescriptionListTerm>\n            <DescriptionListDescription>\n              <ClipboardCopy\n                hoverTip=\"Copy\"\n                clickTip=\"Copied\"\n                variant=\"inline-compact\"\n                ouiaId=\"other-targets-uuid\"\n              >\n                {id}\n              </ClipboardCopy>\n            </DescriptionListDescription>\n          </DescriptionListGroup>\n        </DescriptionList>\n      )}\n      {(compose.request.image_requests[0].image_type === 'aws' ||\n        compose?.image_status?.upload_status?.type === 'aws' ||\n        compose.request.image_requests[0].image_type === 'gcp' ||\n        compose?.image_status?.upload_status?.type === 'gcp' ||\n        compose.request.image_requests[0].image_type === 'azure' ||\n        compose?.image_status?.upload_status?.type === 'azure') && (\n        <>\n          <br />\n          <div className=\"pf-u-font-weight-bold pf-u-pb-md\">\n            Cloud Provider Identifiers\n          </div>\n        </>\n      )}\n      {(compose.request.image_requests[0].image_type === 'aws' ||\n        compose?.image_status?.upload_status?.type === 'aws') && (\n        <AWSIdentifiers id={id} />\n      )}\n      {(compose.request.image_requests[0].image_type === 'azure' ||\n        compose?.image_status?.upload_status?.type === 'azure') && (\n        <AzureIdentifiers id={id} />\n      )}\n      {(compose.request.image_requests[0].image_type === 'gcp' ||\n        compose?.image_status?.upload_status?.type === 'gcp') && (\n        <GCPIdentifiers id={id} />\n      )}\n    </>\n  );\n};\n\nAWSDetails.propTypes = {\n  id: PropTypes.string,\n};\n\nAWSIdentifiers.propTypes = {\n  id: PropTypes.string,\n};\n\nAzureDetails.propTypes = {\n  id: PropTypes.string,\n};\n\nAzureIdentifiers.propTypes = {\n  id: PropTypes.string,\n};\n\nGCPDetails.propTypes = {\n  id: PropTypes.string,\n  sharedWith: PropTypes.arrayOf(PropTypes.string),\n};\n\nGCPIdentifiers.propTypes = {\n  id: PropTypes.string,\n};\n\nImageDetails.propTypes = {\n  id: PropTypes.string,\n};\n\nexport default ImageDetails;\n","import React from 'react';\n\nimport { Label } from '@patternfly/react-core';\n\nimport './BetaLabel.scss';\n\nconst BetaLabel = () => {\n  return (\n    <Label className=\"beta-label\">\n      <b>Preview</b>\n    </Label>\n  );\n};\n\nexport default BetaLabel;\n","import React, { useMemo } from 'react';\n\nimport { Button, Divider, Popover } from '@patternfly/react-core';\nimport { createSelector } from '@reduxjs/toolkit';\nimport PropTypes from 'prop-types';\nimport { useSelector } from 'react-redux';\n\nimport { selectComposeById, selectImagesById } from '../../store/composesSlice';\nimport { useGetEnvironment } from '../../Utilities/useGetEnvironment';\nimport BetaLabel from '../sharedComponents/BetaLabel';\n\nexport const selectRegions = createSelector(\n  [selectComposeById, selectImagesById],\n  (compose, images) => {\n    const filteredImages = images.filter(\n      (image) =>\n        compose.share_with_accounts &&\n        compose.share_with_accounts[0] === image.share_with_accounts[0]\n    );\n\n    const regions = {};\n    filteredImages.forEach((image) => {\n      if (image.region && image.status === 'success') {\n        if (regions[image.region]) {\n          new Date(image.created_at) <\n          new Date(regions[image.region].created_at)\n            ? null\n            : (regions[image.region] = {\n                ami: image.ami,\n                created_at: image.created_at,\n              });\n        } else {\n          regions[image.region] = {\n            ami: image.ami,\n            created_at: image.created_at,\n          };\n        }\n      }\n    });\n\n    return regions;\n  }\n);\n\nconst ImageLinkRegion = ({ region, ami }) => {\n  const url =\n    'https://console.aws.amazon.com/ec2/v2/home?region=' +\n    region +\n    '#LaunchInstanceWizard:ami=' +\n    ami;\n\n  return (\n    <Button component=\"a\" target=\"_blank\" variant=\"link\" isInline href={url}>\n      {region}\n    </Button>\n  );\n};\n\nexport const RegionsPopover = ({ composeId }) => {\n  const { isBeta } = useGetEnvironment();\n  const regions = useSelector((state) => selectRegions(state, composeId));\n\n  const listItems = useMemo(() => {\n    const listItems = [];\n    for (const [key, value] of Object.entries(regions).sort()) {\n      listItems.push(\n        <li key={key}>\n          <ImageLinkRegion region={key} ami={value.ami} />\n        </li>\n      );\n    }\n    return listItems;\n  }, [regions]);\n\n  const compose = useSelector((state) => selectComposeById(state, composeId));\n  const createdInPreview = compose?.share_with_sources?.[0] ? true : false;\n\n  return (\n    <Popover\n      /* popovers aren't rendered inside of the main page section, make sure our prefixed css still\n       * applies */\n      className=\"imageBuilder\"\n      aria-label=\"Launch instance\"\n      headerContent={<div>Launch instance</div>}\n      bodyContent={\n        <>\n          <ul>{listItems}</ul>\n          {!isBeta() && (\n            <>\n              {createdInPreview && (\n                <p>\n                  This image was created using features only available in\n                  Preview.\n                </p>\n              )}\n              <Divider className=\"pf-u-mt-sm pf-u-mb-sm\" />\n              <Button\n                isInline\n                component=\"a\"\n                variant=\"link\"\n                href=\"/preview/insights/image-builder/landing\"\n              >\n                <BetaLabel />\n                Launch from Preview\n              </Button>\n            </>\n          )}\n        </>\n      }\n    >\n      <Button variant=\"link\" isInline>\n        Launch\n      </Button>\n    </Popover>\n  );\n};\n\nImageLinkRegion.propTypes = {\n  region: PropTypes.string,\n  ami: PropTypes.string,\n};\n\nRegionsPopover.propTypes = {\n  composeId: PropTypes.string,\n};\n","import React from 'react';\n\nimport {\n  Button,\n  Divider,\n  Popover,\n  Text,\n  TextContent,\n  TextVariants,\n} from '@patternfly/react-core';\nimport { ExternalLinkAltIcon } from '@patternfly/react-icons';\nimport PropTypes from 'prop-types';\nimport { useSelector } from 'react-redux';\nimport { useNavigate } from 'react-router-dom';\n\nimport { RegionsPopover } from './RegionsPopover';\n\nimport { selectImageById } from '../../store/composesSlice';\nimport { resolveRelPath } from '../../Utilities/path';\nimport BetaLabel from '../sharedComponents/BetaLabel';\n\nconst ImageLinkDirect = ({ imageId, isExpired, isInClonesTable }) => {\n  const navigate = useNavigate();\n\n  const image = useSelector((state) => selectImageById(state, imageId));\n  const uploadStatus = image.uploadStatus;\n\n  const fileExtensions = {\n    vsphere: '.vmdk',\n    'guest-image': '.qcow2',\n    'image-installer': '.iso',\n  };\n\n  if (uploadStatus.type === 'aws') {\n    const url =\n      'https://console.aws.amazon.com/ec2/v2/home?region=' +\n      uploadStatus.options.region +\n      '#LaunchInstanceWizard:ami=' +\n      uploadStatus.options.ami;\n    if (isInClonesTable) {\n      return (\n        <Button\n          component=\"a\"\n          target=\"_blank\"\n          variant=\"link\"\n          isInline\n          href={url}\n        >\n          Launch\n        </Button>\n      );\n    } else {\n      return <RegionsPopover composeId={image.id} />;\n    }\n  } else if (uploadStatus.type === 'azure') {\n    const createdInPreview = image?.uploadOptions?.source_id;\n    const url =\n      'https://portal.azure.com/#@' +\n      image.uploadOptions.tenant_id +\n      '/resource/subscriptions/' +\n      image.uploadOptions.subscription_id +\n      '/resourceGroups/' +\n      image.uploadOptions.resource_group +\n      '/providers/Microsoft.Compute/images/' +\n      uploadStatus.options.image_name;\n    return createdInPreview ? (\n      <Popover\n        /* popovers aren't rendered inside of the main page section, make sure our prefixed css still\n         * applies */\n        className=\"imageBuilder\"\n        aria-label=\"Launch instance\"\n        headerContent={<div>Launch instance</div>}\n        bodyContent={\n          <>\n            <>\n              <p>\n                This image was created using features only available in Preview.\n              </p>\n              <Divider className=\"pf-u-mt-sm pf-u-mb-sm\" />\n              <Button\n                isInline\n                component=\"a\"\n                variant=\"link\"\n                href=\"/preview/insights/image-builder/landing\"\n              >\n                <BetaLabel />\n                Launch from Preview\n              </Button>\n            </>\n          </>\n        }\n      >\n        <Button variant=\"link\" isInline>\n          Launch\n        </Button>\n      </Popover>\n    ) : (\n      <Button\n        component=\"a\"\n        target=\"_blank\"\n        variant=\"link\"\n        icon={<ExternalLinkAltIcon />}\n        iconPosition=\"right\"\n        isInline\n        href={url}\n      >\n        View uploaded image\n      </Button>\n    );\n  } else if (uploadStatus.type === 'gcp') {\n    return (\n      <Popover\n        aria-label=\"Popover with google cloud platform image details\"\n        maxWidth=\"30rem\"\n        headerContent={'GCP image details'}\n        bodyContent={\n          <TextContent>\n            <Text component={TextVariants.p}>\n              To use an Image Builder created Google Cloud Platform (GCP) image\n              in your project, specify the project ID and image name in your\n              templates and configurations.\n            </Text>\n            <Text>\n              <strong>Project ID</strong>\n              <br />\n              {uploadStatus.options.project_id}\n            </Text>\n            <Text>\n              <strong>Image Name</strong>\n              <br />\n              {uploadStatus.options.image_name}\n            </Text>\n            <Text>\n              <strong>Shared with</strong>\n              <br />\n              {/* the account the image is shared with is stored in the form type:account so this extracts the account */}\n              {image.uploadOptions.share_with_accounts[0].split(':')[1]}\n            </Text>\n          </TextContent>\n        }\n      >\n        <Button component=\"a\" target=\"_blank\" variant=\"link\" isInline>\n          Image details\n        </Button>\n      </Popover>\n    );\n  } else if (uploadStatus.type === 'aws.s3') {\n    if (!isExpired) {\n      return (\n        <Button\n          component=\"a\"\n          target=\"_blank\"\n          variant=\"link\"\n          isInline\n          href={uploadStatus.options.url}\n        >\n          Download ({fileExtensions[image.imageType]})\n        </Button>\n      );\n    } else {\n      return (\n        <Button\n          component=\"a\"\n          target=\"_blank\"\n          variant=\"link\"\n          onClick={() => navigate(resolveRelPath(`imagewizard/${imageId}`))}\n          isInline\n        >\n          Recreate image\n        </Button>\n      );\n    }\n  }\n\n  return null;\n};\n\nImageLinkDirect.propTypes = {\n  imageId: PropTypes.string,\n  isExpired: PropTypes.bool,\n  isInClonesTable: PropTypes.bool,\n};\n\nexport default ImageLinkDirect;\n","import React, { Suspense, useState, useMemo } from 'react';\n\nimport { Button, Modal, ModalVariant } from '@patternfly/react-core';\nimport { useChrome } from '@redhat-cloud-services/frontend-components/useChrome';\nimport { useLoadModule, useScalprum } from '@scalprum/react-core';\nimport { useFlag } from '@unleash/proxy-client-react';\nimport PropTypes from 'prop-types';\nimport { useSelector } from 'react-redux';\n\nimport ImageLinkDirect from './ImageLinkDirect';\n\nimport { MODAL_ANCHOR } from '../../constants';\nimport { selectImageById } from '../../store/composesSlice';\nimport { useGetEnvironment } from '../../Utilities/useGetEnvironment';\n\nconst getImageProvider = ({ imageType }) => {\n  switch (imageType) {\n    case 'aws':\n      return 'aws';\n    case 'ami':\n      return 'aws';\n    case 'azure':\n      return 'azure';\n    case 'gcp':\n      return 'gcp';\n    default:\n      //TODO check with Provisioning: what if imageType is not 'aws', 'ami', or 'azure'?\n      return 'aws';\n  }\n};\n\nconst ProvisioningLink = ({ imageId, isExpired, isInClonesTable }) => {\n  const image = useSelector((state) => selectImageById(state, imageId));\n\n  const [wizardOpen, openWizard] = useState(false);\n  const [{ default: ProvisioningWizard }, error] = useLoadModule(\n    {\n      appName: 'provisioning', // optional\n      scope: 'provisioning',\n      module: './ProvisioningWizard',\n      // processor: (val) => val, // optional\n    },\n    {},\n    {}\n  );\n\n  const appendTo = useMemo(() => document.querySelector(MODAL_ANCHOR), []);\n\n  const provider = getImageProvider(image);\n  if (!error) {\n    return (\n      <Suspense fallback=\"loading...\">\n        <Button variant=\"link\" isInline onClick={() => openWizard(true)}>\n          Launch\n        </Button>\n        {wizardOpen && (\n          <Modal\n            isOpen\n            modalVariant={ModalVariant.large}\n            hasNoBodyWrapper\n            appendTo={appendTo}\n            showClose={false}\n            variant={'large'}\n          >\n            <ProvisioningWizard\n              onClose={() => openWizard(false)}\n              image={{\n                name: image.imageName,\n                id: image.id,\n                architecture: image.architecture,\n                provider: provider,\n                sourceIDs: image.share_with_sources,\n                accountIDs: image.share_with_accounts,\n                uploadOptions: image.uploadOptions,\n                uploadStatus: image.uploadStatus,\n                // For backward compatibility only, remove once Provisioning ready (deploys):\n                // https://github.com/RHEnVision/provisioning-frontend/pull/238\n                sourceId: image.share_with_sources?.[0],\n              }}\n            />\n          </Modal>\n        )}\n      </Suspense>\n    );\n  }\n\n  return (\n    <ImageLinkDirect\n      imageId={image.id}\n      isExpired={isExpired}\n      isInClonesTable={isInClonesTable}\n    />\n  );\n};\n\nconst ImageLink = ({ imageId, isExpired, isInClonesTable }) => {\n  const image = useSelector((state) => selectImageById(state, imageId));\n  const uploadStatus = image.uploadStatus;\n  const { initialized: chromeInitialized, getEnvironment } = useChrome();\n  const { isBeta } = useGetEnvironment();\n  const azureFeatureFlag = useFlag('provisioning.azure');\n  const gcpFeatureFlag = useFlag('provisioning.gcp');\n  const scalprum = useScalprum();\n  const hasProvisioning =\n    chromeInitialized && scalprum.config?.provisioning && isBeta();\n\n  if (!uploadStatus || image.status !== 'success') return null;\n\n  const provisioningLinkEnabled = (image) => {\n    switch (image.imageType) {\n      case 'aws':\n      case 'ami':\n        return true;\n      case 'azure':\n        if (getEnvironment() === 'qa') {\n          return true;\n        }\n        return !!azureFeatureFlag;\n      case 'gcp':\n        if (getEnvironment() === 'qa') {\n          return true;\n        }\n        return !!gcpFeatureFlag;\n      default:\n        return false;\n    }\n  };\n\n  if (hasProvisioning && provisioningLinkEnabled(image)) {\n    if (isInClonesTable) {\n      return null;\n    }\n\n    return (\n      <ProvisioningLink\n        imageId={image.id}\n        isExpired={isExpired}\n        isInClonesTable={isInClonesTable}\n      />\n    );\n  }\n\n  return (\n    <ImageLinkDirect\n      imageId={image.id}\n      isExpired={isExpired}\n      isInClonesTable={isInClonesTable}\n    />\n  );\n};\n\nProvisioningLink.propTypes = {\n  imageId: PropTypes.string,\n  isExpired: PropTypes.bool,\n  isInClonesTable: PropTypes.bool,\n};\n\nImageLink.propTypes = {\n  imageId: PropTypes.string.isRequired,\n  isExpired: PropTypes.bool,\n  isInClonesTable: PropTypes.bool,\n};\n\nexport default ImageLink;\n","import PropTypes from 'prop-types';\n\nimport { RHEL_8, RHEL_9 } from '../../constants.js';\n\nconst Release = (props) => {\n  const releaseOptions = {\n    [RHEL_8]: 'RHEL 8',\n    [RHEL_9]: 'RHEL 9',\n    'centos-8': 'CentOS Stream 8',\n    'centos-9': 'CentOS Stream 9',\n  };\n  const release = releaseOptions[props.release]\n    ? releaseOptions[props.release]\n    : props.release;\n  return release;\n};\n\nRelease.propTypes = {\n  release: PropTypes.string,\n};\n\nexport default Release;\n","import React from 'react';\n\nimport PropTypes from 'prop-types';\nimport { useSelector } from 'react-redux';\n\nimport { selectComposeById } from '../../store/composesSlice';\n\nconst Target = ({ composeId }) => {\n  const compose = useSelector((state) => selectComposeById(state, composeId));\n\n  const targetOptions = {\n    aws: 'Amazon Web Services',\n    azure: 'Microsoft Azure',\n    gcp: 'Google Cloud Platform',\n    vsphere: 'VMWare',\n    'guest-image': 'Virtualization - Guest image',\n    'image-installer': 'Bare metal - Installer',\n  };\n\n  let target;\n  if (compose.uploadType === 'aws.s3') {\n    target = targetOptions[compose.imageType];\n  } else if (compose.uploadType === 'aws') {\n    target =\n      targetOptions[compose.uploadType] +\n      ` (${compose.clones.length !== 0 ? compose.clones.length + 1 : 1})`;\n  } else {\n    target = targetOptions[compose.uploadType];\n  }\n\n  return <>{target ? target : compose.imageType}</>;\n};\n\nTarget.propTypes = {\n  composeId: PropTypes.string,\n};\n\nexport default Target;\n","import api from '../../api';\nimport { cloneAdded, cloneUpdatedStatus } from '../clonesSlice';\nimport {\n  composeAdded,\n  composesUpdatedCount,\n  composeUpdatedStatus,\n} from '../composesSlice';\n\nexport const fetchComposeStatus = (id) => async (dispatch) => {\n  const request = await api.getComposeStatus(id);\n  dispatch(\n    composeUpdatedStatus({\n      id,\n      status: request.image_status,\n    })\n  );\n};\n\nexport const fetchComposes = (limit, offset) => async (dispatch) => {\n  const composeRequest = await api.getComposes(limit, offset);\n\n  composeRequest.data.map((compose) => {\n    dispatch(composeAdded({ compose, insert: false }));\n    dispatch(fetchComposeStatus(compose.id));\n  });\n  dispatch(composesUpdatedCount({ count: composeRequest.meta.count }));\n\n  composeRequest.data.forEach((compose) => {\n    dispatch(fetchClones(compose.id, 100, 0));\n  });\n};\n\nexport const fetchCloneStatus = (id) => async (dispatch) => {\n  const request = await api.getCloneStatus(id);\n  dispatch(\n    cloneUpdatedStatus({\n      id,\n      status: request,\n    })\n  );\n};\n\nexport const fetchClones = (id, limit, offset) => async (dispatch) => {\n  const request = await api.getClones(id, limit, offset);\n  request.data?.forEach((clone) => {\n    dispatch(cloneAdded({ clone, parent: id }));\n    dispatch(fetchCloneStatus(clone.id));\n  });\n};\n\nexport default {\n  fetchClones,\n  fetchCloneStatus,\n  fetchComposes,\n  fetchComposeStatus,\n};\n","import React, { useEffect, useState } from 'react';\n\nimport {\n  EmptyState,\n  EmptyStateBody,\n  EmptyStateIcon,\n  EmptyStateSecondaryActions,\n  EmptyStateVariant,\n  Pagination,\n  PaginationVariant,\n  Title,\n  Toolbar,\n  ToolbarContent,\n  ToolbarItem,\n} from '@patternfly/react-core';\nimport { PlusCircleIcon } from '@patternfly/react-icons';\nimport {\n  ActionsColumn,\n  ExpandableRowContent,\n  TableComposable,\n  Tbody,\n  Td,\n  Th,\n  Thead,\n  Tr,\n} from '@patternfly/react-table';\nimport PropTypes from 'prop-types';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Link, useNavigate } from 'react-router-dom';\n\nimport './ImagesTable.scss';\nimport { ImageBuildStatus } from './ImageBuildStatus';\nimport ImageDetails from './ImageDetails';\nimport ImageLink from './ImageLink';\nimport Release from './Release';\nimport Target from './Target';\n\nimport { AWS_S3_EXPIRATION_TIME_IN_HOURS } from '../../constants';\nimport { fetchComposes, fetchComposeStatus } from '../../store/actions/actions';\nimport { resolveRelPath } from '../../Utilities/path';\nimport {\n  hoursToExpiration,\n  timestampToDisplayString,\n} from '../../Utilities/time';\nimport DocumentationButton from '../sharedComponents/DocumentationButton';\n\nconst ImagesTable = () => {\n  const [page, setPage] = useState(1);\n  const [perPage, setPerPage] = useState(10);\n\n  const [expandedComposeIds, setExpandedComposeIds] = useState([]);\n  const isExpanded = (compose) => expandedComposeIds.includes(compose.id);\n\n  const handleToggle = (compose, isExpanding) => {\n    if (isExpanding) {\n      setExpandedComposeIds([...expandedComposeIds, compose.id]);\n    } else {\n      setExpandedComposeIds(\n        expandedComposeIds.filter((id) => id !== compose.id)\n      );\n    }\n  };\n\n  const composes = useSelector((state) => state.composes);\n  const dispatch = useDispatch();\n\n  const navigate = useNavigate();\n\n  const pollComposeStatuses = () => {\n    Object.entries(composes.byId).map(([id, compose]) => {\n      /* Skip composes that have been complete */\n      if (\n        compose.image_status?.status === 'success' ||\n        compose.image_status?.status === 'failure'\n      ) {\n        return;\n      }\n\n      dispatch(fetchComposeStatus(id));\n    });\n  };\n\n  /* Get all composes once on mount */\n  useEffect(() => {\n    dispatch(fetchComposes(perPage, 0));\n  }, []);\n\n  /* Reset the polling each time the composes in the store are updated */\n  useEffect(() => {\n    const intervalId = setInterval(() => pollComposeStatuses(), 8000);\n    // clean up interval on unmount\n    return () => clearInterval(intervalId);\n  });\n\n  const onSetPage = (_, page) => {\n    // if the next page's composes haven't been fetched from api yet\n    // then fetch them with proper page index and offset\n    if (composes.count > composes.allIds.length) {\n      const pageIndex = page - 1;\n      const offset = pageIndex * perPage;\n      dispatch(fetchComposes(perPage, offset));\n    }\n\n    setPage(page);\n  };\n\n  const onPerPageSelect = (_, perPage) => {\n    // if the new per page quantity is greater than the number of already fetched composes fetch more composes\n    // if all composes haven't already been fetched\n    if (\n      composes.count > composes.allIds.length &&\n      perPage > composes.allIds.length\n    ) {\n      dispatch(fetchComposes(perPage, 0));\n    }\n\n    // page should be reset to the first page when the page size is changed.\n    setPerPage(perPage);\n    setPage(1);\n  };\n\n  const actions = (compose) => [\n    {\n      title: 'Recreate image',\n      onClick: () => {\n        navigate(resolveRelPath(`imagewizard/${compose.id}`));\n      },\n    },\n    {\n      title: (\n        <a\n          className=\"ib-subdued-link\"\n          href={`data:text/plain;charset=utf-8,${encodeURIComponent(\n            JSON.stringify(compose.request, null, '  ')\n          )}`}\n          download={`request-${compose.id}.json`}\n        >\n          Download compose request (.json)\n        </a>\n      ),\n    },\n  ];\n\n  const awsActions = (compose) => [\n    {\n      title: 'Share to new region',\n      onClick: () => navigate(resolveRelPath(`share/${compose.id}`)),\n      isDisabled: compose?.image_status?.status === 'success' ? false : true,\n    },\n    ...actions(compose),\n  ];\n\n  // the state.page is not an index so must be reduced by 1 get the starting index\n  const itemsStartInclusive = (page - 1) * perPage;\n  const itemsEndExclusive = itemsStartInclusive + perPage;\n\n  return (\n    <React.Fragment>\n      {(composes.allIds.length === 0 && (\n        <EmptyState variant={EmptyStateVariant.large} data-testid=\"empty-state\">\n          <EmptyStateIcon icon={PlusCircleIcon} />\n          <Title headingLevel=\"h4\" size=\"lg\">\n            Create an image\n          </Title>\n          <EmptyStateBody>\n            Create OS images for deployment in Amazon Web Services, Microsoft\n            Azure and Google Cloud Platform. Images can include a custom package\n            set and an activation key to automate the registration process.\n          </EmptyStateBody>\n          <Link\n            to={resolveRelPath('imagewizard')}\n            className=\"pf-c-button pf-m-primary\"\n            data-testid=\"create-image-action\"\n          >\n            Create image\n          </Link>\n          <EmptyStateSecondaryActions>\n            <DocumentationButton />\n          </EmptyStateSecondaryActions>\n        </EmptyState>\n      )) || (\n        <React.Fragment>\n          <Toolbar>\n            <ToolbarContent>\n              <ToolbarItem>\n                <Link\n                  to={resolveRelPath('imagewizard')}\n                  className=\"pf-c-button pf-m-primary\"\n                  data-testid=\"create-image-action\"\n                >\n                  Create image\n                </Link>\n              </ToolbarItem>\n              <ToolbarItem\n                variant=\"pagination\"\n                align={{ default: 'alignRight' }}\n              >\n                <Pagination\n                  itemCount={composes.count}\n                  perPage={perPage}\n                  page={page}\n                  onSetPage={onSetPage}\n                  onPerPageSelect={onPerPageSelect}\n                  widgetId=\"compose-pagination-top\"\n                  data-testid=\"images-pagination-top\"\n                  isCompact\n                />\n              </ToolbarItem>\n            </ToolbarContent>\n          </Toolbar>\n          <TableComposable variant=\"compact\" data-testid=\"images-table\">\n            <Thead>\n              <Tr>\n                <Th />\n                <Th>Image name</Th>\n                <Th>Created/Updated</Th>\n                <Th>Release</Th>\n                <Th>Target</Th>\n                <Th>Status</Th>\n                <Th>Instance</Th>\n                <Th />\n              </Tr>\n            </Thead>\n            {composes.allIds\n              .slice(itemsStartInclusive, itemsEndExclusive)\n              .map((id, rowIndex) => {\n                const compose = composes.byId[id];\n                return (\n                  <Tbody key={id} isExpanded={isExpanded(compose)}>\n                    <Tr className=\"no-bottom-border\">\n                      <Td\n                        expand={{\n                          rowIndex,\n                          isExpanded: isExpanded(compose),\n                          onToggle: () =>\n                            handleToggle(compose, !isExpanded(compose)),\n                        }}\n                      />\n                      <Td dataLabel=\"Image name\">\n                        {compose.request.image_name || id}\n                      </Td>\n                      <Td dataLabel=\"Created\">\n                        {timestampToDisplayString(compose.created_at)}\n                      </Td>\n                      <Td dataLabel=\"Release\">\n                        <Release release={compose.request.distribution} />\n                      </Td>\n                      <Td dataLabel=\"Target\">\n                        <Target composeId={id} />\n                      </Td>\n                      <Td dataLabel=\"Status\">\n                        <ImageBuildStatus\n                          imageId={id}\n                          isImagesTableRow={true}\n                          imageStatus={compose.image_status}\n                        />\n                      </Td>\n                      <Td dataLabel=\"Instance\">\n                        <ImageLink\n                          imageId={id}\n                          isExpired={\n                            hoursToExpiration(compose.created_at) >=\n                            AWS_S3_EXPIRATION_TIME_IN_HOURS\n                              ? true\n                              : false\n                          }\n                        />\n                      </Td>\n                      <Td>\n                        {compose.request.image_requests[0].upload_request\n                          .type === 'aws' ? (\n                          <ActionsColumn items={awsActions(compose)} />\n                        ) : (\n                          <ActionsColumn items={actions(compose)} />\n                        )}\n                      </Td>\n                    </Tr>\n                    <Tr isExpanded={isExpanded(compose)}>\n                      <Td colSpan={8}>\n                        <ExpandableRowContent>\n                          <ImageDetails id={id} />\n                        </ExpandableRowContent>\n                      </Td>\n                    </Tr>\n                  </Tbody>\n                );\n              })}\n          </TableComposable>\n          <Toolbar className=\"pf-u-mb-xl\">\n            <ToolbarContent>\n              <ToolbarItem\n                variant=\"pagination\"\n                align={{ default: 'alignRight' }}\n              >\n                <Pagination\n                  variant={PaginationVariant.bottom}\n                  itemCount={composes.count}\n                  perPage={perPage}\n                  page={page}\n                  onSetPage={onSetPage}\n                  onPerPageSelect={onPerPageSelect}\n                  widgetId=\"compose-pagination-bottom\"\n                  data-testid=\"images-pagination-bottom\"\n                  isCompact\n                />\n              </ToolbarItem>\n            </ToolbarContent>\n          </Toolbar>\n        </React.Fragment>\n      )}\n    </React.Fragment>\n  );\n};\n\nImagesTable.propTypes = {\n  composes: PropTypes.object,\n  composesGet: PropTypes.func,\n  composeGetStatus: PropTypes.func,\n};\n\nexport default ImagesTable;\n","import React, { useState } from 'react';\n\nimport {\n  Alert,\n  AlertActionCloseButton,\n  Button,\n  ExpandableSection,\n  Popover,\n  Text,\n  TextContent,\n} from '@patternfly/react-core';\nimport { ArrowRightIcon, HelpIcon } from '@patternfly/react-icons';\n// eslint-disable-next-line rulesdir/disallow-fec-relative-imports\nimport {\n  OpenSourceBadge,\n  PageHeader,\n  PageHeaderTitle,\n} from '@redhat-cloud-services/frontend-components';\nimport { useChrome } from '@redhat-cloud-services/frontend-components/useChrome';\nimport { Outlet } from 'react-router-dom';\n\nimport './LandingPage.scss';\n\nimport { useGetEnvironment } from '../../Utilities/useGetEnvironment';\nimport ImagesTable from '../ImagesTable/ImagesTable';\nimport DocumentationButton from '../sharedComponents/DocumentationButton';\n\nexport const LandingPage = () => {\n  const [showBetaAlert, setShowBetaAlert] = useState(true);\n  const [showHint, setShowHint] = useState(true);\n\n  const { quickStarts } = useChrome();\n  const { isBeta } = useGetEnvironment();\n  const activateQuickstart = (qs) => () => quickStarts.activateQuickstart(qs);\n\n  return (\n    <React.Fragment>\n      <PageHeader>\n        <PageHeaderTitle className=\"title\" title=\"Image Builder\" />\n        <Popover\n          headerContent={'About Image Builder'}\n          bodyContent={\n            <TextContent>\n              <Text>\n                Image Builder is a service that allows you to create RHEL images\n                and push them to cloud environments.\n              </Text>\n              <DocumentationButton />\n            </TextContent>\n          }\n        >\n          <Button\n            variant=\"plain\"\n            aria-label=\"About image builder\"\n            className=\"pf-u-pl-sm header-button\"\n          >\n            <HelpIcon />\n          </Button>\n        </Popover>\n        <OpenSourceBadge repositoriesURL=\"https://www.osbuild.org/guides/image-builder-service/architecture.html\" />\n      </PageHeader>\n      <section className=\"pf-l-page__main-section pf-c-page__main-section\">\n        {!isBeta() && showBetaAlert && (\n          <Alert\n            className=\"pf-u-mb-xl\"\n            isInline\n            variant=\"default\"\n            title=\"Try new features in our Preview environment.\"\n            actionClose={\n              <AlertActionCloseButton onClose={() => setShowBetaAlert(false)} />\n            }\n            actionLinks={\n              <Button\n                isInline\n                component=\"a\"\n                variant=\"link\"\n                href=\"/preview/insights/image-builder/landing\"\n              >\n                Enter Preview environment\n              </Button>\n            }\n          >\n            <p>\n              Launch Amazon Web Services or Microsoft Azure hosts to the cloud\n              from the console.\n            </p>\n            <p>\n              Link custom repositories and build any supported image with custom\n              content.\n            </p>\n          </Alert>\n        )}\n        {isBeta() && (\n          <ExpandableSection\n            className=\"pf-m-light pf-u-mb-xl expand-section\"\n            toggleText=\"Help get started with Preview features\"\n            onToggle={setShowHint}\n            isExpanded={showHint}\n            displaySize=\"large\"\n          >\n            <p className=\"pf-u-pb-sm\">\n              For help getting started, access the quick starts for our Preview\n              features.\n            </p>\n            <p className=\"pf-u-pt-sm\">\n              <Button\n                icon={<ArrowRightIcon />}\n                iconPosition=\"right\"\n                variant=\"link\"\n                isInline\n                component=\"a\"\n                onClick={activateQuickstart('insights-launch-aws')}\n                className=\"pf-u-font-weight-bold\"\n              >\n                Launch an AWS Image\n              </Button>\n            </p>\n            <p className=\"pf-u-pt-sm\">\n              <Button\n                icon={<ArrowRightIcon />}\n                iconPosition=\"right\"\n                variant=\"link\"\n                isInline\n                component=\"a\"\n                onClick={activateQuickstart('insights-launch-azure')}\n                className=\"pf-u-font-weight-bold\"\n              >\n                Launch an Azure Image\n              </Button>\n            </p>\n            <p className=\"pf-u-pt-sm\">\n              <Button\n                icon={<ArrowRightIcon />}\n                iconPosition=\"right\"\n                variant=\"link\"\n                isInline\n                component=\"a\"\n                onClick={activateQuickstart('insights-custom-repos')}\n                className=\"pf-u-font-weight-bold\"\n              >\n                Build an Image with Custom Content\n              </Button>\n            </p>\n          </ExpandableSection>\n        )}\n        <ImagesTable />\n      </section>\n      <Outlet />\n    </React.Fragment>\n  );\n};\n\nexport default LandingPage;\n","import React from 'react';\n\nimport { Button } from '@patternfly/react-core';\nimport { ExternalLinkAltIcon } from '@patternfly/react-icons';\n\nconst DocumentationButton = () => {\n  const documentationURL =\n    'https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/8/html/creating_customized_rhel_images_using_the_image_builder_service/index';\n\n  return (\n    <Button\n      component=\"a\"\n      target=\"_blank\"\n      variant=\"link\"\n      icon={<ExternalLinkAltIcon />}\n      iconPosition=\"right\"\n      isInline\n      href={documentationURL}\n    >\n      Documentation\n    </Button>\n  );\n};\n\nexport default DocumentationButton;\n","import { useChrome } from '@redhat-cloud-services/frontend-components/useChrome';\n\nexport const useGetEnvironment = () => {\n  const { isBeta, isProd, getEnvironment } = useChrome();\n  // Expose beta features in the ephemeral environment\n  if (isBeta() || getEnvironment() === 'qa') {\n    return { isBeta: () => true, isProd: isProd };\n  }\n  return { isBeta: () => false, isProd: isProd };\n};\n"],"names":["exports","name","height","width","svgPath","yOffset","xOffset","ErrorDetails","_ref","status","React","err","_err$details","reason","error","details","className","Button","variant","onClick","navigator","clipboard","writeText","CopyIcon","propTypes","PropTypes","hoursToExpiration","imageCreatedAt","currentTime","Date","now","Math","floor","createdAtAsString","isNaN","parse","_createdAtAsString$sp","split","_createdAtAsString$sp2","_slicedToArray","dateValues","timeValues","datetimeString","concat","convertStringToDate","ImageBuildStatus","imageId","isImagesTableRow","imageStatus","imageRegion","image","useSelector","state","selectImageById","remainingHours","AWS_S3_EXPIRATION_TIME_IN_HOURS","created_at","messages","failure","icon","ExclamationCircleIcon","text","priority","pending","PendingIcon","running","InProgressIcon","building","uploading","registering","success","CheckCircleIcon","expiring","ExclamationTriangleIcon","expired","OffIcon","hasFailedClone","imageType","uploadType","imageStatuses","selectImageStatusesById","id","includes","push","filteredImageStatuses","filter","undefined","length","reduce","prev","current","map","message","key","Flex","Popover","position","minWidth","bodyContent","Alert","title","isInline","isPlain","Panel","isScrollable","PanelMain","maxHeight","region","Row","Tbody","Tr","Td","dataLabel","ClipboardCopy","hoverTip","clickTip","ami","ClonesTable","_ref2","composeId","parentCompose","selectComposeById","clones","selectClonesById","TableComposable","Thead","Th","clone","sourceNotFoundPopover","component","target","ExternalLinkAltIcon","iconPosition","href","AWSDetails","_compose$request$imag","_compose$request$imag2","compose","composes","byId","DescriptionList","isHorizontal","isCompact","DescriptionListGroup","DescriptionListTerm","DescriptionListDescription","ouiaId","request","image_requests","upload_request","options","share_with_sources","_useGetAWSSourcesQuer","useGetAWSSourcesQuery","sources","data","isSuccess","sourcename","find","source","Spinner","isSVG","size","getAWSSourceName","share_with_accounts","AWSIdentifiers","AzureDetails","_ref3","source_id","_useGetAzureSourcesQu","useGetAzureSourcesQuery","getAzureSourceName","resource_group","AzureIdentifiers","_ref4","_compose$image_status","_compose$image_status2","image_status","upload_status","image_name","GCPDetails","_ref5","_compose$image_status3","sharedWith","project_id","parseGCPSharedWith","GCPIdentifiers","_ref6","_compose$image_status4","_compose$image_status5","ImageDetails","_ref7","_compose$image_status6","_compose$image_status7","_compose$image_status8","_compose$image_status9","_compose$image_status10","_compose$image_status11","_compose$image_status12","_compose$image_status13","_compose$image_status14","_compose$image_status15","_compose$image_status16","_compose$image_status17","_compose$image_status18","_compose$image_status19","_compose$image_status20","_compose$image_status21","_compose$image_status22","_compose$image_status23","image_type","type","Label","selectRegions","createSelector","selectImagesById","images","filteredImages","regions","forEach","ImageLinkRegion","url","RegionsPopover","_compose$share_with_s","isBeta","useGetEnvironment","listItems","useMemo","_step","_iterator","_createForOfIteratorHelper","Object","entries","sort","s","n","done","_step$value","value","e","f","createdInPreview","headerContent","Divider","BetaLabel","ImageLinkDirect","isExpired","isInClonesTable","navigate","useNavigate","uploadStatus","_image$uploadOptions","uploadOptions","tenant_id","subscription_id","maxWidth","TextContent","Text","TextVariants","p","resolveRelPath","vsphere","ProvisioningLink","_image$share_with_sou","_useState","useState","_useState2","wizardOpen","openWizard","_useLoadModule","useLoadModule","appName","scope","module","_useLoadModule2","ProvisioningWizard","appendTo","document","querySelector","MODAL_ANCHOR","provider","getImageProvider","Suspense","fallback","Modal","isOpen","modalVariant","ModalVariant","large","hasNoBodyWrapper","showClose","onClose","imageName","architecture","sourceIDs","accountIDs","sourceId","ImageLink","_scalprum$config","_useChrome","useChrome","chromeInitialized","initialized","getEnvironment","azureFeatureFlag","useFlag","gcpFeatureFlag","scalprum","useScalprum","hasProvisioning","config","provisioning","provisioningLinkEnabled","isRequired","Release","props","_releaseOptions","releaseOptions","_defineProperty","RHEL_8","RHEL_9","release","Target","targetOptions","aws","azure","gcp","fetchComposeStatus","_asyncToGenerator","_regeneratorRuntime","_callee","dispatch","_context","next","api","getComposeStatus","sent","composeUpdatedStatus","stop","_x","apply","arguments","fetchComposes","limit","offset","_callee2","composeRequest","_context2","getComposes","composeAdded","insert","composesUpdatedCount","count","meta","fetchClones","_x2","fetchCloneStatus","_callee3","_context3","getCloneStatus","cloneUpdatedStatus","_x3","_callee4","_request$data","_context4","getClones","cloneAdded","parent","_x4","ImagesTable","page","setPage","_useState3","_useState4","perPage","setPerPage","_useState5","_useState6","expandedComposeIds","setExpandedComposeIds","isExpanded","useDispatch","useEffect","intervalId","setInterval","clearInterval","onSetPage","_","allIds","onPerPageSelect","actions","encodeURIComponent","JSON","stringify","download","awsActions","isDisabled","_toConsumableArray","itemsStartInclusive","itemsEndExclusive","EmptyState","EmptyStateVariant","EmptyStateIcon","PlusCircleIcon","Title","headingLevel","EmptyStateBody","Link","to","EmptyStateSecondaryActions","DocumentationButton","Toolbar","ToolbarContent","ToolbarItem","align","default","Pagination","itemCount","widgetId","slice","rowIndex","expand","onToggle","isExpanding","handleToggle","ts","date","ms","Intl","DateTimeFormat","month","day","year","format","timestampToDisplayString","distribution","ActionsColumn","items","colSpan","ExpandableRowContent","PaginationVariant","bottom","composesGet","composeGetStatus","LandingPage","showBetaAlert","setShowBetaAlert","showHint","setShowHint","quickStarts","activateQuickstart","qs","PageHeader","PageHeaderTitle","HelpIcon","OpenSourceBadge","repositoriesURL","actionClose","AlertActionCloseButton","actionLinks","ExpandableSection","toggleText","displaySize","ArrowRightIcon","Outlet","isProd"],"sourceRoot":""}