{"version":3,"sources":["webpack:///./src/PresentationalComponents/CreateImageWizard/WizardStepImageOutput.scss","webpack:///./src/PresentationalComponents/CreateImageWizard/WizardStepUploadAzure.scss","webpack:///./src/PresentationalComponents/CreateImageWizard/WizardStepReview.scss","webpack:///./src/SmartComponents/CreateImageWizard/CreateImageWizard.scss","webpack:///./src/PresentationalComponents/CreateImageWizard/WizardStepImageOutput.scss?1601","webpack:///./src/PresentationalComponents/CreateImageWizard/WizardStepUploadAzure.scss?b0ba","webpack:///./src/PresentationalComponents/CreateImageWizard/WizardStepReview.scss?a1e2","webpack:///./src/SmartComponents/CreateImageWizard/CreateImageWizard.scss?837f","webpack:///./src/PresentationalComponents/CreateImageWizard/WizardStepImageOutput.js","webpack:///./src/PresentationalComponents/CreateImageWizard/WizardStepUploadAWS.js","webpack:///./src/PresentationalComponents/CreateImageWizard/WizardStepUploadAzure.js","webpack:///./src/PresentationalComponents/CreateImageWizard/WizardStepPackages.js","webpack:///./src/PresentationalComponents/CreateImageWizard/WizardStepUploadGoogle.js","webpack:///./src/PresentationalComponents/CreateImageWizard/WizardStepRegistration.js","webpack:///./src/PresentationalComponents/CreateImageWizard/WizardStepReview.js","webpack:///./src/SmartComponents/CreateImageWizard/CreateImageWizard.js"],"names":["exports","___CSS_LOADER_API_IMPORT___","push","module","i","content","options","transform","undefined","update","locals","hot","accept","newContent","a","b","key","idx","Error","dispose","WizardStepImageOutput","props","Form","Title","headingLevel","size","FormGroup","isRequired","label","fieldId","FormSelect","value","onChange","setRelease","aria-label","id","data-testid","map","option","FormSelectOption","className","Tile","title","icon","src","onClick","toggleUploadDestination","isSelected","uploadDestinations","aws","isStacked","isDisplayLarge","azure","google","propTypes","toggleUploadAWS","PropTypes","func","object","string","WizardStepUploadAWS","helperTextInvalid","errors","validated","TextInput","uploadAWS","share_with_accounts","type","setUploadOptions","Object","assign","WizardStepUploadAzure","TextContent","Text","href","target","rel","uploadAzure","tenant_id","subscription_id","resource_group","WizardStepPackages","availableOptionsActions","Button","handlePackagesSearch","release","DualListSelector","isSearchable","availableOptions","packagesAvailableComponents","chosenOptions","packagesFilteredComponents","addSelected","packageListChange","removeSelected","addAll","removeAll","onAvailableOptionsSearchInputChanged","setPackagesSearchName","onChosenOptionsSearchInputChanged","handlePackagesFilter","filterOption","arrayOf","WizardStepUploadGoogle","accountTypePopover","Popover","hasAutoWidth","maxWidth","headerContent","bodyContent","TextList","TextListItem","aria-describedby","labelIcon","Radio","setGoogleAccountType","isChecked","uploadGoogle","accountType","test-id","user","serviceAccount","group","domain","WizardStepRegistration","name","subscribeNow","setSubscribeNow","isDisabled","subscription","organization","setSubscription","bool","WizardStepReview","awsReview","component","TextListVariants","dl","TextListItemVariants","dt","uploadAWSErrors","dd","googleReview","subscriptionReview","subscriptionErrors","repeat","length","keys","Alert","variant","isInline","TextVariants","small","h3","CreateImageWizard","bind","mapPackagesToComponent","onStep","onSave","onClose","validate","validateUploadAmazon","validateSubscription","state","arch","imageType","insights","uploadAzureErrors","uploadGoogleErrors","packagesSelectedComponents","packagesSelectedNames","packagesSearchName","chrome","auth","getUser","this","setState","Number","identity","internal","org_id","step","forEach","provider","validateUploadAzure","share","isNaN","subscriptionId","prevState","uploadOptions","_","event","packages","pack","summary","children","api","getPackages","then","response","packageComponents","data","filter","filteredPackages","mapComponentToPackageName","includes","newAvailablePackages","newChosenPackages","chosenNames","requests","request","distribution","image_requests","architecture","image_type","upload_requests","customizations","composeRequests","composeRequest","composeImage","compose","image_status","status","updateCompose","Promise","all","history","StepImageOutput","StepUploadAWS","StepUploadAzure","StepUploadGoogle","uploadDestinationSteps","StepTargetEnv","steps","nextButtonText","Fragment","Wizard","onNext","onGoToStep","isOpen","Component","connect","dispatch","actions","withRouter"],"mappings":"8EAEAA,EADkC,EAAQ,EAChCC,EAA4B,IAE9BC,KAAK,CAACC,EAAOC,EAAI,ypBAA0pB,KAEnrBD,EAAOH,QAAUA,G,qBCJjBA,EADkC,EAAQ,EAChCC,EAA4B,IAE9BC,KAAK,CAACC,EAAOC,EAAI,uOAAwO,KAEjQD,EAAOH,QAAUA,G,qBCJjBA,EADkC,EAAQ,EAChCC,EAA4B,IAE9BC,KAAK,CAACC,EAAOC,EAAI,kUAAmU,KAE5VD,EAAOH,QAAUA,G,qBCJjBA,EADkC,EAAQ,EAChCC,EAA4B,IAE9BC,KAAK,CAACC,EAAOC,EAAI,8CAA+C,KAExED,EAAOH,QAAUA,G,oBCLjB,IAAIK,EAAU,EAAQ,KAEA,iBAAZA,IAAsBA,EAAU,CAAC,CAACF,EAAOC,EAAIC,EAAS,MAOhE,IAAIC,EAAU,CAAC,KAAM,EAErB,eAPIC,EAQJ,gBAAqBC,GAEjBC,EAAS,EAAQ,EAAR,CAAgEJ,EAASC,GAEnFD,EAAQK,SAAQP,EAAOH,QAAUK,EAAQK,QAG3CP,EAAOQ,IAAIC,OAAO,KAA6H,WAC9I,IAAIC,EAAa,EAAQ,KAiBzB,GAfyB,iBAAfA,IAAyBA,EAAa,CAAC,CAACV,EAAOC,EAAIS,EAAY,OAE3D,SAASC,EAAGC,GACzB,IAAIC,EAAKC,EAAM,EAEf,IAAID,KAAOF,EAAG,CACb,IAAIC,GAAKD,EAAEE,KAASD,EAAEC,GAAM,OAAO,EACnCC,IAGD,IAAID,KAAOD,EAAGE,IAEd,OAAe,IAARA,EAVK,CAWXZ,EAAQK,OAAQG,EAAWH,QAEjB,MAAM,IAAIQ,MAAM,uDAE5BT,EAAOI,MAGRV,EAAOQ,IAAIQ,SAAQ,WAAaV,Q,oBC1CjC,IAAIJ,EAAU,EAAQ,KAEA,iBAAZA,IAAsBA,EAAU,CAAC,CAACF,EAAOC,EAAIC,EAAS,MAOhE,IAAIC,EAAU,CAAC,KAAM,EAErB,eAPIC,EAQJ,gBAAqBC,GAEjBC,EAAS,EAAQ,EAAR,CAAgEJ,EAASC,GAEnFD,EAAQK,SAAQP,EAAOH,QAAUK,EAAQK,QAG3CP,EAAOQ,IAAIC,OAAO,KAA6H,WAC9I,IAAIC,EAAa,EAAQ,KAiBzB,GAfyB,iBAAfA,IAAyBA,EAAa,CAAC,CAACV,EAAOC,EAAIS,EAAY,OAE3D,SAASC,EAAGC,GACzB,IAAIC,EAAKC,EAAM,EAEf,IAAID,KAAOF,EAAG,CACb,IAAIC,GAAKD,EAAEE,KAASD,EAAEC,GAAM,OAAO,EACnCC,IAGD,IAAID,KAAOD,EAAGE,IAEd,OAAe,IAARA,EAVK,CAWXZ,EAAQK,OAAQG,EAAWH,QAEjB,MAAM,IAAIQ,MAAM,uDAE5BT,EAAOI,MAGRV,EAAOQ,IAAIQ,SAAQ,WAAaV,Q,oBC1CjC,IAAIJ,EAAU,EAAQ,KAEA,iBAAZA,IAAsBA,EAAU,CAAC,CAACF,EAAOC,EAAIC,EAAS,MAOhE,IAAIC,EAAU,CAAC,KAAM,EAErB,eAPIC,EAQJ,gBAAqBC,GAEjBC,EAAS,EAAQ,EAAR,CAAgEJ,EAASC,GAEnFD,EAAQK,SAAQP,EAAOH,QAAUK,EAAQK,QAG3CP,EAAOQ,IAAIC,OAAO,KAAwH,WACzI,IAAIC,EAAa,EAAQ,KAiBzB,GAfyB,iBAAfA,IAAyBA,EAAa,CAAC,CAACV,EAAOC,EAAIS,EAAY,OAE3D,SAASC,EAAGC,GACzB,IAAIC,EAAKC,EAAM,EAEf,IAAID,KAAOF,EAAG,CACb,IAAIC,GAAKD,EAAEE,KAASD,EAAEC,GAAM,OAAO,EACnCC,IAGD,IAAID,KAAOD,EAAGE,IAEd,OAAe,IAARA,EAVK,CAWXZ,EAAQK,OAAQG,EAAWH,QAEjB,MAAM,IAAIQ,MAAM,uDAE5BT,EAAOI,MAGRV,EAAOQ,IAAIQ,SAAQ,WAAaV,Q,oBC1CjC,IAAIJ,EAAU,EAAQ,KAEA,iBAAZA,IAAsBA,EAAU,CAAC,CAACF,EAAOC,EAAIC,EAAS,MAOhE,IAAIC,EAAU,CAAC,KAAM,EAErB,eAPIC,EAQJ,gBAAqBC,GAEjBC,EAAS,EAAQ,EAAR,CAAgEJ,EAASC,GAEnFD,EAAQK,SAAQP,EAAOH,QAAUK,EAAQK,QAG3CP,EAAOQ,IAAIC,OAAO,KAAyH,WAC1I,IAAIC,EAAa,EAAQ,KAiBzB,GAfyB,iBAAfA,IAAyBA,EAAa,CAAC,CAACV,EAAOC,EAAIS,EAAY,OAE3D,SAASC,EAAGC,GACzB,IAAIC,EAAKC,EAAM,EAEf,IAAID,KAAOF,EAAG,CACb,IAAIC,GAAKD,EAAEE,KAASD,EAAEC,GAAM,OAAO,EACnCC,IAGD,IAAID,KAAOD,EAAGE,IAEd,OAAe,IAARA,EAVK,CAWXZ,EAAQK,OAAQG,EAAWH,QAEjB,MAAM,IAAIQ,MAAM,uDAE5BT,EAAOI,MAGRV,EAAOQ,IAAIQ,SAAQ,WAAaV,Q,mWCpC3BW,G,OAAwB,SAACC,GAM3B,OACI,oCACI,kBAACC,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAAOC,aAAa,KAAKC,KAAK,MAA9B,gBACA,kBAACC,EAAA,EAAD,CAAWC,YAAU,EAACC,MAAM,UAAUC,QAAQ,kBAC1C,kBAACC,EAAA,EAAD,CAAYC,MAAQV,EAAMU,MAAQC,SAAW,SAAAD,GAAK,OAAIV,EAAMY,WAAWF,IAASJ,YAAU,EACtFO,aAAW,uBAAuBC,GAAG,iBAAiBC,cAAY,kBAX/D,CACnB,CAAEL,MAAO,SAAUH,MAAO,uCAC1B,CAAEG,MAAO,WAAYH,MAAO,oBAUKS,KAAI,SAAAC,GAAM,OAAI,kBAACC,EAAA,EAAD,CAAkBvB,IAAMsB,EAAOP,MAAQA,MAAQO,EAAOP,MAAQH,MAAQU,EAAOV,aAGpH,kBAACF,EAAA,EAAD,CAAWC,YAAU,EAACC,MAAM,4BAA4BQ,cAAY,iBAChE,yBAAKI,UAAU,SACX,kBAACC,EAAA,EAAD,CACID,UAAU,kBACVJ,cAAY,aACZM,MAAM,sBACNC,KAAO,yBACHH,UAAU,gBACVI,IAAM,iDACVC,QAAU,kBAAMxB,EAAMyB,wBAAwB,QAC9CC,WAAa1B,EAAM2B,mBAAmBC,IACtCC,WAAS,EACTC,gBAAc,IAClB,kBAACV,EAAA,EAAD,CACID,UAAU,kBACVJ,cAAY,eACZM,MAAM,kBACNC,KAAO,yBACHH,UAAU,gBACVI,IAAM,mEACVC,QAAU,kBAAMxB,EAAMyB,wBAAwB,UAC9CC,WAAa1B,EAAM2B,mBAAmBI,MACtCF,WAAS,EACTC,gBAAc,IAClB,kBAACV,EAAA,EAAD,CACID,UAAU,OACVJ,cAAY,gBACZM,MAAM,wBACNC,KAAO,yBACHH,UAAU,gBACVI,IAAM,gEACVC,QAAU,kBAAMxB,EAAMyB,wBAAwB,WAC9CC,WAAa1B,EAAM2B,mBAAmBK,OACtCH,WAAS,EACTC,gBAAc,UAQ1C/B,EAAsBkC,UAAY,CAC9BC,gBAAiBC,IAAUC,KAC3BT,mBAAoBQ,IAAUE,OAC9BzB,WAAYuB,IAAUC,KACtB1B,MAAOyB,IAAUG,OACjBb,wBAAyBU,IAAUC,MAGxBrC,Q,SCpETwC,EAAsB,SAACvC,GACzB,OACI,kBAACC,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAAOC,aAAa,KAAKC,KAAK,MAA9B,sCACA,yGAC2E,6BAD3E,gEAE6D,6BAF7D,6JAMA,kBAACC,EAAA,EAAD,CAAWC,YAAU,EAACC,MAAM,iBAAiBC,QAAQ,iBACjDgC,kBAAqBxC,EAAMyC,OAAO,mBAAqBzC,EAAMyC,OAAO,kBAAkB/B,OAAU,GAChGgC,UAAa1C,EAAMyC,OAAO,kBAAqB,QAAY,WAC3D,kBAACE,EAAA,EAAD,CAAWjC,MAAQV,EAAM4C,UAAU3D,QAAQ4D,qBAAuB,GAC9DC,KAAK,OAAOjC,aAAW,iBAAiBC,GAAG,iBAC3CC,cAAY,iBAAiBT,YAAU,EACvCK,SAAW,SAAAD,GAAK,OACZV,EAAM+C,iBAAiB,MAAOC,OAAOC,OAAOjD,EAAM4C,UAAU3D,QAAS,CAAE4D,oBAAqB,CAAEnC,YAMtH6B,EAAoBN,UAAY,CAC5Bc,iBAAkBZ,IAAUC,KAC5BQ,UAAWT,IAAUE,OACrBI,OAAQN,IAAUE,QAGPE,Q,kBC1BTW,G,OAAwB,SAAClD,GAC3B,OACI,oCACI,kBAACmD,EAAA,EAAD,CAAahC,UAAU,qBACnB,kBAACjB,EAAA,EAAD,CAAOC,aAAa,MAApB,wCACA,kBAACiD,EAAA,EAAD,yEAGA,kBAAClD,EAAA,EAAD,CAAOC,aAAa,MAApB,qBACA,kBAACiD,EAAA,EAAD,iMAEqH,6BAFrH,wDAGiD,6BAC7C,uBAAGC,KAAK,4FACJ,+CAGR,uBAAGA,KAAK,kQAEgEC,OAAO,SAASC,IAAI,uBAF5F,oCAG6B,kBAAC,IAAD,QAIjC,kBAACrD,EAAA,EAAD,CAAOC,aAAa,MAApB,eACA,kBAACiD,EAAA,EAAD,2FAGA,kBAACnD,EAAA,EAAD,KACI,kBAACI,EAAA,EAAD,CAAWC,YAAU,EAACC,MAAM,YAAYC,QAAQ,kBAC5CgC,kBAAqBxC,EAAMyC,OAAO,oBAAsBzC,EAAMyC,OAAO,mBAAmB/B,OAAU,GAClGgC,UAAa1C,EAAMyC,OAAO,mBAAsB,QAAY,WAC5D,kBAACE,EAAA,EAAD,CAAWjC,MAAQV,EAAMwD,YAAYvE,QAAQwE,WAAa,GACtDX,KAAK,OAAOjC,aAAW,kBAAkBC,GAAG,kBAC5CC,cAAY,kBAAkBT,YAAU,EACxCK,SAAW,SAAAD,GAAK,OACZV,EAAM+C,iBAAiB,QAASC,OAAOC,OAAOjD,EAAMwD,YAAYvE,QAAS,CAAEwE,UAAW/C,SAElG,kBAACL,EAAA,EAAD,CAAWC,YAAU,EAACC,MAAM,kBAAkBC,QAAQ,wBAClDgC,kBAAqBxC,EAAMyC,OAAO,0BACzBzC,EAAMyC,OAAO,yBAAyB/B,OAAU,GACzDgC,UAAa1C,EAAMyC,OAAO,yBAA4B,QAAY,WAClE,kBAACE,EAAA,EAAD,CAAWjC,MAAQV,EAAMwD,YAAYvE,QAAQyE,iBAAmB,GAC5DZ,KAAK,OAAOjC,aAAW,wBAAwBC,GAAG,wBAClDC,cAAY,wBAAwBT,YAAU,EAC9CK,SAAW,SAAAD,GAAK,OACZV,EAAM+C,iBAAiB,QAASC,OAAOC,OAAOjD,EAAMwD,YAAYvE,QAAS,CAAEyE,gBAAiBhD,SAExG,kBAACL,EAAA,EAAD,CAAWC,YAAU,EAACC,MAAM,iBAAiBC,QAAQ,uBACjDgC,kBAAqBxC,EAAMyC,OAAO,yBACzBzC,EAAMyC,OAAO,wBAAwB/B,OAAU,GACxDgC,UAAa1C,EAAMyC,OAAO,wBAA2B,QAAY,WACjE,kBAACE,EAAA,EAAD,CAAWjC,MAAQV,EAAMwD,YAAYvE,QAAQ0E,gBAAkB,GAC3Db,KAAK,OAAOjC,aAAW,uBAAuBC,GAAG,uBACjDC,cAAY,uBAAuBT,YAAU,EAC7CK,SAAW,SAAAD,GAAK,OACZV,EAAM+C,iBAAiB,QAASC,OAAOC,OAAOjD,EAAMwD,YAAYvE,QAAS,CAAE0E,eAAgBjD,aAOvHwC,EAAsBjB,UAAY,CAC9Bc,iBAAkBZ,IAAUC,KAC5BoB,YAAarB,IAAUE,OACvBI,OAAQN,IAAUE,QAGPa,Q,iBCxETU,EAAqB,SAAC5D,GACxB,IAAM6D,EAA0B,CAC5B,kBAACC,EAAA,EAAD,CACIjD,aAAW,uCACXlB,IAAI,wBACJ6B,QAAUxB,EAAM+D,sBAHpB,WAQJ,OACI,oCACI,kBAACZ,EAAA,EAAD,KACI,kBAACjD,EAAA,EAAD,CAAOC,aAAa,KAAKC,KAAK,MAA9B,uBACA,kBAACgD,EAAA,EAAD,mDAAiD,gCAASpD,EAAMgE,SAAhE,WAEJ,kBAACC,EAAA,EAAD,CACI9C,UAAU,aACV+C,cAAY,EACZL,wBAA0BA,EAC1BM,iBAAmBnE,EAAMoE,4BACzBC,cAAgBrE,EAAMsE,2BACtBC,YAAcvE,EAAMwE,kBACpBC,eAAiBzE,EAAMwE,kBACvBE,OAAS1E,EAAMwE,kBACfG,UAAa3E,EAAMwE,kBACnBI,qCAAuC5E,EAAM6E,sBAC7CC,kCAAoC9E,EAAM+E,qBAC1CC,aAAe,kBAAM,GACrBlE,GAAG,8BAKnB8C,EAAmB3B,UAAY,CAC3BuC,kBAAmBrC,IAAUC,KAC7B4B,QAAS7B,IAAUG,OACnB8B,4BAA6BjC,IAAU8C,QAAQ9C,IAAUE,QACzDiC,2BAA4BnC,IAAU8C,QAAQ9C,IAAUE,QACxD0B,qBAAsB5B,IAAUC,KAChC2C,qBAAsB5C,IAAUC,KAChCyC,sBAAuB1C,IAAUC,MAGtBwB,Q,+CC3CTsB,GAAyB,SAAClF,GAC5B,IAAMmF,EACF,kBAACC,EAAA,EAAD,CACIC,cAAY,EACZC,SAAS,QACTC,cAAgB,sBAChBC,YAAc,kBAACrC,EAAA,EAAD,KACV,kBAACC,EAAA,EAAD,wEACA,kBAACqC,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,KACI,mDADJ,0HAE+D,iDAF/D,KAIA,kBAACA,EAAA,EAAD,KACI,oDADJ,gGAEqC,mEAFrC,KAIA,kBAACA,EAAA,EAAD,KACI,iDADJ,4FAEgC,oDAFhC,KAIA,kBAACA,EAAA,EAAD,KACI,kFADJ,kMAGmE,+CAHnE,QAOR,4BACI5C,KAAK,SACLjC,aAAW,eACX8E,mBAAiB,sBACjBxE,UAAU,+BACV,kBAAC,KAAD,QAKZ,OACI,kBAAClB,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAAOC,aAAa,KAAKC,KAAK,MAA9B,8CACA,kGACoE,6BADpE,8DAE2D,6BAF3D,6JAMA,kBAACC,EAAA,EAAD,CAAWC,YAAU,EAACC,MAAM,OAAOqF,UAAYT,EAAqB3E,QAAQ,uBACxE,kBAACqF,GAAA,EAAD,CACIlF,SAAWX,EAAM8F,qBACjBC,UAA+C,kBAAnC/F,EAAMgG,aAAaC,YAC/B1F,MAAM,iBACNO,GAAG,uBACHoF,WAAA,EACAxF,MAAM,kBACV,kBAACmF,GAAA,EAAD,CACIlF,SAAWX,EAAM8F,qBACjBC,UAA+C,mBAAnC/F,EAAMgG,aAAaC,YAC/B1F,MAAM,kBACNO,GAAG,wBACHJ,MAAM,mBACV,kBAACmF,GAAA,EAAD,CACIlF,SAAWX,EAAM8F,qBACjBC,UAA+C,gBAAnC/F,EAAMgG,aAAaC,YAC/B1F,MAAM,eACNO,GAAG,qBACHJ,MAAM,gBACV,kBAACmF,GAAA,EAAD,CACIlF,SAAWX,EAAM8F,qBACjBC,UAA+C,WAAnC/F,EAAMgG,aAAaC,YAC/B1F,MAAM,mDACNO,GAAG,eACHJ,MAAM,YAEsB,kBAAnCV,EAAMgG,aAAaC,aAChB,kBAAC5F,EAAA,EAAD,CAAWC,YAAU,EAACC,MAAM,gBAAgBC,QAAQ,QAChD,kBAACmC,EAAA,EAAD,CACIjC,MAAQV,EAAMgG,aAAa/G,QAAQ4D,oBAAoB,IACnD7C,EAAMgG,aAAa/G,QAAQ4D,oBAAoB,GAAGsD,MAClD,GACJrD,KAAK,OAAOjC,aAAW,uBAAuBC,GAAG,oBACjDC,cAAY,oBAAoBT,YAAU,EAC1CK,SAAW,SAAAD,GAAK,OAAIV,EAAM+C,iBACtB,SACAC,OAAOC,OAAOjD,EAAMgG,aAAa/G,QAAS,CAAE4D,oBAAqB,CAAC,CAAEsD,KAAMzF,WAItD,mBAAnCV,EAAMgG,aAAaC,aAChB,kBAAC5F,EAAA,EAAD,CAAWC,YAAU,EAACC,MAAM,gBAAgBC,QAAQ,mBAChD,kBAACmC,EAAA,EAAD,CACIjC,MAAQV,EAAMgG,aAAa/G,QAAQ4D,oBAAoB,IACnD7C,EAAMgG,aAAa/G,QAAQ4D,oBAAoB,GAAGuD,gBAClD,GACJtD,KAAK,OAAOjC,aAAW,uBAAuBC,GAAG,+BACjDC,cAAY,+BAA+BT,YAAU,EACrDK,SAAW,SAAAD,GAAK,OAAIV,EAAM+C,iBACtB,SACAC,OAAOC,OAAOjD,EAAMgG,aAAa/G,QAAS,CAAE4D,oBAAqB,CAAC,CAAEuD,eAAgB1F,WAIhE,gBAAnCV,EAAMgG,aAAaC,aAChB,kBAAC5F,EAAA,EAAD,CAAWC,YAAU,EAACC,MAAM,gBAAgBC,QAAQ,SAChD,kBAACmC,EAAA,EAAD,CACIjC,MAAQV,EAAMgG,aAAa/G,QAAQ4D,oBAAoB,IACnD7C,EAAMgG,aAAa/G,QAAQ4D,oBAAoB,GAAGwD,OAClD,GACJvD,KAAK,OAAOjC,aAAW,uBAAuBC,GAAG,qBACjDC,cAAY,qBAAqBT,YAAU,EAC3CK,SAAW,SAAAD,GAAK,OAAIV,EAAM+C,iBACtB,SACAC,OAAOC,OAAOjD,EAAMgG,aAAa/G,QAAS,CAAE4D,oBAAqB,CAAC,CAAEwD,MAAO3F,WAIvD,WAAnCV,EAAMgG,aAAaC,aAChB,kBAAC5F,EAAA,EAAD,CAAWC,YAAU,EAACC,MAAM,SAASC,QAAQ,UACzC,kBAACmC,EAAA,EAAD,CACIjC,MAAQV,EAAMgG,aAAa/G,QAAQ4D,oBAAoB,IACnD7C,EAAMgG,aAAa/G,QAAQ4D,oBAAoB,GAAGyD,QAClD,GACJxD,KAAK,OAAOjC,aAAW,gBAAgBC,GAAG,sBAC1CC,cAAY,sBAAsBT,YAAU,EAC5CK,SAAW,SAAAD,GAAK,OAAIV,EAAM+C,iBACtB,SACAC,OAAOC,OAAOjD,EAAMgG,aAAa/G,QAAS,CAAE4D,oBAAqB,CAAC,CAAEyD,OAAQ5F,aAQxGwE,GAAuBjD,UAAY,CAC/Bc,iBAAkBZ,IAAUC,KAC5B0D,qBAAsB3D,IAAUC,KAChC4D,aAAc7D,IAAUE,OACxBI,OAAQN,IAAUE,QAGP6C,UC9ITqB,GAAyB,SAACvG,GAC5B,OACI,kBAACC,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAAOC,aAAa,KAAKC,KAAK,MAA9B,gBACA,kBAACC,EAAA,EAAD,CAAWC,YAAU,EAACC,MAAM,uBACxB,kBAACsF,GAAA,EAAD,CAAOW,KAAK,sBAAsBT,UAAY/F,EAAMyG,aAAe3F,GAAG,sBAClEP,MAAM,6DACNI,SAAW,kBAAMX,EAAM0G,iBAAgB,IACvC3F,cAAY,8BAChB,kBAAC8E,GAAA,EAAD,CAAOW,KAAK,wBAAwBT,WAAa/F,EAAMyG,aACnDlG,MAAM,4BAA4BO,GAAG,wBACrCH,SAAW,kBAAMX,EAAM0G,iBAAgB,IACvC3F,cAAY,iCAElBf,EAAMyG,cACN,oCACI,kBAACpG,EAAA,EAAD,CAAWE,MAAM,kBAAkBC,QAAQ,6BACvC,kBAACmC,EAAA,EAAD,CAAWgE,YAAU,EAACjG,MAAQV,EAAM4G,aAAaC,cAAgB,GAAK/D,KAAK,OACvEhC,GAAG,4BAA4BD,aAAW,+BAC1CE,cAAY,qBAEpB,kBAACV,EAAA,EAAD,CAAWC,YAAU,EAACC,MAAM,iBAAiBC,QAAQ,0BACjDgC,kBAAqBxC,EAAMyC,OAAO,4BAA8BzC,EAAMyC,OAAO,2BAA2B/B,OAAU,GAClHgC,UAAa1C,EAAMyC,OAAO,2BAA8B,QAAY,WACpE,kBAACE,EAAA,EAAD,CAAWjC,MAAQV,EAAM4G,aAAa,mBAAqB,GAAK9D,KAAK,WACjE/B,cAAY,0BAA0BT,YAAU,EAChDQ,GAAG,0BAA0BD,aAAW,8BACxCF,SAAW,SAAAD,GAAK,OAAIV,EAAM8G,gBAAgB9D,OAAOC,OAAOjD,EAAM4G,aAAc,CAAE,iBAAkBlG,YAO1H6F,GAAuBtE,UAAY,CAC/B6E,gBAAiB3E,IAAUC,KAC3BsE,gBAAiBvE,IAAUC,KAC3BwE,aAAczE,IAAUE,OACxBoE,aAActE,IAAU4E,KACxBtE,OAAQN,IAAUE,QAGPkE,U,oBCnCTS,I,OAAmB,SAAChH,GACtB,IAKMiH,EACF,oCACI,kBAAC7D,EAAA,EAAD,CAAMtC,GAAG,sBAAT,uBACA,kBAAC2E,EAAA,EAAD,CAAUyB,UAAYC,IAAiBC,GAAKrG,cAAY,2BACpD,kBAAC2E,EAAA,EAAD,CAAcwB,UAAYG,IAAqBC,IAA/C,cACCtH,EAAMuH,gBAAgB,kBACnB,kBAAC7B,EAAA,EAAD,CAAcwB,UAAYG,IAAqBG,IAC3C,kBAAC,KAAD,CAAuBrG,UAAU,UADrC,IACkDnB,EAAMuH,gBAAgB,kBAAkB7G,OAG1F,kBAACgF,EAAA,EAAD,CAAcwB,UAAYG,IAAqBG,IAAMxH,EAAM4C,UAAU3D,QAAQ4D,oBAAoB,MAM3G4E,EACF,oCACI,kBAACrE,EAAA,EAAD,CAAMtC,GAAG,sBAAT,yBACA,kBAAC2E,EAAA,EAAD,CAAUyB,UAAYC,IAAiBC,GAAKrG,cAAY,8BAChB,kBAAnCf,EAAMgG,aAAaC,aAChB,oCACI,kBAACP,EAAA,EAAD,CAAcwB,UAAYG,IAAqBC,IAA/C,kBACA,kBAAC5B,EAAA,EAAD,CAAcwB,UAAYG,IAAqBG,IAAMxH,EAAMgG,aAAa/G,QAAQ4D,oBAAoB,IAChG7C,EAAMgG,aAAa/G,QAAQ4D,oBAAoB,GAAGsD,MAClD,KAIwB,mBAAnCnG,EAAMgG,aAAaC,aAChB,oCACI,kBAACP,EAAA,EAAD,CAAcwB,UAAYG,IAAqBC,IAA/C,mBACA,kBAAC5B,EAAA,EAAD,CAAcwB,UAAYG,IAAqBG,IAAMxH,EAAMgG,aAAa/G,QAAQ4D,oBAAoB,IAChG7C,EAAMgG,aAAa/G,QAAQ4D,oBAAoB,GAAGuD,gBAClD,KAIwB,gBAAnCpG,EAAMgG,aAAaC,aAChB,oCACI,kBAACP,EAAA,EAAD,CAAcwB,UAAYG,IAAqBC,IAA/C,gBACA,kBAAC5B,EAAA,EAAD,CAAcwB,UAAYG,IAAqBG,IAAMxH,EAAMgG,aAAa/G,QAAQ4D,oBAAoB,IAChG7C,EAAMgG,aAAa/G,QAAQ4D,oBAAoB,GAAGwD,OAClD,KAIwB,WAAnCrG,EAAMgG,aAAaC,aAChB,oCACI,kBAACP,EAAA,EAAD,CAAcwB,UAAYG,IAAqBC,IAA/C,UACA,kBAAC5B,EAAA,EAAD,CAAcwB,UAAYG,IAAqBG,IAAMxH,EAAMgG,aAAa/G,QAAQ4D,oBAAoB,IAChG7C,EAAMgG,aAAa/G,QAAQ4D,oBAAoB,GAAGyD,QAClD,OAQpBoB,EAAqB,kBAAChC,EAAA,EAAD,CAAcwB,UAAYG,IAAqBG,IAA/C,6BAiBzB,OAhBIxH,EAAMyG,eACNiB,EAAsB,oCAClB,kBAAChC,EAAA,EAAD,CAAcwB,UAAYG,IAAqBG,IAA/C,qCACA,kBAAC9B,EAAA,EAAD,CAAcwB,UAAYG,IAAqBC,IAA/C,kBACEtH,EAAM2H,mBAAmB,2BACvB,kBAACjC,EAAA,EAAD,CAAcwB,UAAYG,IAAqBG,IAC3C,kBAAC,KAAD,CAAuBrG,UAAU,UADrC,IACkDnB,EAAM2H,mBAAmB,2BAA2BjH,OAGtG,kBAACgF,EAAA,EAAD,CAAcwB,UAAYG,IAAqBG,GAAK1E,KAAK,YACpD,IAAI8E,OAAO5H,EAAM4G,aAAa,kBAAkBiB,WAO7D,qCACO7E,OAAO8E,KAAK9H,EAAMuH,iBAAiBM,OAAS,GAC5C7E,OAAO8E,KAAK9H,EAAM2H,oBAAoBE,OAAS,IAChD,kBAACE,GAAA,EAAD,CAAOC,QAAQ,SAAS7G,UAAU,aAAa8G,UAAQ,EAAC5G,MAAM,oCAChE,kBAACnB,EAAA,EAAD,CAAOC,aAAa,KAAKC,KAAK,MAA9B,UACA,kBAAC+C,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAAM8D,UAAYgB,IAAaC,OAA/B,mGAIA,kBAAC/E,EAAA,EAAD,CAAM8D,UAAYgB,IAAaE,IAA/B,gBACA,kBAAC3C,EAAA,EAAD,CAAUyB,UAAYC,IAAiBC,GAAKrG,cAAY,uBACpD,kBAAC2E,EAAA,EAAD,CAAcwB,UAAYG,IAAqBC,IAA/C,WACA,kBAAC5B,EAAA,EAAD,CAAcwB,UAAYG,IAAqBG,IAhGzC,CAClB,SAAU,sCACV,WAAY,mBA8FmExH,EAAMgE,WAE7E,kBAACZ,EAAA,EAAD,CAAM8D,UAAYgB,IAAaE,IAA/B,sBACCpI,EAAM2B,mBAAmBC,KAAOqF,EAChCjH,EAAM2B,mBAAmBK,QAAUyF,EACpC,kBAACrE,EAAA,EAAD,CAAM8D,UAAYgB,IAAaE,IAA/B,gBACA,kBAAC3C,EAAA,EAAD,CAAUyB,UAAYC,IAAiBC,GAAKrG,cAAY,6BACpD,kBAAC2E,EAAA,EAAD,CAAcwB,UAAYG,IAAqBC,IAA/C,gBACEI,OAOtBV,GAAiB/E,UAAY,CACzB+B,QAAS7B,IAAUG,OACnBM,UAAWT,IAAUE,OACrB2D,aAAc7D,IAAUE,OACxBV,mBAAoBQ,IAAUE,OAC9BuE,aAAczE,IAAUE,OACxBoE,aAActE,IAAU4E,KACxBQ,gBAAiBpF,IAAUE,OAC3BsF,mBAAoBxF,IAAUE,QAGnB2E,U,q1BCpHTqB,G,0LACF,WAAYrI,GAAO,0BACf,cAAMA,IAED+D,qBAAuB,EAAKA,qBAAqBuE,KAA1B,QAC5B,EAAKvD,qBAAuB,EAAKA,qBAAqBuD,KAA1B,QAC5B,EAAK9D,kBAAoB,EAAKA,kBAAkB8D,KAAvB,QACzB,EAAKC,uBAAyB,EAAKA,uBAAuBD,KAA5B,QAC9B,EAAK1H,WAAa,EAAKA,WAAW0H,KAAhB,QAClB,EAAKvF,iBAAmB,EAAKA,iBAAiBuF,KAAtB,QACxB,EAAKxB,gBAAkB,EAAKA,gBAAgBwB,KAArB,QACvB,EAAK5B,gBAAkB,EAAKA,gBAAgB4B,KAArB,QACvB,EAAKzD,sBAAwB,EAAKA,sBAAsByD,KAA3B,QAC7B,EAAKxC,qBAAuB,EAAKA,qBAAqBwC,KAA1B,QAC5B,EAAK7G,wBAA0B,EAAKA,wBAAwB6G,KAA7B,QAC/B,EAAKE,OAAS,EAAKA,OAAOF,KAAZ,QACd,EAAKG,OAAS,EAAKA,OAAOH,KAAZ,QACd,EAAKI,QAAU,EAAKA,QAAQJ,KAAb,QACf,EAAKK,SAAW,EAAKA,SAASL,KAAd,QAChB,EAAKM,qBAAuB,EAAKA,qBAAqBN,KAA1B,QAC5B,EAAKO,qBAAuB,EAAKA,qBAAqBP,KAA1B,QAE5B,EAAKQ,MAAQ,CACTC,KAAM,SACNC,UAAW,QACXhF,QAAS,SACTpB,UAAW,CACPE,KAAM,MACN7D,QAAS,CACL4D,oBAAqB,KAG7BW,YAAa,CACTV,KAAM,QACN7D,QAAS,CACLwE,UAAW,KACXC,gBAAiB,KACjBC,eAAgB,OAGxBqC,aAAc,CACVlD,KAAM,MACNmD,YAAa,gBACbhH,QAAS,CACL4D,oBAAqB,KAG7BlB,mBAAoB,CAChBC,KAAK,EACLG,OAAO,EACPC,QAAQ,GAEZ4E,aAAc,CACVC,aAAc,KACd,iBAAkB,KAClB,aAAc,+BACd,WAAY,0BACZoC,UAAU,GAEdxC,cAAc,EAEdc,gBAAiB,GACjB2B,kBAAmB,GACnBC,mBAAoB,GACpBxB,mBAAoB,GACpBvD,4BAA6B,GAC7BgF,2BAA4B,GAC5B9E,2BAA4B,GAC5B+E,sBAAuB,GACvBC,mBAAoB,IApET,E,kKAyEEL,SAASM,OAAOC,KAAKC,U,OAAlCtD,E,OACJuD,KAAKC,SAAS,CACV/C,aAAc,CACVC,aAAc+C,OAAOzD,EAAK0D,SAASC,SAASC,W,0HAKjDC,GACe,WAAdA,EAAKxD,MACLkD,KAAKf,a,iCAIF,WAEP3F,OAAO8E,KAAK4B,KAAKZ,MAAMnH,oBAAoBsI,SAAQ,SAAAC,GAC/C,OAAQA,GACJ,IAAK,MACD,EAAKtB,uBACL,MACJ,IAAK,QACD,EAAKuB,0BAUbT,KAAKZ,MAAMrC,aACXiD,KAAKb,uBAELa,KAAKC,SAAS,CAAEhC,mBAAoB,O,6CAKxC,IAAIJ,EAAkB,GAClB6C,EAAQV,KAAKZ,MAAMlG,UAAU3D,QAAQ4D,qBACpB,IAAjBuH,EAAMvC,QAAoC,KAApBuC,EAAM,GAAGvC,QAAiBwC,MAAMD,EAAM,OAC5D7C,EAAgB,kBACZ,CAAEhH,MAAO,iBAAkBG,MAAO,kCAG1CgJ,KAAKC,SAAS,CAAEpC,sB,4CAIhB,IAAI2B,EAAoB,GAEpBzF,EAAYiG,KAAKZ,MAAMtF,YAAYvE,QAAQwE,UAC7B,OAAdA,GAAoC,KAAdA,IACtByF,EAAkB,wBACd,CAAE3I,MAAO,kBAAmBG,MAAO,4BAG3C,IAAI4J,EAAiBZ,KAAKZ,MAAMtF,YAAYvE,QAAQyE,gBAC7B,OAAnB4G,GAA8C,KAAnBA,IAC3BpB,EAAkB,yBACd,CAAE3I,MAAO,wBAAyBG,MAAO,kCAGjD,IAAIiD,EAAiB+F,KAAKZ,MAAMtF,YAAYvE,QAAQ0E,eAC7B,OAAnBA,GAA8C,KAAnBA,IAC3BuF,EAAkB,wBACd,CAAE3I,MAAO,uBAAwBG,MAAO,mC,6CAMhD,IAAIiH,EAAqB,GACpB+B,KAAKZ,MAAMlC,aAAa,oBACzBe,EAAmB,2BACf,CAAEpH,MAAO,iBAAkBG,MAAO,wBAG1CgJ,KAAKC,SAAS,CAAEhC,yB,iCAGT3D,GACP0F,KAAKC,SAAS,CAAE3F,c,8CAGIkG,GACpBR,KAAKC,UAAS,SAAAY,GAAS,aAChBA,EADgB,CAEnB5I,mBAAoB,GAAF,GACX4I,EAAU5I,mBADC,OAEbuI,GAAYK,EAAU5I,mBAAmBuI,Y,uCAKrCA,EAAUM,GACvB,OAAQN,GACJ,IAAK,MACDR,KAAKC,SAAS,CACV/G,UAAW,CACPE,KAAMoH,EACNjL,QAASuL,KAGjB,MACJ,IAAK,QACDd,KAAKC,SAAS,CACVnG,YAAa,CACTV,KAAMoH,EACNjL,QAASuL,KAGjB,MACJ,IAAK,SACDd,KAAKC,SAAS,CACV3D,aAAc,GAAF,GACL0D,KAAKZ,MAAM9C,aADN,CAER/G,QAASuL,S,2CASRC,EAAGC,GACpBhB,KAAKC,SAAS,CACV3D,aAAc,GAAF,GACL0D,KAAKZ,MAAM9C,aADN,CAERC,YAAayE,EAAMpH,OAAO5C,Y,sCAKtB+F,GACZiD,KAAKC,SAAS,CAAElD,mB,sCAGJG,GACZ8C,KAAKC,SAAS,CAAE/C,gBAAgB8C,KAAKf,Y,4CAGnBW,GAClBI,KAAKC,SAAS,CAAEL,yB,6CAGGqB,GACnB,OAAOA,EAAS3J,KAAI,SAAC4J,GAAD,OAChB,kBAACzH,EAAA,EAAD,CAAaxD,IAAMiL,GACf,0BAAMzJ,UAAU,sCAAuCyJ,EAAKpE,MAC5D,+BAASoE,EAAKC,e,gDAMA3D,GACtB,OAAOA,EAAUlH,MAAM8K,SAAS,GAAG9K,MAAM8K,W,6CAGtB,WACnBC,KAAIC,YAAYtB,KAAKZ,MAAM9E,QAAS0F,KAAKZ,MAAMC,KAAMW,KAAKZ,MAAMQ,oBAAoB2B,MAAK,SAAAC,GACrF,IAAMC,EAAoB,EAAK5C,uBAAuB2C,EAASE,MAC/D,EAAKzB,SAAS,CACVvF,4BAA6B+G,S,2CAKpBE,GAAQ,WACnBC,EAAmB5B,KAAKZ,MAAMM,2BAA2BiC,QAAO,SAAAnE,GAElE,OADa,EAAKqE,0BAA0BrE,GAChCsE,SAASH,MAEzB3B,KAAKC,SAAS,CACVrF,2BAA4BgH,M,wCAIlBG,EAAsBC,GAAmB,WACjDC,EAAcD,EAAkB1K,KAAI,SAAAkG,GAAS,OAAI,EAAKqE,0BAA0BrE,MACtFwC,KAAKC,SAAS,CACVvF,4BAA6BqH,EAC7BrC,2BAA4BsC,EAC5BpH,2BAA4BoH,EAC5BrC,sBAAuBsC,M,+BAIrB,WACFC,EAAW,GACf,GAAIlC,KAAKZ,MAAMnH,mBAAmBC,IAAK,CACnC,IAAIiK,EAAU,CACVC,aAAcpC,KAAKZ,MAAM9E,QACzB+H,eAAgB,CACZ,CACIC,aAActC,KAAKZ,MAAMC,KACzBkD,WAAY,MACZC,gBAAiB,CAAExC,KAAKZ,MAAMlG,aAEtCuJ,eAAgB,CACZvF,aAAc8C,KAAKZ,MAAMlC,aACzB+D,SAAUjB,KAAKZ,MAAMO,wBAG7BuC,EAAS/M,KAAKgN,GAGlB,GAAInC,KAAKZ,MAAMnH,mBAAmBK,OAAQ,CACtC,IAAIoI,EAAQ,GACZ,OAAQV,KAAKZ,MAAM9C,aAAaC,aAC5B,IAAK,gBACDmE,EAAQ,QAAUV,KAAKZ,MAAM9C,aAAa/G,QAAQ4D,oBAAoB,GAAGsD,KACzE,MACJ,IAAK,iBACDiE,EAAQ,kBAAoBV,KAAKZ,MAAM9C,aAAa/G,QAAQ4D,oBAAoB,GAAGuD,eACnF,MACJ,IAAK,cACDgE,EAAQ,SAAWV,KAAKZ,MAAM9C,aAAa/G,QAAQ4D,oBAAoB,GAAGwD,MAC1E,MACJ,IAAK,SACD+D,EAAQ,UAAYV,KAAKZ,MAAM9C,aAAa/G,QAAQ4D,oBAAoB,GAAGyD,OAInF,IAAIuF,EAAU,CACVC,aAAcpC,KAAKZ,MAAM9E,QACzB+H,eAAgB,CACZ,CACIC,aAActC,KAAKZ,MAAMC,KACzBkD,WAAY,MACZC,gBAAiB,CAAC,CACdpJ,KAAM,MACN7D,QAAS,CACL4D,oBAAqB,CAAEuH,QAIvC+B,eAAgB,CACZvF,aAAc8C,KAAKZ,MAAMlC,eAGjCgF,EAAS/M,KAAKgN,GAGlB,GAAInC,KAAKZ,MAAMnH,mBAAmBI,MAAO,CACrC,IAAI8J,EAAU,CACVC,aAAcpC,KAAKZ,MAAM9E,QACzB+H,eAAgB,CACZ,CACIC,aAActC,KAAKZ,MAAMC,KACzBkD,WAAY,MACZC,gBAAiB,CAAC,CACdpJ,KAAM,QACN7D,QAAS,CACLwE,UAAWiG,KAAKZ,MAAMtF,YAAYvE,QAAQwE,UAC1CC,gBAAiBgG,KAAKZ,MAAMtF,YAAYvE,QAAQyE,gBAChDC,eAAgB+F,KAAKZ,MAAMtF,YAAYvE,QAAQ0E,oBAI/DwI,eAAgB,CACZvF,aAAc8C,KAAKZ,MAAMlC,eAGjCgF,EAAS/M,KAAKgN,GAIlB,IAAMO,EAAkB,GACxBR,EAAS3B,SAAQ,SAAA4B,GACb,IAAMQ,EAAiBtB,KAAIuB,aAAaT,GAASZ,MAAK,SAAAC,GAClD,IAAIqB,EAAU,GACdA,EAAQrB,EAASpK,IAAM,CACnB0L,aAAc,CACVC,OAAQ,WAEZX,aAAcD,EAAQC,aACtBE,aAAcH,EAAQE,eAAe,GAAGC,aACxCC,WAAYJ,EAAQE,eAAe,GAAGE,YAE1C,EAAKjM,MAAM0M,cAAcH,MAE7BH,EAAgBvN,KAAKwN,MAEzBM,QAAQC,IAAIR,GAAiBnB,MAAK,kBAAM,EAAKjL,MAAM6M,QAAQhO,KAAK,iB,gCAIhE6K,KAAK1J,MAAM6M,QAAQhO,KAAK,c,+BAIxB,IAAMiO,EAAkB,CACpBtG,KAAM,eACNU,UAAW,kBAAC,EAAD,CACPxG,MAAQgJ,KAAKZ,MAAM9E,QACnBpD,WAAa8I,KAAK9I,WAClBa,wBAA0BiI,KAAKjI,wBAC/BE,mBAAqB+H,KAAKZ,MAAMnH,sBAGlCoL,EAAgB,CAClBvG,KAAM,sBACNU,UAAW,kBAAC,EAAD,CACPtE,UAAY8G,KAAKZ,MAAMlG,UACvBG,iBAAmB2G,KAAK3G,iBACxBN,OAASiH,KAAKZ,MAAMvB,mBAGtByF,EAAkB,CACpBxG,KAAM,kBACNU,UAAW,kBAAC,EAAD,CACP1D,YAAckG,KAAKZ,MAAMtF,YACzBT,iBAAmB2G,KAAK3G,iBACxBN,OAASiH,KAAKZ,MAAMI,qBAGtB+D,EAAmB,CACrBzG,KAAM,wBACNU,UAAW,kBAAC,GAAD,CACPlB,aAAe0D,KAAKZ,MAAM9C,aAC1BF,qBAAuB4D,KAAK5D,qBAC5B/C,iBAAmB2G,KAAK3G,iBACxBN,OAASiH,KAAKZ,MAAMK,sBAGtB+D,EAAyB,GAC3BxD,KAAKZ,MAAMnH,mBAAmBC,KAC9BsL,EAAuBrO,KAAKkO,GAG5BrD,KAAKZ,MAAMnH,mBAAmBI,OAC9BmL,EAAuBrO,KAAKmO,GAG5BtD,KAAKZ,MAAMnH,mBAAmBK,QAC9BkL,EAAuBrO,KAAKoO,GAGhC,IAAME,EAAgB,CAClB3G,KAAM,qBACN4G,MAAOF,GAGLE,EAAQ,CACVN,GADO,WAEHK,EAAcC,MAAMvF,OAAS,EAAI,CAAEsF,GAAkB,IAFlD,CAGP,CACI3G,KAAM,eACNU,UAAW,kBAAC,GAAD,CACPN,aAAe8C,KAAKZ,MAAMlC,aAC1BH,aAAeiD,KAAKZ,MAAMrC,aAC1BK,gBAAkB4C,KAAK5C,gBACvBJ,gBAAkBgD,KAAKhD,gBACvBjE,OAASiH,KAAKZ,MAAMnB,sBAC5B,CACInB,KAAM,WACNU,UAAW,kBAAC,EAAD,CACP1C,kBAAoBkF,KAAKlF,kBACzBR,QAAU0F,KAAKZ,MAAM9E,QACrBI,4BAA8BsF,KAAKZ,MAAM1E,4BACzCE,2BAA6BoF,KAAKZ,MAAMxE,2BACxCP,qBAAuB2F,KAAK3F,qBAC5BgB,qBAAwB2E,KAAK3E,qBAC7BF,sBAAwB6E,KAAK7E,yBACrC,CACI2B,KAAM,SACNU,UAAW,kBAAC,GAAD,CACPlD,QAAU0F,KAAKZ,MAAM9E,QACrBpB,UAAY8G,KAAKZ,MAAMlG,UACvBoD,aAAe0D,KAAKZ,MAAM9C,aAC1BrE,mBAAqB+H,KAAKZ,MAAMnH,mBAChCiF,aAAe8C,KAAKZ,MAAMlC,aAC1BH,aAAeiD,KAAKZ,MAAMrC,aAC1Bc,gBAAkBmC,KAAKZ,MAAMvB,gBAC7BI,mBAAqB+B,KAAKZ,MAAMnB,qBACpC0F,eAAgB,YAGxB,OACI,kBAAC,IAAMC,SAAP,KACI,kBAACC,EAAA,EAAD,CACIlM,MAAQ,eACRmM,OAAS9D,KAAKlB,OACdiF,WAAa/D,KAAKlB,OAClB4E,MAAQA,EACR1E,QAAUgB,KAAKhB,QACfD,OAASiB,KAAKjB,OACdiF,QAAM,S,GAldMC,aA8dhCtF,GAAkBpG,UAAY,CAC1ByK,cAAevK,IAAUC,KACzByK,QAAS1K,IAAUE,QAGRuL,4BAAQ,MAXvB,SAA4BC,GACxB,MAAO,CACHnB,cAAe,SAACH,GAAD,OAAasB,EAASC,IAAQpB,cAAcH,QASpDqB,CAAkCG,YAAW1F","file":"js/7.f3eefbbc80556538ff07.js","sourcesContent":["// Imports\nvar ___CSS_LOADER_API_IMPORT___ = require(\"../../../node_modules/css-loader/dist/runtime/api.js\");\nexports = ___CSS_LOADER_API_IMPORT___(false);\n// Module\nexports.push([module.id, \".tiles{display:flex}.tile{flex:1 0 0px}.pf-c-tile:focus{--pf-c-tile__title--Color: var(--pf-c-tile__title--Color);--pf-c-tile__icon--Color: var(---pf-global--Color--100);--pf-c-tile--before--BorderWidth: var(--pf-global--BorderWidth--sm);--pf-c-tile--before--BorderColor: var(--pf-global--BorderColor--100)}.pf-c-tile.pf-m-selected:focus{--pf-c-tile__title--Color: var(--pf-c-tile--focus__title--Color);--pf-c-tile__icon--Color: var(--pf-c-tile--focus__icon--Color);--pf-c-tile--before--BorderWidth: var(--pf-c-tile--focus--before--BorderWidth);--pf-c-tile--before--BorderColor: var(--pf-c-tile--focus--before--BorderColor)}.provider-icon{width:1em;height:1em}\\n\", \"\"]);\n// Exports\nmodule.exports = exports;\n","// Imports\nvar ___CSS_LOADER_API_IMPORT___ = require(\"../../../node_modules/css-loader/dist/runtime/api.js\");\nexports = ___CSS_LOADER_API_IMPORT___(false);\n// Module\nexports.push([module.id, \".textcontent-azure{margin-bottom:var(--pf-global--spacer--lg)}.textcontent-azure h3,.textcontent-azure h4{margin-top:var(--pf-global--spacer--sm);margin-bottom:var(--pf-global--spacer--xs)}.textcontent-azure p{margin-bottom:0}\\n\", \"\"]);\n// Exports\nmodule.exports = exports;\n","// Imports\nvar ___CSS_LOADER_API_IMPORT___ = require(\"../../../node_modules/css-loader/dist/runtime/api.js\");\nexports = ___CSS_LOADER_API_IMPORT___(false);\n// Module\nexports.push([module.id, \".error{color:var(--pf-global--danger-color--100)}.textcontent-review h3{margin-top:var(--pf-global--spacer--xl)}@media screen and (min-width: 576px){.textcontent-review dl{grid-template:1fr / 25% 1fr;grid-gap:var(--pf-global--spacer--sm)}}#destination-header{font-size:18px;margin-bottom:var(--pf-global--spacer--sm)}\\n\", \"\"]);\n// Exports\nmodule.exports = exports;\n","// Imports\nvar ___CSS_LOADER_API_IMPORT___ = require(\"../../../node_modules/css-loader/dist/runtime/api.js\");\nexports = ___CSS_LOADER_API_IMPORT___(false);\n// Module\nexports.push([module.id, \".pf-c-wizard__nav-list{padding-right:0px}\\n\", \"\"]);\n// Exports\nmodule.exports = exports;\n","\nvar content = require(\"!!../../../node_modules/css-loader/dist/cjs.js!../../../node_modules/sass-loader/dist/cjs.js!./WizardStepImageOutput.scss\");\n\nif(typeof content === 'string') content = [[module.id, content, '']];\n\nvar transform;\nvar insertInto;\n\n\n\nvar options = {\"hmr\":true}\n\noptions.transform = transform\noptions.insertInto = undefined;\n\nvar update = require(\"!../../../node_modules/style-loader/lib/addStyles.js\")(content, options);\n\nif(content.locals) module.exports = content.locals;\n\nif(module.hot) {\n\tmodule.hot.accept(\"!!../../../node_modules/css-loader/dist/cjs.js!../../../node_modules/sass-loader/dist/cjs.js!./WizardStepImageOutput.scss\", function() {\n\t\tvar newContent = require(\"!!../../../node_modules/css-loader/dist/cjs.js!../../../node_modules/sass-loader/dist/cjs.js!./WizardStepImageOutput.scss\");\n\n\t\tif(typeof newContent === 'string') newContent = [[module.id, newContent, '']];\n\n\t\tvar locals = (function(a, b) {\n\t\t\tvar key, idx = 0;\n\n\t\t\tfor(key in a) {\n\t\t\t\tif(!b || a[key] !== b[key]) return false;\n\t\t\t\tidx++;\n\t\t\t}\n\n\t\t\tfor(key in b) idx--;\n\n\t\t\treturn idx === 0;\n\t\t}(content.locals, newContent.locals));\n\n\t\tif(!locals) throw new Error('Aborting CSS HMR due to changed css-modules locals.');\n\n\t\tupdate(newContent);\n\t});\n\n\tmodule.hot.dispose(function() { update(); });\n}","\nvar content = require(\"!!../../../node_modules/css-loader/dist/cjs.js!../../../node_modules/sass-loader/dist/cjs.js!./WizardStepUploadAzure.scss\");\n\nif(typeof content === 'string') content = [[module.id, content, '']];\n\nvar transform;\nvar insertInto;\n\n\n\nvar options = {\"hmr\":true}\n\noptions.transform = transform\noptions.insertInto = undefined;\n\nvar update = require(\"!../../../node_modules/style-loader/lib/addStyles.js\")(content, options);\n\nif(content.locals) module.exports = content.locals;\n\nif(module.hot) {\n\tmodule.hot.accept(\"!!../../../node_modules/css-loader/dist/cjs.js!../../../node_modules/sass-loader/dist/cjs.js!./WizardStepUploadAzure.scss\", function() {\n\t\tvar newContent = require(\"!!../../../node_modules/css-loader/dist/cjs.js!../../../node_modules/sass-loader/dist/cjs.js!./WizardStepUploadAzure.scss\");\n\n\t\tif(typeof newContent === 'string') newContent = [[module.id, newContent, '']];\n\n\t\tvar locals = (function(a, b) {\n\t\t\tvar key, idx = 0;\n\n\t\t\tfor(key in a) {\n\t\t\t\tif(!b || a[key] !== b[key]) return false;\n\t\t\t\tidx++;\n\t\t\t}\n\n\t\t\tfor(key in b) idx--;\n\n\t\t\treturn idx === 0;\n\t\t}(content.locals, newContent.locals));\n\n\t\tif(!locals) throw new Error('Aborting CSS HMR due to changed css-modules locals.');\n\n\t\tupdate(newContent);\n\t});\n\n\tmodule.hot.dispose(function() { update(); });\n}","\nvar content = require(\"!!../../../node_modules/css-loader/dist/cjs.js!../../../node_modules/sass-loader/dist/cjs.js!./WizardStepReview.scss\");\n\nif(typeof content === 'string') content = [[module.id, content, '']];\n\nvar transform;\nvar insertInto;\n\n\n\nvar options = {\"hmr\":true}\n\noptions.transform = transform\noptions.insertInto = undefined;\n\nvar update = require(\"!../../../node_modules/style-loader/lib/addStyles.js\")(content, options);\n\nif(content.locals) module.exports = content.locals;\n\nif(module.hot) {\n\tmodule.hot.accept(\"!!../../../node_modules/css-loader/dist/cjs.js!../../../node_modules/sass-loader/dist/cjs.js!./WizardStepReview.scss\", function() {\n\t\tvar newContent = require(\"!!../../../node_modules/css-loader/dist/cjs.js!../../../node_modules/sass-loader/dist/cjs.js!./WizardStepReview.scss\");\n\n\t\tif(typeof newContent === 'string') newContent = [[module.id, newContent, '']];\n\n\t\tvar locals = (function(a, b) {\n\t\t\tvar key, idx = 0;\n\n\t\t\tfor(key in a) {\n\t\t\t\tif(!b || a[key] !== b[key]) return false;\n\t\t\t\tidx++;\n\t\t\t}\n\n\t\t\tfor(key in b) idx--;\n\n\t\t\treturn idx === 0;\n\t\t}(content.locals, newContent.locals));\n\n\t\tif(!locals) throw new Error('Aborting CSS HMR due to changed css-modules locals.');\n\n\t\tupdate(newContent);\n\t});\n\n\tmodule.hot.dispose(function() { update(); });\n}","\nvar content = require(\"!!../../../node_modules/css-loader/dist/cjs.js!../../../node_modules/sass-loader/dist/cjs.js!./CreateImageWizard.scss\");\n\nif(typeof content === 'string') content = [[module.id, content, '']];\n\nvar transform;\nvar insertInto;\n\n\n\nvar options = {\"hmr\":true}\n\noptions.transform = transform\noptions.insertInto = undefined;\n\nvar update = require(\"!../../../node_modules/style-loader/lib/addStyles.js\")(content, options);\n\nif(content.locals) module.exports = content.locals;\n\nif(module.hot) {\n\tmodule.hot.accept(\"!!../../../node_modules/css-loader/dist/cjs.js!../../../node_modules/sass-loader/dist/cjs.js!./CreateImageWizard.scss\", function() {\n\t\tvar newContent = require(\"!!../../../node_modules/css-loader/dist/cjs.js!../../../node_modules/sass-loader/dist/cjs.js!./CreateImageWizard.scss\");\n\n\t\tif(typeof newContent === 'string') newContent = [[module.id, newContent, '']];\n\n\t\tvar locals = (function(a, b) {\n\t\t\tvar key, idx = 0;\n\n\t\t\tfor(key in a) {\n\t\t\t\tif(!b || a[key] !== b[key]) return false;\n\t\t\t\tidx++;\n\t\t\t}\n\n\t\t\tfor(key in b) idx--;\n\n\t\t\treturn idx === 0;\n\t\t}(content.locals, newContent.locals));\n\n\t\tif(!locals) throw new Error('Aborting CSS HMR due to changed css-modules locals.');\n\n\t\tupdate(newContent);\n\t});\n\n\tmodule.hot.dispose(function() { update(); });\n}","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport { Form, FormGroup, FormSelect, FormSelectOption, Tile, Title } from '@patternfly/react-core';\n\nimport './WizardStepImageOutput.scss';\n\nconst WizardStepImageOutput = (props) => {\n    const releaseOptions = [\n        { value: 'rhel-8', label: 'Red Hat Enterprise Linux (RHEL) 8.3' },\n        { value: 'centos-8', label: 'CentOS Stream 8' },\n    ];\n\n    return (\n        <>\n            <Form>\n                <Title headingLevel=\"h2\" size=\"xl\">Image output</Title>\n                <FormGroup isRequired label=\"Release\" fieldId=\"release-select\">\n                    <FormSelect value={ props.value } onChange={ value => props.setRelease(value) } isRequired\n                        aria-label=\"Select release input\" id=\"release-select\" data-testid=\"release-select\">\n                        { releaseOptions.map(option => <FormSelectOption key={ option.value } value={ option.value } label={ option.label } />) }\n                    </FormSelect>\n                </FormGroup>\n                <FormGroup isRequired label=\"Select target environment\" data-testid=\"target-select\">\n                    <div className=\"tiles\">\n                        <Tile\n                            className=\"tile pf-u-mr-sm\"\n                            data-testid=\"upload-aws\"\n                            title=\"Amazon Web Services\"\n                            icon={ <img\n                                className='provider-icon'\n                                src={ '/apps/frontend-assets/partners-icons/aws.svg' } /> }\n                            onClick={ () => props.toggleUploadDestination('aws') }\n                            isSelected={ props.uploadDestinations.aws }\n                            isStacked\n                            isDisplayLarge />\n                        <Tile\n                            className=\"tile pf-u-mr-sm\"\n                            data-testid=\"upload-azure\"\n                            title=\"Microsoft Azure\"\n                            icon={ <img\n                                className='provider-icon'\n                                src={ '/apps/frontend-assets/partners-icons/microsoft-azure-short.svg' } /> }\n                            onClick={ () => props.toggleUploadDestination('azure') }\n                            isSelected={ props.uploadDestinations.azure }\n                            isStacked\n                            isDisplayLarge />\n                        <Tile\n                            className=\"tile\"\n                            data-testid=\"upload-google\"\n                            title=\"Google Cloud Platform\"\n                            icon={ <img\n                                className='provider-icon'\n                                src={ '/apps/frontend-assets/partners-icons/google-cloud-short.svg' } /> }\n                            onClick={ () => props.toggleUploadDestination('google') }\n                            isSelected={ props.uploadDestinations.google }\n                            isStacked\n                            isDisplayLarge />\n                    </div>\n                </FormGroup>\n            </Form>\n        </>\n    );\n};\n\nWizardStepImageOutput.propTypes = {\n    toggleUploadAWS: PropTypes.func,\n    uploadDestinations: PropTypes.object,\n    setRelease: PropTypes.func,\n    value: PropTypes.string,\n    toggleUploadDestination: PropTypes.func,\n};\n\nexport default WizardStepImageOutput;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport { Form, FormGroup, TextInput, Title } from '@patternfly/react-core';\n\nconst WizardStepUploadAWS = (props) => {\n    return (\n        <Form>\n            <Title headingLevel=\"h2\" size=\"xl\">Target Environment - Upload to AWS</Title>\n            <p>\n            Your image will be uploaded to a temporary account on Amazon Web Services. <br />\n            The image will be shared with the account you provide below. <br />\n            Within the next 14 days you will need to copy the shared image to your own account.\n            After 14 days it will be unavailable and will have to be regenerated.\n            </p>\n            <FormGroup isRequired label=\"AWS account ID\" fieldId=\"aws-account-id\"\n                helperTextInvalid={ (props.errors['aws-account-id'] && props.errors['aws-account-id'].value) || '' }\n                validated={ (props.errors['aws-account-id'] && 'error') || 'default' }>\n                <TextInput value={ props.uploadAWS.options.share_with_accounts || '' }\n                    type=\"text\" aria-label=\"AWS account ID\" id=\"aws-account-id\"\n                    data-testid=\"aws-account-id\" isRequired\n                    onChange={ value =>\n                        props.setUploadOptions('aws', Object.assign(props.uploadAWS.options, { share_with_accounts: [ value ]})) } />\n            </FormGroup>\n        </Form>\n    );\n};\n\nWizardStepUploadAWS.propTypes = {\n    setUploadOptions: PropTypes.func,\n    uploadAWS: PropTypes.object,\n    errors: PropTypes.object,\n};\n\nexport default WizardStepUploadAWS;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport { Form, FormGroup, Text, TextContent, TextInput, Title } from '@patternfly/react-core';\nimport { ExternalLinkAltIcon } from '@patternfly/react-icons';\n\nimport './WizardStepUploadAzure.scss';\n\nconst WizardStepUploadAzure = (props) => {\n    return (\n        <>\n            <TextContent className=\"textcontent-azure\">\n                <Title headingLevel=\"h2\">Target Environment - Upload to Azure</Title>\n                <Text>\n            Image Builder will send an image to an authorized Azure account.\n                </Text>\n                <Title headingLevel=\"h3\">OAuth permissions</Title>\n                <Text>\n            In order to use Image Builder to push images to Azure, Image Builder must\n            be configured as an authorized application, and given the role of &quot;Contributor&quot; to at least one resource group.<br />\n            Image Builder must be authorized by an account owner.<br />\n                    <a href=\"https://docs.microsoft.com/en-us/azure/active-directory/develop/v2-oauth2-auth-code-flow\">\n                        <small>Learn more</small></a>\n                </Text>\n\n                <a href=\"https://login.microsoftonline.com/common/oauth2/v2.0/authorize?client_id=b94bb246-b02c-4985-9c22-d44e66f657f4\n&scope=openid&response_type=code&response_mode=form_post\n&redirect_uri=https%3A%2F%2Flogin.microsoftonline.com%2Fcommon%2Foauth2%2Fnativeclient\" target=\"_blank\" rel=\"noopener noreferrer\">\n            Authorize Image Builder on Azure <ExternalLinkAltIcon />\n                </a>\n            </TextContent>\n\n            <Title headingLevel=\"h3\">Destination</Title>\n            <Text>\n            Your image will be uploaded to the resource group in the subscription you specify.\n            </Text>\n            <Form>\n                <FormGroup isRequired label=\"Tenant ID\" fieldId=\"azure-tenant-id\"\n                    helperTextInvalid={ (props.errors['azure-tenant-id'] && props.errors['azure-tenant-id'].value) || '' }\n                    validated={ (props.errors['azure-tenant-id'] && 'error') || 'default' }>\n                    <TextInput value={ props.uploadAzure.options.tenant_id || '' }\n                        type=\"text\" aria-label=\"Azure tenant-id\" id=\"azure-tenant-id\"\n                        data-testid=\"azure-tenant-id\" isRequired\n                        onChange={ value =>\n                            props.setUploadOptions('azure', Object.assign(props.uploadAzure.options, { tenant_id: value })) } />\n                </FormGroup>\n                <FormGroup isRequired label=\"Subscription ID\" fieldId=\"azure-subscription-id\"\n                    helperTextInvalid={ (props.errors['azure-subscription-id'] &&\n                             props.errors['azure-subscription-id'].value) || '' }\n                    validated={ (props.errors['azure-subscription-id'] && 'error') || 'default' }>\n                    <TextInput value={ props.uploadAzure.options.subscription_id || '' }\n                        type=\"text\" aria-label=\"Azure subscription-id\" id=\"azure-subscription-id\"\n                        data-testid=\"azure-subscription-id\" isRequired\n                        onChange={ value =>\n                            props.setUploadOptions('azure', Object.assign(props.uploadAzure.options, { subscription_id: value })) } />\n                </FormGroup>\n                <FormGroup isRequired label=\"Resource group\" fieldId=\"azure-resource-group\"\n                    helperTextInvalid={ (props.errors['azure-resource-group'] &&\n                             props.errors['azure-resource-group'].value) || '' }\n                    validated={ (props.errors['azure-resource-group'] && 'error') || 'default' }>\n                    <TextInput value={ props.uploadAzure.options.resource_group || '' }\n                        type=\"text\" aria-label=\"Azure resource group\" id=\"azure-resource-group\"\n                        data-testid=\"azure-resource-group\" isRequired\n                        onChange={ value =>\n                            props.setUploadOptions('azure', Object.assign(props.uploadAzure.options, { resource_group: value })) } />\n                </FormGroup>\n            </Form>\n        </>\n    );\n};\n\nWizardStepUploadAzure.propTypes = {\n    setUploadOptions: PropTypes.func,\n    uploadAzure: PropTypes.object,\n    errors: PropTypes.object,\n};\n\nexport default WizardStepUploadAzure;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport { Button, DualListSelector, Text, TextContent, Title } from '@patternfly/react-core';\n\nconst WizardStepPackages = (props) => {\n    const availableOptionsActions = [\n        <Button\n            aria-label=\"Search button for available packages\"\n            key=\"availableSearchButton\"\n            onClick={ props.handlePackagesSearch }>\n            Search\n        </Button>\n    ];\n\n    return (\n        <>\n            <TextContent>\n                <Title headingLevel=\"h2\" size=\"xl\">Additional packages</Title>\n                <Text>Optionally add additional packages to your <strong>{props.release}</strong> image</Text>\n            </TextContent>\n            <DualListSelector\n                className=\"pf-u-mt-sm\"\n                isSearchable\n                availableOptionsActions={ availableOptionsActions }\n                availableOptions={ props.packagesAvailableComponents }\n                chosenOptions={ props.packagesFilteredComponents }\n                addSelected={ props.packageListChange }\n                removeSelected={ props.packageListChange }\n                addAll={ props.packageListChange }\n                removeAll= { props.packageListChange }\n                onAvailableOptionsSearchInputChanged={ props.setPackagesSearchName }\n                onChosenOptionsSearchInputChanged={ props.handlePackagesFilter }\n                filterOption={ () => true }\n                id=\"basicSelectorWithSearch\" />\n        </>\n    );\n};\n\nWizardStepPackages.propTypes = {\n    packageListChange: PropTypes.func,\n    release: PropTypes.string,\n    packagesAvailableComponents: PropTypes.arrayOf(PropTypes.object),\n    packagesFilteredComponents: PropTypes.arrayOf(PropTypes.object),\n    handlePackagesSearch: PropTypes.func,\n    handlePackagesFilter: PropTypes.func,\n    setPackagesSearchName: PropTypes.func,\n};\n\nexport default WizardStepPackages;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport { Form, FormGroup, TextList, TextListItem, Popover, Radio, TextContent, Text, TextInput, Title } from '@patternfly/react-core';\nimport { HelpIcon } from '@patternfly/react-icons';\n\nconst WizardStepUploadGoogle = (props) => {\n    const accountTypePopover = (\n        <Popover\n            hasAutoWidth\n            maxWidth='35rem'\n            headerContent={ 'Valid account types' }\n            bodyContent={ <TextContent>\n                <Text>The following account types can have an image shared with them:</Text>\n                <TextList>\n                    <TextListItem>\n                        <strong>Google account:</strong> A Google account represents a developer, an administrator,\n                        or any other person who interacts with Google Cloud. e.g., <em>`alice@gmail.com`</em>.\n                    </TextListItem>\n                    <TextListItem>\n                        <strong>Service account:</strong> A service account is an account for an application instead\n                        of an individual end user. e.g., <em>`myapp@appspot.gserviceaccount.com`</em>.\n                    </TextListItem>\n                    <TextListItem>\n                        <strong>Google group:</strong> A Google group is a named collection of Google accounts and\n                        and service accounts. e.g., <em>`admins@example.com`</em>.\n                    </TextListItem>\n                    <TextListItem>\n                        <strong>Google workspace domain/Cloud identity domain:</strong> A Google workspace or cloud identity\n                        domain represents a virtual group of all the Google accounts in an organization. These domains\n                        represent your organization&apos;s internet domain name. e.g., <em>`mycompany.com`</em>.\n                    </TextListItem>\n                </TextList>\n            </TextContent> }>\n            <button\n                type=\"button\"\n                aria-label=\"Account info\"\n                aria-describedby=\"google-account-type\"\n                className=\"pf-c-form__group-label-help\">\n                <HelpIcon />\n            </button>\n        </Popover>\n    );\n\n    return (\n        <Form>\n            <Title headingLevel=\"h2\" size=\"xl\">Target Environment - Google Cloud Platform</Title>\n            <p>\n            Your image will be uploaded to an account on Google Cloud Platform. <br />\n            The image will be shared with the email you provide below. <br />\n            Within the next 14 days you will need to copy the shared image to your own account.\n            After 14 days it will be unavailable and will have to be regenerated.\n            </p>\n            <FormGroup isRequired label=\"Type\" labelIcon={ accountTypePopover } fieldId=\"google-account-type\">\n                <Radio\n                    onChange={ props.setGoogleAccountType }\n                    isChecked={ props.uploadGoogle.accountType === 'googleAccount' }\n                    label=\"Google account\"\n                    id=\"radio-google-account\"\n                    test-id\n                    value=\"googleAccount\" />\n                <Radio\n                    onChange={ props.setGoogleAccountType }\n                    isChecked={ props.uploadGoogle.accountType === 'serviceAccount' }\n                    label=\"Service account\"\n                    id=\"radio-service-account\"\n                    value=\"serviceAccount\" />\n                <Radio\n                    onChange={ props.setGoogleAccountType }\n                    isChecked={ props.uploadGoogle.accountType === 'googleGroup' }\n                    label=\"Google group\"\n                    id=\"radio-google-group\"\n                    value=\"googleGroup\" />\n                <Radio\n                    onChange={ props.setGoogleAccountType }\n                    isChecked={ props.uploadGoogle.accountType === 'domain' }\n                    label=\"Google Workspace Domain or Cloud Identity Domain\"\n                    id=\"radio-domain\"\n                    value=\"domain\" />\n            </FormGroup>\n            {props.uploadGoogle.accountType === 'googleAccount' && (\n                <FormGroup isRequired label=\"Email address\" fieldId=\"user\">\n                    <TextInput\n                        value={ props.uploadGoogle.options.share_with_accounts[0] ?\n                            props.uploadGoogle.options.share_with_accounts[0].user || '' :\n                            '' }\n                        type=\"text\" aria-label=\"Google email address\" id=\"input-google-user\"\n                        data-testid=\"input-google-user\" isRequired\n                        onChange={ value => props.setUploadOptions(\n                            'google',\n                            Object.assign(props.uploadGoogle.options, { share_with_accounts: [{ user: value }]})\n                        ) } />\n                </FormGroup>\n            )}\n            {props.uploadGoogle.accountType === 'serviceAccount' && (\n                <FormGroup isRequired label=\"Email address\" fieldId=\"service-account\">\n                    <TextInput\n                        value={ props.uploadGoogle.options.share_with_accounts[0] ?\n                            props.uploadGoogle.options.share_with_accounts[0].serviceAccount || '' :\n                            '' }\n                        type=\"text\" aria-label=\"Google email address\" id=\"input-google-service-account\"\n                        data-testid=\"input-google-service-account\" isRequired\n                        onChange={ value => props.setUploadOptions(\n                            'google',\n                            Object.assign(props.uploadGoogle.options, { share_with_accounts: [{ serviceAccount: value }]})\n                        ) } />\n                </FormGroup>\n            )}\n            {props.uploadGoogle.accountType === 'googleGroup' && (\n                <FormGroup isRequired label=\"Email address\" fieldId=\"group\">\n                    <TextInput\n                        value={ props.uploadGoogle.options.share_with_accounts[0] ?\n                            props.uploadGoogle.options.share_with_accounts[0].group || '' :\n                            '' }\n                        type=\"text\" aria-label=\"Google email address\" id=\"input-google-group\"\n                        data-testid=\"input-google-group\" isRequired\n                        onChange={ value => props.setUploadOptions(\n                            'google',\n                            Object.assign(props.uploadGoogle.options, { share_with_accounts: [{ group: value }]})\n                        ) } />\n                </FormGroup>\n            )}\n            {props.uploadGoogle.accountType === 'domain' && (\n                <FormGroup isRequired label=\"Domain\" fieldId=\"domain\">\n                    <TextInput\n                        value={ props.uploadGoogle.options.share_with_accounts[0] ?\n                            props.uploadGoogle.options.share_with_accounts[0].domain || '' :\n                            '' }\n                        type=\"text\" aria-label=\"Google domain\" id=\"input-google-domain\"\n                        data-testid=\"input-google-domain\" isRequired\n                        onChange={ value => props.setUploadOptions(\n                            'google',\n                            Object.assign(props.uploadGoogle.options, { share_with_accounts: [{ domain: value }]})\n                        ) } />\n                </FormGroup>\n            )}\n        </Form>\n    );\n};\n\nWizardStepUploadGoogle.propTypes = {\n    setUploadOptions: PropTypes.func,\n    setGoogleAccountType: PropTypes.func,\n    uploadGoogle: PropTypes.object,\n    errors: PropTypes.object,\n};\n\nexport default WizardStepUploadGoogle;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport { Form, FormGroup, TextInput, Radio, Title } from '@patternfly/react-core';\n\nconst WizardStepRegistration = (props) => {\n    return (\n        <Form>\n            <Title headingLevel=\"h2\" size=\"xl\">Registration</Title>\n            <FormGroup isRequired label=\"Register the system\">\n                <Radio name=\"subscribe-now-radio\" isChecked={ props.subscribeNow } id=\"subscribe-now-radio\"\n                    label=\"Embed an activation key and register systems on first boot\"\n                    onChange={ () => props.setSubscribeNow(true) }\n                    data-testid=\"register-now-radio-button\" />\n                <Radio name=\"subscribe-later-radio\" isChecked={ !props.subscribeNow }\n                    label=\"Register the system later\" id=\"subscribe-later-radio\"\n                    onChange={ () => props.setSubscribeNow(false) }\n                    data-testid=\"register-later-radio-button\" />\n            </FormGroup>\n            { props.subscribeNow &&\n              <>\n                  <FormGroup label=\"Organization ID\" fieldId=\"subscription-organization\">\n                      <TextInput isDisabled value={ props.subscription.organization || '' } type=\"text\"\n                          id=\"subscription-organization\" aria-label=\"Subscription organization ID\"\n                          data-testid=\"organization-id\" />\n                  </FormGroup>\n                  <FormGroup isRequired label=\"Activation key\" fieldId=\"subscription-activation\"\n                      helperTextInvalid={ (props.errors['subscription-activation'] && props.errors['subscription-activation'].value) || '' }\n                      validated={ (props.errors['subscription-activation'] && 'error') || 'default' }>\n                      <TextInput value={ props.subscription['activation-key'] || '' } type=\"password\"\n                          data-testid=\"subscription-activation\" isRequired\n                          id=\"subscription-activation\" aria-label=\"Subscription activation key\"\n                          onChange={ value => props.setSubscription(Object.assign(props.subscription, { 'activation-key': value })) } />\n                  </FormGroup>\n              </> }\n        </Form>\n    );\n};\n\nWizardStepRegistration.propTypes = {\n    setSubscription: PropTypes.func,\n    setSubscribeNow: PropTypes.func,\n    subscription: PropTypes.object,\n    subscribeNow: PropTypes.bool,\n    errors: PropTypes.object,\n};\n\nexport default WizardStepRegistration;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport {\n    Alert,\n    Text, TextVariants, TextContent, TextList, TextListVariants, TextListItem, TextListItemVariants,\n    Title\n} from '@patternfly/react-core';\nimport { ExclamationCircleIcon } from '@patternfly/react-icons';\n\nimport './WizardStepReview.scss';\n\nconst WizardStepReview = (props) => {\n    const releaseLabels = {\n        'rhel-8': 'Red Hat Enterprise Linux (RHEL) 8.3',\n        'centos-8': 'CentOS Stream 8'\n    };\n\n    const awsReview = (\n        <>\n            <Text id=\"destination-header\">Amazon Web Services</Text>\n            <TextList component={ TextListVariants.dl } data-testid='review-image-upload-aws'>\n                <TextListItem component={ TextListItemVariants.dt }>Account ID</TextListItem>\n                {props.uploadAWSErrors['aws-account-id'] ? (\n                    <TextListItem component={ TextListItemVariants.dd }>\n                        <ExclamationCircleIcon className=\"error\" /> { props.uploadAWSErrors['aws-account-id'].value }\n                    </TextListItem>\n                ) : (\n                    <TextListItem component={ TextListItemVariants.dd }>{props.uploadAWS.options.share_with_accounts[0]}</TextListItem>\n                )}\n            </TextList>\n        </>\n    );\n\n    const googleReview = (\n        <>\n            <Text id=\"destination-header\">Google Cloud Platform</Text>\n            <TextList component={ TextListVariants.dl } data-testid='review-image-upload-google'>\n                {props.uploadGoogle.accountType === 'googleAccount' && (\n                    <>\n                        <TextListItem component={ TextListItemVariants.dt }>Google account</TextListItem>\n                        <TextListItem component={ TextListItemVariants.dd }>{props.uploadGoogle.options.share_with_accounts[0] ?\n                            props.uploadGoogle.options.share_with_accounts[0].user || '' :\n                            ''}\n                        </TextListItem>\n                    </>\n                )}\n                {props.uploadGoogle.accountType === 'serviceAccount' && (\n                    <>\n                        <TextListItem component={ TextListItemVariants.dt }>Service account</TextListItem>\n                        <TextListItem component={ TextListItemVariants.dd }>{props.uploadGoogle.options.share_with_accounts[0] ?\n                            props.uploadGoogle.options.share_with_accounts[0].serviceAccount || '' :\n                            ''}\n                        </TextListItem>\n                    </>\n                )}\n                {props.uploadGoogle.accountType === 'googleGroup' && (\n                    <>\n                        <TextListItem component={ TextListItemVariants.dt }>Google group</TextListItem>\n                        <TextListItem component={ TextListItemVariants.dd }>{props.uploadGoogle.options.share_with_accounts[0] ?\n                            props.uploadGoogle.options.share_with_accounts[0].group || '' :\n                            ''}\n                        </TextListItem>\n                    </>\n                )}\n                {props.uploadGoogle.accountType === 'domain' && (\n                    <>\n                        <TextListItem component={ TextListItemVariants.dt }>Domain</TextListItem>\n                        <TextListItem component={ TextListItemVariants.dd }>{props.uploadGoogle.options.share_with_accounts[0] ?\n                            props.uploadGoogle.options.share_with_accounts[0].domain || '' :\n                            ''}\n                        </TextListItem>\n                    </>\n                )}\n            </TextList>\n        </>\n    );\n\n    let subscriptionReview = <TextListItem component={ TextListItemVariants.dd }>Register the system later</TextListItem>;\n    if (props.subscribeNow) {\n        subscriptionReview = (<>\n            <TextListItem component={ TextListItemVariants.dd }>Register the system on first boot</TextListItem>\n            <TextListItem component={ TextListItemVariants.dt }>Activation key</TextListItem>\n            { props.subscriptionErrors['subscription-activation'] ? (\n                <TextListItem component={ TextListItemVariants.dd }>\n                    <ExclamationCircleIcon className=\"error\" /> { props.subscriptionErrors['subscription-activation'].value }\n                </TextListItem>\n            ) : (\n                <TextListItem component={ TextListItemVariants.dd } type=\"password\">\n                    {'*'.repeat(props.subscription['activation-key'].length)}\n                </TextListItem>\n            )}\n        </>);\n    }\n\n    return (\n        <>\n            { (Object.keys(props.uploadAWSErrors).length > 0 ||\n               Object.keys(props.subscriptionErrors).length > 0) &&\n              <Alert variant=\"danger\" className=\"pf-u-mb-xl\" isInline title=\"Required information is missing\" /> }\n            <Title headingLevel=\"h2\" size=\"xl\">Review</Title>\n            <TextContent>\n                <Text component={ TextVariants.small }>\n                    Review the information and click Create image\n                    to create the image using the following criteria.\n                </Text>\n                <Text component={ TextVariants.h3 }>Image output</Text>\n                <TextList component={ TextListVariants.dl } data-testid='review-image-output'>\n                    <TextListItem component={ TextListItemVariants.dt }>Release</TextListItem>\n                    <TextListItem component={ TextListItemVariants.dd }>{releaseLabels[props.release]}</TextListItem>\n                </TextList>\n                <Text component={ TextVariants.h3 }>Target environment</Text>\n                {props.uploadDestinations.aws && awsReview }\n                {props.uploadDestinations.google && googleReview }\n                <Text component={ TextVariants.h3 }>Registration</Text>\n                <TextList component={ TextListVariants.dl } data-testid='review-image-registration'>\n                    <TextListItem component={ TextListItemVariants.dt }>Subscription</TextListItem>\n                    { subscriptionReview }\n                </TextList>\n            </TextContent>\n        </>\n    );\n};\n\nWizardStepReview.propTypes = {\n    release: PropTypes.string,\n    uploadAWS: PropTypes.object,\n    uploadGoogle: PropTypes.object,\n    uploadDestinations: PropTypes.object,\n    subscription: PropTypes.object,\n    subscribeNow: PropTypes.bool,\n    uploadAWSErrors: PropTypes.object,\n    subscriptionErrors: PropTypes.object,\n};\n\nexport default WizardStepReview;\n","import PropTypes from 'prop-types';\nimport React, { Component } from 'react';\nimport { withRouter } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport { actions } from '../redux';\n\nimport { Wizard, TextContent } from '@patternfly/react-core';\n\nimport WizardStepImageOutput from '../../PresentationalComponents/CreateImageWizard/WizardStepImageOutput';\nimport WizardStepUploadAWS from '../../PresentationalComponents/CreateImageWizard/WizardStepUploadAWS';\nimport WizardStepUploadAzure from '../../PresentationalComponents/CreateImageWizard/WizardStepUploadAzure';\nimport WizardStepPackages from '../../PresentationalComponents/CreateImageWizard/WizardStepPackages';\nimport WizardStepUploadGoogle from '../../PresentationalComponents/CreateImageWizard/WizardStepUploadGoogle';\nimport WizardStepRegistration from '../../PresentationalComponents/CreateImageWizard/WizardStepRegistration';\nimport WizardStepReview from '../../PresentationalComponents/CreateImageWizard/WizardStepReview';\n\nimport api from './../../api.js';\nimport './CreateImageWizard.scss';\n\nclass CreateImageWizard extends Component {\n    constructor(props) {\n        super(props);\n\n        this.handlePackagesSearch = this.handlePackagesSearch.bind(this);\n        this.handlePackagesFilter = this.handlePackagesFilter.bind(this);\n        this.packageListChange = this.packageListChange.bind(this);\n        this.mapPackagesToComponent = this.mapPackagesToComponent.bind(this);\n        this.setRelease = this.setRelease.bind(this);\n        this.setUploadOptions = this.setUploadOptions.bind(this);\n        this.setSubscription = this.setSubscription.bind(this);\n        this.setSubscribeNow = this.setSubscribeNow.bind(this);\n        this.setPackagesSearchName = this.setPackagesSearchName.bind(this);\n        this.setGoogleAccountType = this.setGoogleAccountType.bind(this);\n        this.toggleUploadDestination = this.toggleUploadDestination.bind(this);\n        this.onStep = this.onStep.bind(this);\n        this.onSave = this.onSave.bind(this);\n        this.onClose = this.onClose.bind(this);\n        this.validate = this.validate.bind(this);\n        this.validateUploadAmazon = this.validateUploadAmazon.bind(this);\n        this.validateSubscription = this.validateSubscription.bind(this);\n\n        this.state = {\n            arch: 'x86_64',\n            imageType: 'qcow2',\n            release: 'rhel-8',\n            uploadAWS: {\n                type: 'aws',\n                options: {\n                    share_with_accounts: []\n                }\n            },\n            uploadAzure: {\n                type: 'azure',\n                options: {\n                    tenant_id: null,\n                    subscription_id: null,\n                    resource_group: null,\n                }\n            },\n            uploadGoogle: {\n                type: 'gcp',\n                accountType: 'googleAccount',\n                options: {\n                    share_with_accounts: []\n                }\n            },\n            uploadDestinations: {\n                aws: false,\n                azure: false,\n                google: false\n            },\n            subscription: {\n                organization: null,\n                'activation-key': null,\n                'server-url': 'subscription.rhsm.redhat.com',\n                'base-url': 'https://cdn.redhat.com/',\n                insights: true\n            },\n            subscribeNow: true,\n            /* errors take form of $fieldId: error */\n            uploadAWSErrors: {},\n            uploadAzureErrors: {},\n            uploadGoogleErrors: {},\n            subscriptionErrors: {},\n            packagesAvailableComponents: [],\n            packagesSelectedComponents: [],\n            packagesFilteredComponents: [],\n            packagesSelectedNames: [],\n            packagesSearchName: '',\n        };\n    }\n\n    async componentDidMount() {\n        let user = await insights.chrome.auth.getUser();\n        this.setState({\n            subscription: {\n                organization: Number(user.identity.internal.org_id)\n            }\n        });\n    }\n\n    onStep(step) {\n        if (step.name === 'Review') {\n            this.validate();\n        }\n    }\n\n    validate() {\n        /* upload */\n        Object.keys(this.state.uploadDestinations).forEach(provider => {\n            switch (provider) {\n                case 'aws':\n                    this.validateUploadAmazon();\n                    break;\n                case 'azure':\n                    this.validateUploadAzure();\n                    break;\n                case 'google':\n                    break;\n                default:\n                    break;\n            }\n        });\n\n        /* subscription */\n        if (this.state.subscribeNow) {\n            this.validateSubscription();\n        } else {\n            this.setState({ subscriptionErrors: {}});\n        }\n    }\n\n    validateUploadAmazon() {\n        let uploadAWSErrors = {};\n        let share = this.state.uploadAWS.options.share_with_accounts;\n        if (share.length === 0 || share[0].length !== 12 || isNaN(share[0])) {\n            uploadAWSErrors['aws-account-id'] =\n                { label: 'AWS account ID', value: 'A 12-digit number is required' };\n        }\n\n        this.setState({ uploadAWSErrors });\n    }\n\n    validateUploadAzure() {\n        let uploadAzureErrors = {};\n\n        let tenant_id = this.state.uploadAzure.options.tenant_id;\n        if (tenant_id === null || tenant_id === '') {\n            uploadAzureErrors['azure-resource-group'] =\n                { label: 'Azure tenant ID', value: 'A tenant ID is required' };\n        }\n\n        let subscriptionId = this.state.uploadAzure.options.subscription_id;\n        if (subscriptionId === null || subscriptionId === '') {\n            uploadAzureErrors['azure-subscription-id'] =\n                { label: 'Azure subscription ID', value: 'A subscription ID is required' };\n        }\n\n        let resource_group = this.state.uploadAzure.options.resource_group;\n        if (resource_group === null || resource_group === '') {\n            uploadAzureErrors['azure-resource-group'] =\n                { label: 'Azure resource group', value: 'A resource group is required' };\n        }\n        // TODO check oauth2 thing too here?\n    }\n\n    validateSubscription() {\n        let subscriptionErrors = {};\n        if (!this.state.subscription['activation-key']) {\n            subscriptionErrors['subscription-activation'] =\n                { label: 'Activation key', value: 'A value is required' };\n        }\n\n        this.setState({ subscriptionErrors });\n    }\n\n    setRelease(release) {\n        this.setState({ release });\n    }\n\n    toggleUploadDestination(provider) {\n        this.setState(prevState => ({\n            ...prevState,\n            uploadDestinations: {\n                ...prevState.uploadDestinations,\n                [provider]: !prevState.uploadDestinations[provider]\n            }\n        }));\n    }\n\n    setUploadOptions(provider, uploadOptions) {\n        switch (provider) {\n            case 'aws':\n                this.setState({\n                    uploadAWS: {\n                        type: provider,\n                        options: uploadOptions\n                    }\n                });\n                break;\n            case 'azure':\n                this.setState({\n                    uploadAzure: {\n                        type: provider,\n                        options: uploadOptions\n                    }\n                });\n                break;\n            case 'google':\n                this.setState({\n                    uploadGoogle: {\n                        ...this.state.uploadGoogle,\n                        options: uploadOptions\n                    }\n                });\n                break;\n            default:\n                break;\n        }\n    }\n\n    setGoogleAccountType(_, event) {\n        this.setState({\n            uploadGoogle: {\n                ...this.state.uploadGoogle,\n                accountType: event.target.value\n            }\n        });\n    }\n\n    setSubscribeNow(subscribeNow) {\n        this.setState({ subscribeNow });\n    }\n\n    setSubscription(subscription) {\n        this.setState({ subscription }, this.validate);\n    }\n\n    setPackagesSearchName(packagesSearchName) {\n        this.setState({ packagesSearchName });\n    }\n\n    mapPackagesToComponent(packages) {\n        return packages.map((pack) =>\n            <TextContent key={ pack }>\n                <span className=\"pf-c-dual-list-selector__item-text\">{ pack.name }</span>\n                <small>{ pack.summary }</small>\n            </TextContent>\n        );\n    }\n\n    // this digs into the component properties to extract the package name\n    mapComponentToPackageName(component) {\n        return component.props.children[0].props.children;\n    }\n\n    handlePackagesSearch() {\n        api.getPackages(this.state.release, this.state.arch, this.state.packagesSearchName).then(response => {\n            const packageComponents = this.mapPackagesToComponent(response.data);\n            this.setState({\n                packagesAvailableComponents: packageComponents\n            });\n        });\n    };\n\n    handlePackagesFilter(filter) {\n        const filteredPackages = this.state.packagesSelectedComponents.filter(component => {\n            const name = this.mapComponentToPackageName(component);\n            return name.includes(filter);\n        });\n        this.setState({\n            packagesFilteredComponents: filteredPackages\n        });\n    }\n\n    packageListChange(newAvailablePackages, newChosenPackages) {\n        const chosenNames = newChosenPackages.map(component => this.mapComponentToPackageName(component));\n        this.setState({\n            packagesAvailableComponents: newAvailablePackages,\n            packagesSelectedComponents: newChosenPackages,\n            packagesFilteredComponents: newChosenPackages,\n            packagesSelectedNames: chosenNames\n        });\n    }\n\n    onSave () {\n        let requests = [];\n        if (this.state.uploadDestinations.aws) {\n            let request = {\n                distribution: this.state.release,\n                image_requests: [\n                    {\n                        architecture: this.state.arch,\n                        image_type: 'ami',\n                        upload_requests: [ this.state.uploadAWS ],\n                    }],\n                customizations: {\n                    subscription: this.state.subscription,\n                    packages: this.state.packagesSelectedNames,\n                },\n            };\n            requests.push(request);\n        }\n\n        if (this.state.uploadDestinations.google) {\n            let share = '';\n            switch (this.state.uploadGoogle.accountType) {\n                case 'googleAccount':\n                    share = 'user:' + this.state.uploadGoogle.options.share_with_accounts[0].user;\n                    break;\n                case 'serviceAccount':\n                    share = 'serviceAccount:' + this.state.uploadGoogle.options.share_with_accounts[0].serviceAccount;\n                    break;\n                case 'googleGroup':\n                    share = 'group:' + this.state.uploadGoogle.options.share_with_accounts[0].group;\n                    break;\n                case 'domain':\n                    share = 'domain:' + this.state.uploadGoogle.options.share_with_accounts[0].domain;\n                    break;\n            }\n\n            let request = {\n                distribution: this.state.release,\n                image_requests: [\n                    {\n                        architecture: this.state.arch,\n                        image_type: 'vhd',\n                        upload_requests: [{\n                            type: 'gcp',\n                            options: {\n                                share_with_accounts: [ share ],\n                            },\n                        }],\n                    }],\n                customizations: {\n                    subscription: this.state.subscription,\n                },\n            };\n            requests.push(request);\n        }\n\n        if (this.state.uploadDestinations.azure) {\n            let request = {\n                distribution: this.state.release,\n                image_requests: [\n                    {\n                        architecture: this.state.arch,\n                        image_type: 'vhd',\n                        upload_requests: [{\n                            type: 'azure',\n                            options: {\n                                tenant_id: this.state.uploadAzure.options.tenant_id,\n                                subscription_id: this.state.uploadAzure.options.subscription_id,\n                                resource_group: this.state.uploadAzure.options.resource_group,\n                            },\n                        }],\n                    }],\n                customizations: {\n                    subscription: this.state.subscription,\n                },\n            };\n            requests.push(request);\n\n        }\n\n        const composeRequests = [];\n        requests.forEach(request => {\n            const composeRequest = api.composeImage(request).then(response => {\n                let compose = {};\n                compose[response.id] = {\n                    image_status: {\n                        status: 'pending',\n                    },\n                    distribution: request.distribution,\n                    architecture: request.image_requests[0].architecture,\n                    image_type: request.image_requests[0].image_type,\n                };\n                this.props.updateCompose(compose);\n            });\n            composeRequests.push(composeRequest);\n        });\n        Promise.all(composeRequests).then(() => this.props.history.push('/landing'));\n    }\n\n    onClose () {\n        this.props.history.push('/landing');\n    }\n\n    render() {\n        const StepImageOutput = {\n            name: 'Image output',\n            component: <WizardStepImageOutput\n                value={ this.state.release }\n                setRelease={ this.setRelease }\n                toggleUploadDestination={ this.toggleUploadDestination }\n                uploadDestinations={ this.state.uploadDestinations } />\n        };\n\n        const StepUploadAWS = {\n            name: 'Amazon Web Services',\n            component: <WizardStepUploadAWS\n                uploadAWS={ this.state.uploadAWS }\n                setUploadOptions={ this.setUploadOptions }\n                errors={ this.state.uploadAWSErrors } />\n        };\n\n        const StepUploadAzure = {\n            name: 'Microsoft Azure',\n            component: <WizardStepUploadAzure\n                uploadAzure={ this.state.uploadAzure }\n                setUploadOptions={ this.setUploadOptions }\n                errors={ this.state.uploadAzureErrors } />\n        };\n\n        const StepUploadGoogle = {\n            name: 'Google Cloud Platform',\n            component: <WizardStepUploadGoogle\n                uploadGoogle={ this.state.uploadGoogle }\n                setGoogleAccountType={ this.setGoogleAccountType }\n                setUploadOptions={ this.setUploadOptions }\n                errors={ this.state.uploadGoogleErrors } />\n        };\n\n        const uploadDestinationSteps = [];\n        if (this.state.uploadDestinations.aws) {\n            uploadDestinationSteps.push(StepUploadAWS);\n        }\n\n        if (this.state.uploadDestinations.azure) {\n            uploadDestinationSteps.push(StepUploadAzure);\n        }\n\n        if (this.state.uploadDestinations.google) {\n            uploadDestinationSteps.push(StepUploadGoogle);\n        }\n\n        const StepTargetEnv = {\n            name: 'Target environment',\n            steps: uploadDestinationSteps\n        };\n\n        const steps = [\n            StepImageOutput,\n            ...(StepTargetEnv.steps.length > 0 ? [ StepTargetEnv ] : []),\n            {\n                name: 'Registration',\n                component: <WizardStepRegistration\n                    subscription={ this.state.subscription }\n                    subscribeNow={ this.state.subscribeNow }\n                    setSubscription={ this.setSubscription }\n                    setSubscribeNow={ this.setSubscribeNow }\n                    errors={ this.state.subscriptionErrors } /> },\n            {\n                name: 'Packages',\n                component: <WizardStepPackages\n                    packageListChange={ this.packageListChange }\n                    release={ this.state.release }\n                    packagesAvailableComponents={ this.state.packagesAvailableComponents }\n                    packagesFilteredComponents={ this.state.packagesFilteredComponents }\n                    handlePackagesSearch={ this.handlePackagesSearch }\n                    handlePackagesFilter= { this.handlePackagesFilter }\n                    setPackagesSearchName={ this.setPackagesSearchName } /> },\n            {\n                name: 'Review',\n                component: <WizardStepReview\n                    release={ this.state.release }\n                    uploadAWS={ this.state.uploadAWS }\n                    uploadGoogle={ this.state.uploadGoogle }\n                    uploadDestinations={ this.state.uploadDestinations }\n                    subscription={ this.state.subscription }\n                    subscribeNow={ this.state.subscribeNow }\n                    uploadAWSErrors={ this.state.uploadAWSErrors }\n                    subscriptionErrors={ this.state.subscriptionErrors } />,\n                nextButtonText: 'Create',\n            }\n        ];\n        return (\n            <React.Fragment>\n                <Wizard\n                    title={ 'Create image' }\n                    onNext={ this.onStep }\n                    onGoToStep={ this.onStep }\n                    steps={ steps }\n                    onClose={ this.onClose }\n                    onSave={ this.onSave }\n                    isOpen />\n            </React.Fragment>\n        );\n    }\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        updateCompose: (compose) => dispatch(actions.updateCompose(compose)),\n    };\n}\n\nCreateImageWizard.propTypes = {\n    updateCompose: PropTypes.func,\n    history: PropTypes.object,\n};\n\nexport default connect(null, mapDispatchToProps)(withRouter(CreateImageWizard));\n"],"sourceRoot":""}