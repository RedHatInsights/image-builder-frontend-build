{"version":3,"file":"js/326.1643722542584.71878478f83b655e83b0.js","mappings":"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","sources":["webpack:///./src/Components/CreateImageWizard/steps/imageOutputStepMapper.js","webpack:///./src/Components/CreateImageWizard/steps/imageOutput.js","webpack:///./src/Components/CreateImageWizard/steps/googleCloud.js","webpack:///./src/Components/CreateImageWizard/formComponents/ReviewStep.js","webpack:///./src/Components/CreateImageWizard/formComponents/TargetEnvironment.js","webpack:///./src/Components/CreateImageWizard/formComponents/Packages.js","webpack:///./src/Components/CreateImageWizard/formComponents/RadioWithPopover.js","webpack:///./src/Components/CreateImageWizard/formComponents/AzureAuthButton.js","webpack:///./src/Components/CreateImageWizard/ImageCreator.js","webpack:///./src/Components/CreateImageWizard/steps/aws.js","webpack:///./src/Components/CreateImageWizard/steps/msAzure.js","webpack:///./src/Components/CreateImageWizard/steps/packages.js","webpack:///./src/Components/CreateImageWizard/steps/registration.js","webpack:///./src/Components/CreateImageWizard/formComponents/CustomSubmitButtons.js","webpack:///./src/Components/CreateImageWizard/steps/review.js","webpack:///./src/Components/CreateImageWizard/CreateImageWizard.js","webpack:///./src/api.js","webpack:///./src/constants.js","webpack:///./src/store/actions/actions.js"],"sourcesContent":["import { RHEL_8 } from '../../../constants.js';\n\nexport default ({ 'target-environment': targetEnv, release } = {}, { skipAws, skipGoogle, skipAzure } = {}) => {\n    if (!skipAws && targetEnv?.aws) {\n        return 'aws-target-env';\n    }\n\n    if (!skipGoogle && targetEnv?.google) {\n        return 'google-cloud-target-env';\n    }\n\n    if (!skipAzure && targetEnv?.azure) {\n        return 'ms-azure-target-env';\n    }\n\n    return release === RHEL_8 ? 'registration' : 'packages';\n};\n","import componentTypes from '@data-driven-forms/react-form-renderer/component-types';\nimport validatorTypes from '@data-driven-forms/react-form-renderer/validator-types';\nimport nextStepMapper from './imageOutputStepMapper';\nimport { RHEL_8 } from '../../../constants.js';\n\nexport const releaseValues = {\n    [RHEL_8]: 'Red Hat Enterprise Linux (RHEL) 8',\n    'centos-8': 'CentOS Stream 8'\n};\n\nexport default {\n    title: 'Image output',\n    name: 'image-output',\n    nextStep: ({ values }) => nextStepMapper(values),\n    fields: [\n        {\n            component: componentTypes.SELECT,\n            label: 'Release',\n            name: 'release',\n            simpleValue: true,\n            initialValue: RHEL_8,\n            options: Object.entries(releaseValues).map(([ key, title ]) => ({\n                label: title,\n                value: key\n            })),\n            isRequired: true,\n            validate: [\n                {\n                    type: validatorTypes.REQUIRED\n                }\n            ],\n        },\n        {\n            component: 'output',\n            name: 'target-environment',\n            label: 'Select target environments',\n            isRequired: true,\n            validate: [\n                {\n                    type: validatorTypes.REQUIRED\n                }\n            ],\n        }\n    ]\n};\n","import React from 'react';\nimport componentTypes from '@data-driven-forms/react-form-renderer/component-types';\nimport validatorTypes from '@data-driven-forms/react-form-renderer/validator-types';\nimport { HelpIcon } from '@patternfly/react-icons';\nimport nextStepMapper from './imageOutputStepMapper';\nimport { Title, Text, Popover, TextContent, TextList, TextListItem, Button } from '@patternfly/react-core';\nimport PropTypes from 'prop-types';\n\nexport const googleAccType = {\n    googleAccount: 'Google account',\n    serviceAccount: 'Service account',\n    googleGroup: 'Google group',\n    domain: 'Domain'\n};\n\nconst PopoverInfo = ({ appendTo }) => {\n    return <Popover\n        appendTo={ appendTo }\n        hasAutoWidth\n        maxWidth='35rem'\n        headerContent={ 'Valid account types' }\n        bodyContent={ <TextContent>\n            <Text>The following account types can have an image shared with them:</Text>\n            <TextList>\n                <TextListItem>\n                    <strong>Google account:</strong> A Google account represents a developer, an administrator,\n    or any other person who interacts with Google Cloud. e.g., <em>`alice@gmail.com`</em>.\n                </TextListItem>\n                <TextListItem>\n                    <strong>Service account:</strong> A service account is an account for an application instead\n    of an individual end user. e.g., <em>`myapp@appspot.gserviceaccount.com`</em>.\n                </TextListItem>\n                <TextListItem>\n                    <strong>Google group:</strong> A Google group is a named collection of Google accounts and\n    service accounts. e.g., <em>`admins@example.com`</em>.\n                </TextListItem>\n                <TextListItem>\n                    <strong>Google Workspace domain/Cloud Identity domain:</strong> A Google workspace or cloud identity\n    domain represents a virtual group of all the Google accounts in an organization. These domains\n    represent your organization&apos;s internet domain name. e.g., <em>`mycompany.com`</em>.\n                </TextListItem>\n            </TextList>\n        </TextContent> }>\n        <Button\n            variant=\"plain\"\n            aria-label=\"Account info\"\n            aria-describedby=\"google-account-type\"\n            className=\"pf-c-form__group-label-help\">\n            <HelpIcon />\n        </Button>\n    </Popover>;\n};\n\nPopoverInfo.propTypes = {\n    appendTo: PropTypes.any\n};\n\nexport default {\n    title: 'Google Cloud Platform',\n    customTitle: <Title headingLevel=\"h1\" size=\"xl\">Target environment - Google Cloud Platform</Title>,\n    name: 'google-cloud-target-env',\n    substepOf: 'Target environment',\n    nextStep: ({ values }) => nextStepMapper(values, { skipGoogle: true, skipAws: true }),\n    fields: [\n        {\n            component: componentTypes.PLAIN_TEXT,\n            name: 'google-cloud-text-component',\n            label: <Text>\n            Your image will be uploaded to Google Cloud Platform and shared with the email you provide below. <br />\n            The image should be copied to your account within 14 days.\n            </Text>\n        },\n        {\n            component: 'radio-popover',\n            label: 'Type',\n            Popover: PopoverInfo,\n            name: 'google-account-type',\n            initialValue: 'googleAccount',\n            options: Object.entries(googleAccType).map(([ value, label ]) => ({\n                label: value === 'domain' ? 'Google Workspace domain or Cloud Identity domain' : label,\n                value\n            })),\n            isRequired: true,\n            validate: [\n                {\n                    type: validatorTypes.REQUIRED,\n                },\n            ],\n        },\n        {\n            component: componentTypes.TEXT_FIELD,\n            name: 'google-email',\n            'data-testid': 'input-google-email',\n            type: 'text',\n            label: 'Email address',\n            condition: {\n                or: [\n                    { when: 'google-account-type', is: 'googleAccount' },\n                    { when: 'google-account-type', is: 'serviceAccount' },\n                    { when: 'google-account-type', is: 'googleGroup' },\n                    { when: 'google-account-type', is: null },\n                ]\n            },\n            isRequired: true,\n            validate: [\n                {\n                    type: validatorTypes.REQUIRED,\n                },\n                {\n                    type: validatorTypes.PATTERN,\n                    pattern: '[a-z0-9._%+-]+@[a-z0-9.-]+.[a-z]{2,}$',\n                    message: 'Please enter a valid email address'\n                }\n            ],\n        },\n        {\n            component: componentTypes.TEXT_FIELD,\n            name: 'google-domain',\n            type: 'text',\n            label: 'Domain',\n            condition: {\n                when: 'google-account-type',\n                is: 'domain'\n            },\n            isRequired: true,\n            validate: [\n                {\n                    type: validatorTypes.REQUIRED,\n                },\n            ],\n        }\n    ]\n};\n","import React, { useEffect, useState } from 'react';\nimport {\n    DescriptionList, DescriptionListTerm, DescriptionListGroup, DescriptionListDescription,\n    List, ListItem,\n    Spinner,\n    Tabs, Tab, TabTitleText,\n    Text, TextContent, TextVariants, TextList, TextListVariants, TextListItem, TextListItemVariants\n} from '@patternfly/react-core';\nimport useFormApi from '@data-driven-forms/react-form-renderer/use-form-api';\nimport { releaseValues } from '../steps/imageOutput';\nimport { googleAccType } from '../steps/googleCloud';\n\nconst ReviewStep = () => {\n    const [ activeTabKey, setActiveTabKey ] = useState(0);\n    const [ orgId, setOrgId ] = useState();\n    const { change, getState } = useFormApi();\n\n    useEffect(() => {\n        if (getState()?.values?.['register-system'] !== 'register-later') {\n            (async () => {\n                const userData = await insights?.chrome?.auth?.getUser();\n                const id = userData?.identity?.internal?.org_id;\n                setOrgId(id);\n                change('subscription-organization-id', id);\n            })();\n        }\n    });\n\n    const handleTabClick = (event, tabIndex) => {\n        setActiveTabKey(tabIndex);\n    };\n\n    return (\n        <>\n            <Text>\n                    Review the information and click &quot;Create image&quot;\n                    to create the image using the following criteria.\n            </Text>\n            <DescriptionList>\n                <DescriptionListGroup>\n                    <DescriptionListTerm>Release</DescriptionListTerm>\n                    <DescriptionListDescription>\n                        {releaseValues?.[getState()?.values?.release]}\n                    </DescriptionListDescription>\n                </DescriptionListGroup>\n            </DescriptionList>\n            <Tabs isFilled activeKey={ activeTabKey } onSelect={ handleTabClick } className=\"pf-u-w-75\">\n                <Tab eventKey={ 0 } title={ <TabTitleText>Target environment</TabTitleText> } data-testid='tab-target'>\n                    <List isPlain iconSize=\"large\">\n                        {getState()?.values?.['target-environment']?.aws &&\n                            <ListItem icon={ <img className='provider-icon' src='/apps/frontend-assets/partners-icons/aws.svg' /> }>\n                                <TextContent>\n                                    <Text component={ TextVariants.h3 }>\n                                    Amazon Web Services\n                                    </Text>\n                                    <TextList component={ TextListVariants.dl }>\n                                        <TextListItem component={ TextListItemVariants.dt }>Account ID</TextListItem>\n                                        <TextListItem component={ TextListItemVariants.dd }>\n                                            {getState()?.values?.['aws-account-id']}\n                                        </TextListItem>\n                                    </TextList>\n                                </TextContent>\n                            </ListItem>\n                        }\n                        {getState()?.values?.['target-environment']?.google &&\n                            <ListItem\n                                className='pf-c-list__item pf-u-mt-md'\n                                icon={ <img className='provider-icon' src='/apps/frontend-assets/partners-icons/google-cloud-short.svg' /> }>\n                                <TextContent>\n                                    <Text component={ TextVariants.h3 }>Google Cloud Platform</Text>\n                                    <TextList component={ TextListVariants.dl }>\n                                        <TextListItem component={ TextListItemVariants.dt }>\n                                            {googleAccType?.[getState()?.values?.['google-account-type']]}\n                                        </TextListItem>\n                                        <TextListItem component={ TextListItemVariants.dd }>\n                                            {getState()?.values?.['google-email'] || getState()?.values?.['google-domain']}\n                                        </TextListItem>\n                                    </TextList>\n                                </TextContent>\n                            </ListItem>\n                        }\n                        {getState()?.values?.['target-environment']?.azure &&\n                            <ListItem\n                                className='pf-c-list__item pf-u-mt-md'\n                                icon={ <img className='provider-icon' src='/apps/frontend-assets/partners-icons/microsoft-azure-short.svg' /> }>\n                                <TextContent>\n                                    <Text component={ TextVariants.h3 }>Microsoft Azure</Text>\n                                    <TextList component={ TextListVariants.dl }>\n                                        <TextListItem component={ TextListItemVariants.dt }>\n                                        Subscription ID\n                                        </TextListItem>\n                                        <TextListItem component={ TextListItemVariants.dd }>\n                                            {getState()?.values?.['azure-subscription-id']}\n                                        </TextListItem>\n                                        <TextListItem component={ TextListItemVariants.dt }>\n                                    Tenant ID\n                                        </TextListItem>\n                                        <TextListItem component={ TextListItemVariants.dd }>\n                                            {getState()?.values?.['azure-tenant-id']}\n                                        </TextListItem>\n                                        <TextListItem component={ TextListItemVariants.dt }>\n                                        Resource group\n                                        </TextListItem>\n                                        <TextListItem component={ TextListItemVariants.dd }>\n                                            {getState()?.values?.['azure-resource-group']}\n                                        </TextListItem>\n                                    </TextList>\n                                </TextContent>\n                            </ListItem>\n                        }\n                        {getState()?.values?.['target-environment']?.vsphere &&\n                            <ListItem>\n                                <TextContent>\n                                    <Text component={ TextVariants.h3 }>\n                                        VMWare\n                                    </Text>\n                                </TextContent>\n                            </ListItem>\n                        }\n                        {getState()?.values?.['target-environment']?.['guest-image'] &&\n                            <ListItem>\n                                <TextContent>\n                                    <Text component={ TextVariants.h3 }>\n                                        Virtualization - Guest image\n                                    </Text>\n                                </TextContent>\n                            </ListItem>\n                        }\n                        {getState()?.values?.['target-environment']?.['image-installer'] &&\n                            <ListItem>\n                                <TextContent>\n                                    <Text component={ TextVariants.h3 }>\n                                        Bare metal - Installer\n                                    </Text>\n                                </TextContent>\n                            </ListItem>\n                        }\n                    </List>\n                </Tab>\n                {getState()?.values?.release.includes('rhel') &&\n                    <Tab eventKey={ 1 } title={ <TabTitleText>Registration</TabTitleText> } data-testid='tab-registration'>\n                        {getState()?.values?.['register-system'] === 'register-later' &&\n                            <TextContent>\n                                <TextList component={ TextListVariants.dl }>\n                                    <TextListItem component={ TextListItemVariants.dt }>\n                                        Subscription\n                                    </TextListItem>\n                                    <TextListItem component={ TextListItemVariants.dd }>\n                                        Register the system later\n                                    </TextListItem>\n                                </TextList>\n                            </TextContent>\n                        }\n                        {(getState()?.values?.['register-system'] === 'register-now' ||\n                            getState()?.values?.['register-system'] === 'register-now-insights') &&\n                            <TextContent>\n                                <TextList component={ TextListVariants.dl }>\n                                    <TextListItem component={ TextListItemVariants.dt }>\n                                        Subscription\n                                    </TextListItem>\n                                    <TextListItem component={ TextListItemVariants.dd }>\n                                        {getState()?.values?.['register-system'] === 'register-now-insights' &&\n                                            'Register with Subscriptions and Red Hat Insights'\n                                        }\n                                        {getState()?.values?.['register-system'] === 'register-now' &&\n                                            'Register with Subscriptions'\n                                        }\n                                    </TextListItem>\n                                    <TextListItem component={ TextListItemVariants.dt }>\n                                        Activation key\n                                    </TextListItem>\n                                    <TextListItem component={ TextListItemVariants.dd }>\n                                        {getState()?.values?.['subscription-activation-key']}\n                                    </TextListItem>\n                                    <TextListItem component={ TextListItemVariants.dt }>\n                                        Organization ID\n                                    </TextListItem>\n                                    {orgId !== undefined ? (\n                                        <TextListItem component={ TextListItemVariants.dd } data-testid='organization-id'>\n                                            {orgId}\n                                        </TextListItem>\n                                    ) : (\n                                        <TextListItem component={ TextListItemVariants.dd }>\n                                            <Spinner />\n                                        </TextListItem>\n                                    )}\n                                </TextList>\n                            </TextContent>\n                        }\n                    </Tab>\n                }\n                <Tab eventKey={ 2 } title={ <TabTitleText>System configuration</TabTitleText> } data-testid='tab-system'>\n                    <TextContent>\n                        <Text component={ TextVariants.h3 }>Packages</Text>\n                        <TextList component={ TextListVariants.dl }>\n                            <TextListItem component={ TextListItemVariants.dt }>\n                                Chosen\n                            </TextListItem>\n                            <TextListItem component={ TextListItemVariants.dd } data-testid='chosen-packages-count'>\n                                {getState()?.values?.['selected-packages']?.length || 0}\n                            </TextListItem>\n                        </TextList>\n                    </TextContent>\n                </Tab>\n            </Tabs>\n        </>\n    );\n};\n\nexport default ReviewStep;\n","import React, { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport useFormApi from '@data-driven-forms/react-form-renderer/use-form-api';\nimport useFieldApi from '@data-driven-forms/react-form-renderer/use-field-api';\nimport { Checkbox, FormGroup, Text, TextVariants, Tile } from '@patternfly/react-core';\nimport './TargetEnvironment.scss';\n\nconst TargetEnvironment = ({ label, isRequired, ...props }) => {\n    const { getState, change } = useFormApi();\n    const { input } = useFieldApi({ label, isRequired, ...props });\n    const [ environment, setEnvironment ] = useState({\n        aws: false,\n        azure: false,\n        google: false,\n        vsphere: false,\n        'guest-image': false,\n        'image-installer': false,\n    });\n\n    useEffect(() => {\n        if (getState()?.values?.[input.name]) {\n            setEnvironment(getState().values[input.name]);\n        }\n    }, []);\n\n    const handleSetEnvironment = (env) => setEnvironment((prevEnv) => {\n        const newEnv = ({\n            ...prevEnv,\n            [env]: !prevEnv[env]\n        });\n        change(input.name, newEnv);\n        return newEnv;\n    });\n\n    return (\n        <>\n            <FormGroup isRequired={ isRequired } label={ label } data-testid=\"target-select\">\n                <FormGroup label={ <Text component={ TextVariants.small }>Public cloud</Text> } data-testid=\"target-public\">\n                    <div className=\"tiles\">\n                        <Tile\n                            className=\"tile pf-u-mr-sm\"\n                            data-testid=\"upload-aws\"\n                            title=\"Amazon Web Services\"\n                            icon={ <img\n                                className='provider-icon'\n                                src={ '/apps/frontend-assets/partners-icons/aws.svg' } /> }\n                            onClick={ () => handleSetEnvironment('aws') }\n                            isSelected={ environment.aws }\n                            isStacked\n                            isDisplayLarge />\n                        <Tile\n                            className=\"tile pf-u-mr-sm\"\n                            data-testid=\"upload-google\"\n                            title=\"Google Cloud Platform\"\n                            icon={ <img\n                                className='provider-icon'\n                                src={ '/apps/frontend-assets/partners-icons/google-cloud-short.svg' } /> }\n                            onClick={ () => handleSetEnvironment('google') }\n                            isSelected={ environment.google }\n                            isStacked\n                            isDisplayLarge />\n                        <Tile\n                            className=\"tile pf-u-mr-sm\"\n                            data-testid=\"upload-azure\"\n                            title=\"Microsoft Azure\"\n                            icon={ <img\n                                className='provider-icon'\n                                src={ '/apps/frontend-assets/partners-icons/microsoft-azure-short.svg' } /> }\n                            onClick={ () => handleSetEnvironment('azure') }\n                            isSelected={ environment.azure }\n                            isStacked\n                            isDisplayLarge />\n                    </div>\n                </FormGroup>\n                <FormGroup label={ <Text component={ TextVariants.small }>Private cloud</Text> } data-testid=\"target-private\">\n                    <Checkbox\n                        label=\"VMWare\"\n                        isChecked={ environment.vsphere }\n                        onChange={ () => handleSetEnvironment('vsphere') }\n                        aria-label=\"VMWare checkbox\"\n                        id=\"checkbox-vmware\"\n                        name=\"VMWare\"\n                        data-testid=\"checkbox-vmware\" />\n                </FormGroup>\n                <FormGroup label={ <Text component={ TextVariants.small }>Other</Text> } data-testid=\"target-other\">\n                    <Checkbox\n                        label=\"Virtualization - Guest image\"\n                        isChecked={ environment['guest-image'] }\n                        onChange={ () => handleSetEnvironment('guest-image') }\n                        aria-label=\"Virtualization guest image checkbox\"\n                        id=\"checkbox-guest-image\"\n                        name=\"Virtualization guest image\"\n                        data-testid=\"checkbox-guest-image\" />\n                    <Checkbox\n                        label=\"Bare metal - Installer\"\n                        isChecked={ environment['image-installer'] }\n                        onChange={ () => handleSetEnvironment('image-installer') }\n                        aria-label=\"Bare metal installer checkbox\"\n                        id=\"checkbox-image-installer\"\n                        name=\"Bare metal installer\"\n                        data-testid=\"checkbox-image-installer\" />\n                </FormGroup>\n            </FormGroup>\n        </>\n    );\n};\n\nTargetEnvironment.propTypes = {\n    label: PropTypes.node,\n    isRequired: PropTypes.bool\n};\n\nTargetEnvironment.defaultProps = {\n    label: '',\n    isRequired: false\n};\n\nexport default TargetEnvironment;\n","import React, { useState, useRef, useEffect, useCallback } from 'react';\nimport useFormApi from '@data-driven-forms/react-form-renderer/use-form-api';\nimport useFieldApi from '@data-driven-forms/react-form-renderer/use-field-api';\nimport api from '../../../api';\nimport PropTypes from 'prop-types';\nimport {\n    Button,\n    DualListSelector,\n    DualListSelectorPane,\n    DualListSelectorList,\n    DualListSelectorListItem,\n    DualListSelectorControlsWrapper,\n    DualListSelectorControl,\n    SearchInput,\n    TextContent\n} from '@patternfly/react-core';\nimport { AngleDoubleLeftIcon, AngleLeftIcon, AngleDoubleRightIcon, AngleRightIcon } from '@patternfly/react-icons';\n\n// the fields isHidden and isSelected should not be included in the package list sent for image creation\nconst removePackagesDisplayFields = (packages) => packages.map((pack) => ({\n    name: pack.name,\n    summary: pack.summary,\n}));\n\nconst Packages = ({ defaultArch, ...props }) => {\n    const { change, getState } = useFormApi();\n    const { input } = useFieldApi(props);\n    const packagesSearchName = useRef();\n    const [ packagesAvailable, setPackagesAvailable ] = useState([]);\n    const [ packagesAvailableFound, setPackagesAvailableFound ] = useState(true);\n    const [ packagesChosen, setPackagesChosen ] = useState([]);\n    const [ packagesChosenFound, setPackagesChosenFound ] = useState(true);\n    const [ filterChosen, setFilterChosen ] = useState('');\n    const [ focus, setFocus ] = useState('');\n\n    // this effect only triggers on mount\n    useEffect(() => {\n        const selectedPackages = getState()?.values?.['selected-packages'];\n        if (selectedPackages) {\n            setPackagesChosen(selectedPackages);\n        }\n    }, []);\n\n    const searchResultsComparator = useCallback((searchTerm) => {\n        return (a, b) => {\n            // check exact match first\n            if (a.name === searchTerm) {\n                return -1;\n            }\n\n            if (b.name === searchTerm) {\n                return 1;\n            }\n\n            // check for packages that start with the search term\n            if (a.name.startsWith(searchTerm) && !b.name.startsWith(searchTerm)) {\n                return -1;\n            }\n\n            if (b.name.startsWith(searchTerm) && !a.name.startsWith(searchTerm)) {\n                return 1;\n            }\n\n            // if both (or neither) start with the search term\n            // sort alphabetically\n            if (a.name < b.name) {\n                return -1;\n            }\n\n            if (b.name < a.name) {\n                return 1;\n            }\n\n            return 0;\n        };\n    });\n\n    const sortPackages = useCallback((packageList) => {\n        const sortResults = packageList.sort(searchResultsComparator(packagesSearchName.current));\n        setPackagesAvailable(sortResults);\n    });\n\n    // filter the packages by name\n    const filterPackagesAvailable = useCallback((packageList) => {\n        return packageList.filter((availablePackage) => {\n            // returns true if no packages in the available or chosen list have the same name\n            return !packagesChosen.some((chosenPackage) => availablePackage.name === chosenPackage.name);\n        });\n    });\n\n    // call api to list available packages\n    const handlePackagesAvailableSearch = async () => {\n        const { data } = await api.getPackages(\n            getState()?.values?.release,\n            getState()?.values?.architecture || defaultArch,\n            packagesSearchName.current\n        );\n        if (data) {\n            const packagesAvailableFiltered = filterPackagesAvailable(data);\n            sortPackages(packagesAvailableFiltered);\n            setPackagesAvailableFound(true);\n        } else {\n            setPackagesAvailableFound(false);\n        }\n    };\n\n    // filter displayed selected packages\n    const handlePackagesChosenSearch = () => {\n        let found = false;\n        const filteredPackagesChosen = packagesChosen.map((pack) => {\n            if (!pack.name.includes(filterChosen)) {\n                pack.isHidden = true;\n            } else {\n                pack.isHidden = false;\n                found = true;\n            }\n\n            return pack;\n        });\n        setPackagesChosenFound(found);\n        setPackagesChosen(filteredPackagesChosen);\n    };\n\n    const keydownHandler = (event) => {\n        if (event.key === 'Enter') {\n            if (focus === 'available') {\n                event.stopPropagation();\n                handlePackagesAvailableSearch();\n            } else if (focus === 'chosen') {\n                event.stopPropagation();\n                handlePackagesChosenSearch();\n            }\n        }\n    };\n\n    useEffect(() => {\n        document.addEventListener('keydown', keydownHandler, true);\n\n        return () => {\n            document.removeEventListener('keydown', keydownHandler, true);\n        };\n    });\n\n    // move selected packages\n    const moveSelected = (fromAvailable) => {\n        const sourcePackages = fromAvailable ? packagesAvailable : packagesChosen;\n        const destinationPackages = fromAvailable ? packagesChosen : packagesAvailable;\n\n        const updatedSourcePackages = sourcePackages.filter((pack) => {\n            if (pack.selected) {\n                pack.selected = false;\n                destinationPackages.push(pack);\n                return false;\n            }\n\n            return true;\n        });\n\n        if (fromAvailable) {\n            sortPackages(updatedSourcePackages);\n            setPackagesChosen(destinationPackages);\n            // set the steps field to the current chosen packages list\n            change(input.name, removePackagesDisplayFields(destinationPackages));\n        } else {\n            setPackagesChosen(updatedSourcePackages);\n            sortPackages(packagesAvailable);\n            // set the steps field to the current chosen packages list\n            change(input.name, removePackagesDisplayFields(updatedSourcePackages));\n        }\n    };\n\n    // move all packages\n    const moveAll = (fromAvailable) => {\n        let chosenPackages = [];\n        if (fromAvailable) {\n            chosenPackages = [ ...packagesAvailable.filter(pack => !pack.isHidden), ...packagesChosen ];\n            setPackagesChosen(chosenPackages);\n            sortPackages([ ...packagesAvailable.filter(pack => pack.isHidden) ]);\n        } else {\n            chosenPackages = [ ...packagesChosen.filter(pack => pack.isHidden) ];\n            sortPackages([ ...packagesChosen.filter(pack => !pack.isHidden), ...packagesAvailable ]);\n            setPackagesChosen(chosenPackages);\n        }\n\n        // set the steps field to the current chosen packages list\n        change(input.name, removePackagesDisplayFields(chosenPackages));\n    };\n\n    const onOptionSelect = (event, index, isChosen) => {\n        if (isChosen) {\n            const newChosen = [ ...packagesChosen ];\n            newChosen[index].selected = !packagesChosen[index].selected;\n            setPackagesChosen(newChosen);\n        } else {\n            const newAvailable = [ ...packagesAvailable ];\n            newAvailable[index].selected = !packagesAvailable[index].selected;\n            sortPackages(newAvailable);\n        }\n    };\n\n    return (\n        <DualListSelector>\n            <DualListSelectorPane\n                title=\"Available packages\"\n                searchInput={ <SearchInput\n                    placeholder=\"Search for a package\"\n                    data-testid=\"search-available-pkgs-input\"\n                    value={ packagesSearchName.current }\n                    onFocus={ () => setFocus('available') }\n                    onBlur={ () => setFocus('') }\n                    onChange={ (val) => {\n                        packagesSearchName.current = val;\n                    } } /> }\n                actions={ [\n                    <Button\n                        aria-label=\"Search button for available packages\"\n                        key=\"availableSearchButton\"\n                        data-testid=\"search-available-pkgs-button\"\n                        onClick={ handlePackagesAvailableSearch }>\n                        Search\n                    </Button>\n                ] }>\n                <DualListSelectorList data-testid=\"available-pkgs-list\">\n                    {!packagesAvailable.length ? (\n                        <p className=\"pf-u-text-align-center pf-u-mt-md\">\n                            {!packagesAvailableFound\n                                ? 'No packages found'\n                                : <>Search above to add additional<br />packages to your image</>\n                            }\n                        </p>\n                    ) : (packagesAvailable.map((pack, index) => {\n                        return !pack.isHidden ? (\n                            <DualListSelectorListItem\n                                key={ index }\n                                isSelected={ pack.selected }\n                                onOptionSelect={ (e) => onOptionSelect(e, index, false) }>\n                                <TextContent key={ `${pack.name}-${index}` }>\n                                    <span className=\"pf-c-dual-list-selector__item-text\">{ pack.name }</span>\n                                    <small>{ pack.summary }</small>\n                                </TextContent>\n                            </DualListSelectorListItem>\n                        ) : null;\n                    }))}\n                </DualListSelectorList>\n            </DualListSelectorPane>\n            <DualListSelectorControlsWrapper\n                aria-label=\"Selector controls\">\n                <DualListSelectorControl\n                    isDisabled={ !packagesAvailable.some(option => option.selected) }\n                    onClick={ () => moveSelected(true) }\n                    aria-label=\"Add selected\"\n                    tooltipContent=\"Add selected\">\n                    <AngleRightIcon />\n                </DualListSelectorControl>\n                <DualListSelectorControl\n                    isDisabled={ !packagesAvailable.length }\n                    onClick={ () => moveAll(true) }\n                    aria-label=\"Add all\"\n                    tooltipContent=\"Add all\">\n                    <AngleDoubleRightIcon />\n                </DualListSelectorControl>\n                <DualListSelectorControl\n                    isDisabled={ !packagesChosen.length || !packagesChosenFound }\n                    onClick={ () => moveAll(false) }\n                    aria-label=\"Remove all\"\n                    tooltipContent=\"Remove all\">\n                    <AngleDoubleLeftIcon />\n                </DualListSelectorControl>\n                <DualListSelectorControl\n                    onClick={ () => moveSelected(false) }\n                    isDisabled={ !packagesChosen.some(option => option.selected) || !packagesChosenFound }\n                    aria-label=\"Remove selected\"\n                    tooltipContent=\"Remove selected\">\n                    <AngleLeftIcon />\n                </DualListSelectorControl>\n            </DualListSelectorControlsWrapper>\n            <DualListSelectorPane\n                title=\"Chosen packages\"\n                searchInput={ <SearchInput\n                    placeholder=\"Search for a package\"\n                    data-testid=\"search-chosen-pkgs-input\"\n                    value={ filterChosen }\n                    onFocus={ () => setFocus('chosen') }\n                    onBlur={ () => setFocus('') }\n                    onChange={ (val) => setFilterChosen(val) } /> }\n                actions={ [\n                    <Button\n                        aria-label=\"Search button for selected packages\"\n                        key=\"selectedSearchButton\"\n                        data-testid=\"search-chosen-pkgs-button\"\n                        onClick={ handlePackagesChosenSearch }>\n                        Search\n                    </Button>\n                ] }\n                isChosen>\n                <DualListSelectorList data-testid=\"chosen-pkgs-list\">\n                    {!packagesChosen.length ? (\n                        <p className=\"pf-u-text-align-center pf-u-mt-md\">\n                            No packages added\n                        </p>\n                    ) : !packagesChosenFound ? (\n                        <p className=\"pf-u-text-align-center pf-u-mt-md\">\n                            No packages found\n                        </p>\n                    ) : (packagesChosen.map((pack, index) => {\n                        return !pack.isHidden ? (\n                            <DualListSelectorListItem\n                                key={ index }\n                                isSelected={ pack.selected }\n                                onOptionSelect={ (e) => onOptionSelect(e, index, true) }>\n                                <TextContent key={ `${pack.name}-${index}` }>\n                                    <span className=\"pf-c-dual-list-selector__item-text\">{ pack.name }</span>\n                                    <small>{ pack.summary }</small>\n                                </TextContent>\n                            </DualListSelectorListItem>\n                        ) : null;\n                    }))}\n                </DualListSelectorList>\n            </DualListSelectorPane>\n        </DualListSelector>\n    );\n};\n\nPackages.propTypes = {\n    defaultArch: PropTypes.string,\n};\n\nexport default Packages;\n","import React, { useRef } from 'react';\nimport Radio from '@data-driven-forms/pf4-component-mapper/radio';\nimport PropTypes from 'prop-types';\n\nconst RadioWithPopover = ({ Popover, ...props }) => {\n    const ref = useRef();\n    return <Radio { ...props } label={ <span ref={ ref } className=\"ins-c-image--builder__popover\">{props.label}\n        <Popover />\n    </span> } />;\n};\n\nRadioWithPopover.propTypes = {\n    Popover: PropTypes.elementType.isRequired,\n    label: PropTypes.node\n};\n\nexport default RadioWithPopover;\n","import React from 'react';\nimport { Button, FormGroup } from '@patternfly/react-core';\nimport useFormApi from '@data-driven-forms/react-form-renderer/use-form-api';\n\nconst AzureAuthButton = () => {\n    const { getState } = useFormApi();\n\n    const tenantId = getState()?.values?.['azure-tenant-id'];\n    const guidRegex = new RegExp('^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$', 'i');\n\n    return (\n        <FormGroup>\n            <Button\n                component=\"a\"\n                target=\"_blank\"\n                variant=\"secondary\"\n                isDisabled={ !guidRegex.test(tenantId) }\n                href={ 'https://login.microsoftonline.com/' + tenantId +\n                '/oauth2/v2.0/authorize?client_id=b94bb246-b02c-4985-9c22-d44e66f657f4&scope=openid&' +\n                'response_type=code&response_mode=query&redirect_uri=https://portal.azure.com' }>\n                Authorize Image Builder\n            </Button>\n        </FormGroup>);\n};\n\nexport default AzureAuthButton;\n","import React from 'react';\nimport FormRenderer from '@data-driven-forms/react-form-renderer/form-renderer';\nimport Pf4FormTemplate from '@data-driven-forms/pf4-component-mapper/form-template';\nimport { componentMapper } from '@data-driven-forms/pf4-component-mapper';\nimport { Spinner } from '@patternfly/react-core';\nimport PropTypes from 'prop-types';\nimport Review from './formComponents/ReviewStep';\nimport TargetEnvironment from './formComponents/TargetEnvironment';\nimport Packages from './formComponents/Packages';\nimport RadioWithPopover from './formComponents/RadioWithPopover';\nimport AzureAuthButton from './formComponents/AzureAuthButton';\nimport Select from '@data-driven-forms/pf4-component-mapper/select';\n\nconst ImageCreator = ({ schema, onSubmit, onClose, customComponentMapper, defaultArch, className, ...props }) => {\n    return schema ? <FormRenderer\n        schema={ schema }\n        className={ `image-builder${className ? ` ${className}` : ''}` }\n        subscription={ { values: true } }\n        FormTemplate={ (props) => <Pf4FormTemplate { ...props } showFormControls={ false } /> }\n        onSubmit={ (formValues) => onSubmit(formValues) }\n        componentMapper={ {\n            ...componentMapper,\n            review: Review,\n            output: TargetEnvironment,\n            select: Select,\n            'package-selector': {\n                component: Packages,\n                defaultArch\n            },\n            'radio-popover': RadioWithPopover,\n            'azure-auth-button': AzureAuthButton,\n            ...customComponentMapper\n        } }\n        onCancel={ onClose }\n        { ...props } /> : <Spinner />;\n};\n\nImageCreator.propTypes = {\n    schema: PropTypes.object,\n    onSubmit: PropTypes.func.isRequired,\n    onClose: PropTypes.func.isRequired,\n    customComponentMapper: PropTypes.shape({\n        [PropTypes.string]: PropTypes.oneOfType([ PropTypes.node, PropTypes.shape({\n            component: PropTypes.node\n        }) ])\n    }),\n    defaultArch: PropTypes.string,\n    className: PropTypes.string\n};\n\nexport default ImageCreator;\n","import React from 'react';\nimport componentTypes from '@data-driven-forms/react-form-renderer/component-types';\nimport validatorTypes from '@data-driven-forms/react-form-renderer/validator-types';\nimport nextStepMapper from './imageOutputStepMapper';\nimport { Title } from '@patternfly/react-core';\n\nexport default {\n    title: 'Amazon Web Services',\n    customTitle: <Title headingLevel=\"h1\" size=\"xl\">Target environment - Amazon Web Service</Title>,\n    name: 'aws-target-env',\n    substepOf: 'Target environment',\n    nextStep: ({ values }) => nextStepMapper(values, { skipAws: true }),\n    fields: [\n        {\n            component: componentTypes.PLAIN_TEXT,\n            name: 'plain-text-component',\n            label: <p>\n            Your image will be uploaded to a temporary account on Amazon Web Services. <br />\n            The image will be shared with the account you provide below. <br />\n            Within the next 14 days you will need to copy the shared image to your own account.\n            After 14 days it will be unavailable and will have to be regenerated.\n            </p>\n        },\n        {\n            component: componentTypes.TEXT_FIELD,\n            name: 'aws-account-id',\n            className: 'pf-u-w-25',\n            'data-testid': 'aws-account-id',\n            type: 'text',\n            label: 'AWS account ID',\n            isRequired: true,\n            validate: [\n                {\n                    type: validatorTypes.REQUIRED,\n                },\n                {\n                    type: validatorTypes.EXACT_LENGTH,\n                    threshold: 12\n                }\n            ],\n        }\n    ]\n};\n","import React from 'react';\nimport componentTypes from '@data-driven-forms/react-form-renderer/component-types';\nimport validatorTypes from '@data-driven-forms/react-form-renderer/validator-types';\nimport { Title, Text, Button } from '@patternfly/react-core';\nimport { ExternalLinkAltIcon } from '@patternfly/react-icons';\nimport nextStepMapper from './imageOutputStepMapper';\n\nexport default {\n    title: 'Microsoft Azure',\n    customTitle: <Title headingLevel=\"h1\" size=\"xl\">Target environment - Microsoft Azure</Title>,\n    name: 'ms-azure-target-env',\n    substepOf: 'Target environment',\n    nextStep: ({ values }) => nextStepMapper(values, { skipAws: true, skipGoogle: true, skipAzure: true }),\n    fields: [\n        {\n            component: componentTypes.PLAIN_TEXT,\n            name: 'azure-text-component',\n            label: <>\n                <Text>\n                    Image Builder sends an image to an authorized Azure account.\n                </Text>\n                <Title headingLevel=\"h3\">Authorizing an Azure account</Title>\n                <Text>\n            To authorize Image Builder to push images to Microsoft Azure, the account owner\n            must configure Image Builder as an authorized application for a specific tenant ID and give it the role of\n            &quot;Contributor&quot; to at least one resource group.<br />\n                </Text>\n                <small>\n                    <Button\n                        component=\"a\"\n                        target=\"_blank\"\n                        variant=\"link\"\n                        icon={ <ExternalLinkAltIcon /> }\n                        iconPosition=\"right\"\n                        isInline\n                        href=\"https://docs.microsoft.com/en-us/azure/active-directory/develop/v2-oauth2-auth-code-flow\">\n                      Learn more about OAuth 2.0\n                    </Button>\n                </small>\n                <Title headingLevel=\"h2\">Image Destination</Title>\n                <Text>\n                    Your image will be uploaded to the resource group in the subscription you specify.\n                </Text>\n            </>\n        },\n        {\n            component: componentTypes.TEXT_FIELD,\n            name: 'azure-tenant-id',\n            'data-testid': 'azure-tenant-id',\n            type: 'text',\n            label: 'Tenant GUID',\n            required: true,\n            isRequired: true,\n            validate: [\n                {\n                    type: validatorTypes.REQUIRED,\n                },\n                {\n                    type: validatorTypes.PATTERN,\n                    pattern: /^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i,\n                    message: 'Please enter a valid tenant GUID',\n                }\n            ],\n        },\n        {\n            component: 'azure-auth-button',\n            name: 'azure-auth-button',\n            'data-testid': 'azure-auth-button',\n            required: true,\n            isRequired: true,\n        },\n        {\n            component: componentTypes.TEXT_FIELD,\n            name: 'azure-subscription-id',\n            'data-testid': 'azure-subscription-id',\n            type: 'text',\n            label: 'Subscription GUID',\n            isRequired: true,\n            validate: [\n                {\n                    type: validatorTypes.REQUIRED,\n                },\n                {\n                    type: validatorTypes.PATTERN,\n                    pattern: /^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i,\n                    message: 'Please enter a valid subscription GUID',\n                },\n            ],\n        },\n        {\n            component: componentTypes.TEXT_FIELD,\n            name: 'azure-resource-group',\n            'data-testid': 'azure-resource-group',\n            type: 'text',\n            label: 'Resource group',\n            isRequired: true,\n            validate: [\n                {\n                    type: validatorTypes.REQUIRED,\n                },\n                {\n                    type: validatorTypes.PATTERN,\n                    pattern: /^[-\\w._()]+[-\\w_()]$/,\n                    message: 'Resource group names only allow alphanumeric characters, ' +\n                        'periods, underscores, hyphens, and parenthesis and cannot end in a period',\n                },\n            ],\n        }\n        // TODO check oauth2 thing too here?\n    ]\n};\n","import React from 'react';\nimport componentTypes from '@data-driven-forms/react-form-renderer/component-types';\nimport { Text } from '@patternfly/react-core';\n\nexport default {\n    title: 'Packages',\n    name: 'packages',\n    nextStep: 'review',\n    fields: [\n        {\n            component: componentTypes.PLAIN_TEXT,\n            name: 'packages-text-component',\n            label: <Text>Add optional additional packages to your image by searching available packages.</Text>\n        },\n        {\n            component: 'package-selector',\n            name: 'selected-packages',\n            label: 'Available options'\n        }\n    ]\n};\n","import React from 'react';\nimport componentTypes from '@data-driven-forms/react-form-renderer/component-types';\nimport validatorTypes from '@data-driven-forms/react-form-renderer/validator-types';\nimport { Button, Popover, Text, TextContent, TextVariants } from '@patternfly/react-core';\nimport { ExternalLinkAltIcon, HelpIcon } from '@patternfly/react-icons';\n\nconst PopoverActivation = () => {\n    return <Popover\n        hasAutoWidth\n        maxWidth='35rem'\n        bodyContent={ <TextContent>\n            <Text>\n                Activation keys allow you to register a system with\n                appropriate subscriptions and system purpose attached.\n            </Text>\n        </TextContent> }>\n        <Button\n            variant=\"plain\"\n            aria-label=\"Activation key popover\"\n            aria-describedby=\"subscription-activation-key\"\n            className=\"pf-c-form__group-label-help\">\n            <HelpIcon />\n        </Button>\n    </Popover>;\n};\n\nexport default {\n    title: 'Registration',\n    name: 'registration',\n    nextStep: 'packages',\n    fields: [\n        {\n            component: componentTypes.RADIO,\n            label: 'Register images with Red Hat',\n            name: 'register-system',\n            initialValue: 'register-now-insights',\n            options: [\n                {\n                    label: 'Register and connect image instances with Red Hat',\n                    description: 'Includes Subscriptions and Red Hat Insights',\n                    value: 'register-now-insights',\n                    'data-testid': 'radio-register-now-insights',\n                },\n                {\n                    label: 'Register image instances only',\n                    description: 'Includes Subscriptions only',\n                    value: 'register-now',\n                    className: 'pf-u-mt-sm',\n                    'data-testid': 'radio-register-now',\n                },\n                {\n                    label: 'Register later',\n                    value: 'register-later',\n                    className: 'pf-u-mt-sm',\n                    'data-testid': 'radio-register-later',\n                },\n            ]\n        },\n        {\n            component: componentTypes.TEXT_FIELD,\n            name: 'subscription-activation-key',\n            'data-testid': 'subscription-activation-key',\n            required: true,\n            type: 'text',\n            label: (\n                <>\n                    Activation key to use for this image\n                    <PopoverActivation />\n                </>\n            ),\n            condition: {\n                or: [\n                    { when: 'register-system', is: 'register-now-insights' },\n                    { when: 'register-system', is: 'register-now' },\n                ]\n            },\n            isRequired: true,\n            validate: [\n                {\n                    type: validatorTypes.REQUIRED,\n                },\n            ],\n        },\n        {\n            component: componentTypes.PLAIN_TEXT,\n            name: 'subscription-activation-description',\n            label: (\n                <>\n                    Create and manage activation keys in the&nbsp;\n                    <Button\n                        component=\"a\"\n                        target=\"_blank\"\n                        variant=\"link\"\n                        icon={ <ExternalLinkAltIcon /> }\n                        iconPosition=\"right\"\n                        isInline\n                        href=\"https://access.redhat.com/\">\n                            Customer Portal\n                    </Button>\n                </>\n            ),\n            condition: {\n                or: [\n                    { when: 'register-system', is: 'register-now-insights' },\n                    { when: 'register-system', is: 'register-now' },\n                ]\n            },\n        },\n        {\n            component: componentTypes.PLAIN_TEXT,\n            name: 'subscription-register-later',\n            label: (\n                <TextContent>\n                    <Text component={ TextVariants.h3 }>Register Later</Text>\n                    <Text>\n                        On initial boot, systems will need to be registered manually\n                        before having access to updates or Red Hat services.\n                    </Text>\n                    <Text>\n                        Registering now is recommended.\n                    </Text>\n                </TextContent>\n            ),\n            condition: {\n                or: [\n                    { when: 'register-system', is: 'register-later' },\n                ]\n            },\n        }\n    ]\n};\n","import React, { useContext, useState } from 'react';\nimport { Button } from '@patternfly/react-core';\nimport { FormSpy } from '@data-driven-forms/react-form-renderer';\nimport WizardContext from '@data-driven-forms/react-form-renderer/wizard-context';\nimport PropTypes from 'prop-types';\n\nconst CustomButtons = ({ buttonLabels: { cancel, submit, back }}) => {\n    const [ isSaving, setIsSaving ] = useState(false);\n    const { handlePrev, formOptions } = useContext(WizardContext);\n    return <FormSpy>\n        {() => (\n            <React.Fragment>\n                <Button\n                    variant=\"primary\"\n                    type=\"button\"\n                    isDisabled={ !formOptions.valid || formOptions.getState().validating || isSaving }\n                    isLoading={ isSaving }\n                    onClick={ () => {\n                        formOptions.onSubmit({\n                            values: formOptions.getState().values,\n                            setIsSaving\n                        });\n                    } }>\n                    { isSaving ? 'Creating image' : submit}\n                </Button>\n                <Button type=\"button\" variant=\"secondary\" onClick={ handlePrev } isDisabled={ isSaving }>\n                    {back}\n                </Button>\n                <div className=\"pf-c-wizard__footer-cancel\">\n                    <Button type=\"button\" variant=\"link\" onClick={ formOptions.onCancel } isDisabled={ isSaving }>\n                        {cancel}\n                    </Button>\n                </div>\n            </React.Fragment>\n        )}\n    </FormSpy>;\n};\n\nCustomButtons.propTypes = {\n    buttonLabels: PropTypes.shape({\n        cancel: PropTypes.node,\n        submit: PropTypes.node,\n        back: PropTypes.node,\n    }),\n    isSaving: PropTypes.bool\n};\n\nexport default CustomButtons;\n","import CustomButtons from '../formComponents/CustomSubmitButtons';\n\nexport default {\n    name: 'review',\n    title: 'Review',\n    buttons: CustomButtons,\n    fields: [\n        {\n            name: 'review',\n            component: 'review'\n        }\n    ]\n};\n","import React from 'react';\nimport ImageCreator from './ImageCreator';\nimport { useNavigate } from 'react-router-dom';\nimport componentTypes from '@data-driven-forms/react-form-renderer/component-types';\nimport { Button } from '@patternfly/react-core';\nimport { ExternalLinkAltIcon } from '@patternfly/react-icons';\nimport { review, awsTarget, registration, googleCloudTarger, msAzureTarget, packages, imageOutput } from './steps';\nimport './CreateImageWizard.scss';\nimport { useDispatch } from 'react-redux';\nimport api from '../../api';\nimport { composeAdded } from '../../store/actions/actions';\nimport { addNotification } from '@redhat-cloud-services/frontend-components-notifications/redux';\n\nconst onSave = (values) => {\n    let customizations = {\n        packages: values['selected-packages']?.map(p => p.name),\n    };\n\n    if (values['register-system'] === 'register-now-insights') {\n        customizations.subscription = {\n            'activation-key': values['subscription-activation-key'],\n            insights: true,\n            organization: Number(values['subscription-organization-id']),\n            'server-url': 'subscription.rhsm.redhat.com',\n            'base-url': 'https://cdn.redhat.com/',\n        };\n    } else if (values['register-system'] === 'register-now') {\n        customizations.subscription = {\n            'activation-key': values['subscription-activation-key'],\n            insights: false,\n            organization: Number(values['subscription-organization-id']),\n            'server-url': 'subscription.rhsm.redhat.com',\n            'base-url': 'https://cdn.redhat.com/',\n        };\n    }\n\n    let requests = [];\n    if (values['target-environment']?.aws) {\n        let request = {\n            distribution: values.release,\n            image_requests: [\n                {\n                    architecture: 'x86_64',\n                    image_type: 'ami',\n                    upload_request: {\n                        type: 'aws',\n                        options: {\n                            share_with_accounts: [ values['aws-account-id'] ],\n                        },\n                    },\n                }],\n            customizations,\n        };\n        requests.push(request);\n    }\n\n    if (values['target-environment']?.google) {\n        let share = '';\n        switch (values['google-account-type']) {\n            case 'googleAccount':\n                share = `user:${values['google-email']}`;\n                break;\n            case 'serviceAccount':\n                share = `serviceAccount:${values['google-email']}`;\n                break;\n            case 'googleGroup':\n                share = `group:${values['google-email']}`;\n                break;\n            case 'domain':\n                share = `domain:${values['google-domain']}`;\n                break;\n        }\n\n        let request = {\n            distribution: values.release,\n            image_requests: [\n                {\n                    architecture: 'x86_64',\n                    image_type: 'vhd',\n                    upload_request: {\n                        type: 'gcp',\n                        options: {\n                            share_with_accounts: [ share ],\n                        },\n                    },\n                }],\n            customizations,\n        };\n\n        requests.push(request);\n    }\n\n    if (values['target-environment']?.azure) {\n        let request = {\n            distribution: values.release,\n            image_requests: [\n                {\n                    architecture: 'x86_64',\n                    image_type: 'vhd',\n                    upload_request: {\n                        type: 'azure',\n                        options: {\n                            tenant_id: values['azure-tenant-id'],\n                            subscription_id: values['azure-subscription-id'],\n                            resource_group: values['azure-resource-group'],\n                        },\n                    },\n                }],\n            customizations,\n        };\n        requests.push(request);\n    }\n\n    if (values['target-environment']?.vsphere) {\n        let request = {\n            distribution: values.release,\n            image_requests: [\n                {\n                    architecture: 'x86_64',\n                    image_type: 'vsphere',\n                    upload_request: {\n                        type: 'aws.s3',\n                        options: {}\n                    }\n                }],\n            customizations,\n        };\n        requests.push(request);\n    }\n\n    if (values['target-environment']?.['guest-image']) {\n        let request = {\n            distribution: values.release,\n            image_requests: [\n                {\n                    architecture: 'x86_64',\n                    image_type: 'guest-image',\n                    upload_request: {\n                        type: 'aws.s3',\n                        options: {}\n                    }\n                }],\n            customizations,\n        };\n        requests.push(request);\n    }\n\n    if (values['target-environment']?.['image-installer']) {\n        let request = {\n            distribution: values.release,\n            image_requests: [\n                {\n                    architecture: 'x86_64',\n                    image_type: 'image-installer',\n                    upload_request: {\n                        type: 'aws.s3',\n                        options: {}\n                    }\n                }],\n            customizations,\n        };\n        requests.push(request);\n    }\n\n    return requests;\n};\n\nconst CreateImageWizard = () => {\n    const dispatch = useDispatch();\n    const navigate = useNavigate();\n    return <ImageCreator\n        onClose={ () => navigate('/') }\n        onSubmit={ ({ values, setIsSaving }) => {\n            setIsSaving(() => true);\n            const requests = onSave(values);\n            Promise.all(requests.map(request => api.composeImage(request).then((response) => {\n                dispatch(composeAdded({\n                    ...response,\n                    request,\n                    image_status: { status: 'pending' }\n                }, true));\n            })))\n                .then(() => {\n                    navigate('/');\n                    dispatch(addNotification({\n                        variant: 'success',\n                        title: 'Your image is being created',\n                    }));\n\n                    setIsSaving(false);\n                })\n                .catch((err) => {\n                    dispatch(addNotification({\n                        variant: 'danger',\n                        title: 'Your image could not be created',\n                        description: 'Status code ' + err.response.status + ': ' + err.response.statusText,\n                    }));\n\n                    setIsSaving(false);\n                });\n        } }\n        defaultArch=\"x86_64\"\n        schema={ {\n            fields: [\n                {\n                    component: componentTypes.WIZARD,\n                    name: 'image-builder-wizard',\n                    className: 'image_builder',\n                    isDynamic: true,\n                    inModal: true,\n                    buttonLabels: {\n                        submit: 'Create image',\n                    },\n                    showTitles: true,\n                    title: 'Create image',\n                    crossroads: [ 'target-environment', 'release' ],\n                    description: <>Create a RHEL image and push it to cloud providers. <Button\n                        component=\"a\"\n                        target=\"_blank\"\n                        variant=\"link\"\n                        icon={ <ExternalLinkAltIcon /> }\n                        iconPosition=\"right\"\n                        isInline\n                        href=\"\nhttps://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/8/html/uploading_a_customized_rhel_system_image_to_cloud_environments/index\n            \">\n                Documentation\n                    </Button></>,\n                    // order in this array does not reflect order in wizard nav, this order is managed inside\n                    // of each step by `nextStep` property!\n                    fields: [\n                        imageOutput,\n                        awsTarget,\n                        googleCloudTarger,\n                        msAzureTarget,\n                        registration,\n                        packages,\n                        review,\n                    ]\n                }\n            ]\n        } } />;\n};\n\nexport default CreateImageWizard;\n","import axios from 'axios';\nimport {\n    IMAGE_BUILDER_API,\n} from './constants';\n\nconst postHeaders = { headers: { 'Content-Type': 'application/json' }};\n\nasync function composeImage(body) {\n    let path = '/compose';\n    const request = await axios.post(IMAGE_BUILDER_API.concat(path), body, postHeaders);\n    return request.data;\n}\n\nasync function getComposes(limit, offset) {\n    const params = new URLSearchParams({\n        limit,\n        offset,\n    });\n    let path = '/composes?' + params.toString();\n    const request = await axios.get(IMAGE_BUILDER_API.concat(path));\n    return request.data;\n}\n\nasync function getComposeStatus(id) {\n    let path = '/composes/' + id;\n    const request = await axios.get(IMAGE_BUILDER_API.concat(path));\n    return request.data;\n}\n\nasync function getPackages(distribution, architecture, search) {\n    const params = new URLSearchParams({\n        distribution,\n        architecture,\n        search,\n    });\n    let path = '/packages?' + params.toString();\n    const request = await axios.get(IMAGE_BUILDER_API.concat(path));\n    return request.data;\n}\n\nasync function getVersion() {\n    let path = '/version';\n    const request = await axios.get(IMAGE_BUILDER_API.concat(path));\n    return request.data;\n}\n\nexport default {\n    composeImage,\n    getComposes,\n    getComposeStatus,\n    getPackages,\n    getVersion,\n};\n","export const IMAGE_BUILDER_API = '/api/image-builder/v1';\nexport const RHEL_8 = 'rhel-85';\n","import api from '../../api';\nimport types from '../types';\n\nfunction composeUpdated(compose) {\n    return {\n        type: types.COMPOSE_UPDATED,\n        payload: { compose },\n    };\n}\n\nexport const composeFailed = (error) => ({\n    type: types.COMPOSE_FAILED,\n    payload: { error }\n});\n\nexport const composeAdded = (compose, insert) => ({\n    type: types.COMPOSE_ADDED,\n    payload: { compose, insert },\n});\n\nexport const composeStart = (composeRequest) => async dispatch => {\n    // response will be of the format {id: ''}\n    const request = api.composeImage(composeRequest);\n    return request.then(response => {\n        // add the compose id to the compose object to provide access to the id if iterating through\n        // composes and add an image status of 'pending' alongside the compose request.\n        const compose = Object.assign({}, response, { request: composeRequest },  { image_status: { status: 'pending' }});\n        dispatch(composeAdded(compose, true));\n    }).catch(err => {\n        if (err.response.status === 500) {\n            dispatch(composeFailed('Error: Something went wrong serverside'));\n        } else {\n            dispatch(composeFailed('Error: Something went wrong with the compose'));\n        }\n    });\n};\n\nexport const composeUpdatedStatus = (id, status) => ({\n    type: types.COMPOSE_UPDATED_STATUS,\n    payload: { id, status }\n});\n\nexport const composeGetStatus = (id) => async dispatch => {\n    const request = await api.getComposeStatus(id);\n    dispatch(composeUpdatedStatus(id, request.image_status));\n};\n\nexport const composesUpdatedCount = (count) => ({\n    type: types.COMPOSES_UPDATED_COUNT,\n    payload: { count }\n});\n\nexport const composesGet = (limit, offset) => async dispatch => {\n    const request = await api.getComposes(limit, offset);\n    request.data.map(compose => {\n        dispatch(composeAdded(compose, false));\n        dispatch(composeGetStatus(compose.id));\n    });\n    dispatch(composesUpdatedCount(request.meta.count));\n};\n\nfunction setRelease({ arch, distro }) {\n    return {\n        type: types.SET_RELEASE,\n        payload: {\n            arch,\n            distro,\n        }\n    };\n}\n\nfunction setUploadDestinations({ aws, azure, google }) {\n    return {\n        type: types.SET_UPLOAD_DESTINATIONS,\n        payload: {\n            aws,\n            azure,\n            google,\n        }\n    };\n}\n\nfunction setUploadAWS({ shareWithAccounts }) {\n    return {\n        type: types.SET_UPLOAD_AWS,\n        payload: {\n            shareWithAccounts,\n        }\n    };\n}\n\nfunction setUploadAzure({ tenantId, subscriptionId, resourceGroup }) {\n    return {\n        type: types.SET_UPLOAD_AZURE,\n        payload: {\n            tenantId,\n            subscriptionId,\n            resourceGroup,\n        }\n    };\n}\n\nfunction setUploadGoogle({ accountType, shareWithAccounts }) {\n    return {\n        type: types.SET_UPLOAD_GOOGLE,\n        payload: {\n            accountType,\n            shareWithAccounts,\n        }\n    };\n}\n\nfunction setSelectedPackages(selectedPackages) {\n    return {\n        type: types.SET_SELECTED_PACKAGES,\n        payload: selectedPackages\n    };\n}\n\nfunction setSubscription({ activationKey, insights, organization }) {\n    return {\n        type: types.SET_SUBSCRIPTION,\n        payload: {\n            activationKey,\n            insights,\n            organization,\n        }\n    };\n}\n\nfunction setSubscribeNow(subscribeNow) {\n    return {\n        type: types.SET_SUBSCRIBE_NOW,\n        payload: subscribeNow\n    };\n}\n\nexport default {\n    composesGet,\n    composeStart,\n    composeUpdated,\n    composeGetStatus,\n    setRelease,\n    setUploadDestinations,\n    setUploadAWS,\n    setUploadAzure,\n    setUploadGoogle,\n    setSelectedPackages,\n    setSubscription,\n    setSubscribeNow,\n};\n"],"names":["targetEnv","release","skipAws","skipGoogle","skipAzure","aws","google","azure","RHEL_8","releaseValues","title","name","nextStep","values","nextStepMapper","fields","component","componentTypes","label","simpleValue","initialValue","options","Object","entries","map","key","value","isRequired","validate","type","validatorTypes","googleAccType","googleAccount","serviceAccount","googleGroup","domain","PopoverInfo","appendTo","Popover","hasAutoWidth","maxWidth","headerContent","bodyContent","TextContent","Text","TextList","TextListItem","Button","variant","className","propTypes","PropTypes","customTitle","Title","headingLevel","size","substepOf","condition","or","when","is","pattern","message","useState","activeTabKey","setActiveTabKey","orgId","setOrgId","useFormApi","change","getState","useEffect","insights","chrome","auth","getUser","userData","id","identity","internal","org_id","DescriptionList","DescriptionListGroup","DescriptionListTerm","DescriptionListDescription","Tabs","isFilled","activeKey","onSelect","event","tabIndex","Tab","eventKey","TabTitleText","List","isPlain","iconSize","ListItem","icon","src","TextVariants","TextListVariants","TextListItemVariants","vsphere","includes","undefined","Spinner","length","TargetEnvironment","props","input","useFieldApi","environment","setEnvironment","handleSetEnvironment","env","prevEnv","newEnv","FormGroup","Tile","onClick","isSelected","isStacked","isDisplayLarge","Checkbox","isChecked","onChange","defaultProps","removePackagesDisplayFields","packages","pack","summary","Packages","defaultArch","packagesSearchName","useRef","packagesAvailable","setPackagesAvailable","packagesAvailableFound","setPackagesAvailableFound","packagesChosen","setPackagesChosen","packagesChosenFound","setPackagesChosenFound","filterChosen","setFilterChosen","focus","setFocus","selectedPackages","searchResultsComparator","useCallback","searchTerm","a","b","startsWith","sortPackages","packageList","sortResults","sort","current","filterPackagesAvailable","filter","availablePackage","some","chosenPackage","handlePackagesAvailableSearch","api","architecture","data","packagesAvailableFiltered","handlePackagesChosenSearch","found","filteredPackagesChosen","isHidden","keydownHandler","stopPropagation","document","addEventListener","removeEventListener","moveSelected","fromAvailable","destinationPackages","updatedSourcePackages","selected","push","moveAll","chosenPackages","onOptionSelect","index","isChosen","newChosen","newAvailable","DualListSelector","DualListSelectorPane","searchInput","SearchInput","placeholder","onFocus","onBlur","val","actions","DualListSelectorList","DualListSelectorListItem","e","DualListSelectorControlsWrapper","DualListSelectorControl","isDisabled","option","tooltipContent","RadioWithPopover","ref","tenantId","guidRegex","RegExp","target","test","href","ImageCreator","schema","onSubmit","onClose","customComponentMapper","subscription","FormTemplate","showFormControls","formValues","componentMapper","review","Review","output","select","Select","AzureAuthButton","onCancel","threshold","iconPosition","isInline","required","PopoverActivation","description","CustomButtons","buttonLabels","cancel","submit","back","isSaving","setIsSaving","useContext","WizardContext","handlePrev","formOptions","valid","validating","isLoading","buttons","dispatch","useDispatch","navigate","useNavigate","requests","customizations","p","organization","Number","request","distribution","image_requests","image_type","upload_request","share_with_accounts","share","tenant_id","subscription_id","resource_group","onSave","Promise","all","then","response","composeAdded","image_status","status","addNotification","err","statusText","isDynamic","inModal","showTitles","crossroads","imageOutput","awsTarget","googleCloudTarger","msAzureTarget","registration","postHeaders","headers","body","axios","IMAGE_BUILDER_API","limit","offset","params","URLSearchParams","path","toString","search","composeImage","getComposes","getComposeStatus","getPackages","getVersion","composeFailed","error","types","payload","compose","insert","composeUpdatedStatus","composeGetStatus","composesGet","count","meta","composeStart","composeRequest","assign","composeUpdated","setRelease","arch","distro","setUploadDestinations","setUploadAWS","shareWithAccounts","setUploadAzure","subscriptionId","resourceGroup","setUploadGoogle","accountType","setSelectedPackages","setSubscription","activationKey","setSubscribeNow","subscribeNow"],"sourceRoot":""}